using System;
using GTA;
using GTA.UI;
using LemonUI;
using LemonUI.Menus;
using Newtonsoft.Json;

namespace REALIS.Core
{
    /// <summary>
    /// Menu principal REALIS utilisant LemonUI - Version corrig√©e
    /// </summary>
    public class REALISMenuFixed : Script
    {
        private readonly ObjectPool menuPool;
        private readonly NativeMenu mainMenu;
        private readonly NativeMenu vehicleMenu;
        private readonly NativeMenu policeMenu;

        // √âtat de REALIS
        private bool isRealisActive = true;
        private bool realisticPoliceEnabled = true;
        private float economyMultiplier = 1.0f;

        public REALISMenuFixed()
        {
            // Initialisation du pool de menus LemonUI
            menuPool = new ObjectPool();

            // Cr√©ation du menu principal
            mainMenu = new NativeMenu("REALIS", "Syst√®me de R√©alisme v2.0");
            vehicleMenu = new NativeMenu("REALIS", "Gestion des V√©hicules");
            policeMenu = new NativeMenu("REALIS", "Syst√®me de Police");

            // Configuration des menus
            SetupMainMenu();
            SetupVehicleMenu();
            SetupPoliceMenu();

            // Ajout de tous les menus au pool
            menuPool.Add(mainMenu);
            menuPool.Add(vehicleMenu);
            menuPool.Add(policeMenu);

            // Events
            Tick += OnTick;
            KeyDown += OnKeyDown;

            // Notification de bienvenue
            GTA.UI.Screen.ShowSubtitle("~g~REALIS Menu LemonUI~w~ charg√© ! Appuyez sur ~b~F9~w~ pour ouvrir");
        }

        private void SetupMainMenu()
        {
            // Toggle principal REALIS
            var toggleRealis = new NativeCheckboxItem("Activer REALIS", isRealisActive)
            {
                Description = "Active ou d√©sactive l'ensemble du syst√®me REALIS"
            };
            toggleRealis.CheckboxChanged += (sender, args) =>
            {
                isRealisActive = toggleRealis.Checked;
                GTA.UI.Screen.ShowSubtitle($"REALIS {(toggleRealis.Checked ? "~g~activ√©" : "~r~d√©sactiv√©")}~w~");
            };
            mainMenu.Add(toggleRealis);

            // S√©parateur
            mainMenu.Add(new NativeSeparatorItem("Modules REALIS"));

            // Item v√©hicules
            var vehicleItem = new NativeItem("üöó V√©hicules & Concessionnaires", "Gestion des v√©hicules, concessionnaires et √©conomie automobile");
            vehicleItem.Activated += (sender, args) =>
            {
                mainMenu.Visible = false;
                vehicleMenu.Visible = true;
            };
            mainMenu.Add(vehicleItem);

            // Item police
            var policeItem = new NativeItem("üëÆ Syst√®me de Police", "Configuration du syst√®me de police r√©aliste");
            policeItem.Activated += (sender, args) =>
            {
                mainMenu.Visible = false;
                policeMenu.Visible = true;
            };
            mainMenu.Add(policeItem);

            // Item application de livraison
            var foodAppItem = new NativeItem("üì± QuickEats App", "Ouvrir l'application de livraison de nourriture");
            foodAppItem.Activated += (sender, args) =>
            {
                mainMenu.Visible = false;
                // Ici, nous pourrions d√©clencher l'ouverture de l'app QuickEats
                GTA.UI.Screen.ShowSubtitle("~b~Appuyez sur F8 pour ouvrir QuickEats~w~ (ou int√©gration directe si disponible)");
            };
            mainMenu.Add(foodAppItem);

            // S√©parateur
            mainMenu.Add(new NativeSeparatorItem("Actions Rapides"));

            // Sauvegarder la configuration
            var saveConfig = new NativeItem("üíæ Sauvegarder Config", "Sauvegarde la configuration actuelle");
            saveConfig.Activated += SaveConfiguration;
            mainMenu.Add(saveConfig);

            // Fermer le menu
            var closeItem = new NativeItem("‚ùå Fermer le Menu");
            closeItem.Activated += (sender, args) => mainMenu.Visible = false;
            mainMenu.Add(closeItem);
        }

        private void SetupVehicleMenu()
        {
            // Liste des concessionnaires
            var dealershipList = new NativeListItem<string>("Concessionnaire Actif",
                "S√©lectionnez le concessionnaire √† g√©rer",
                "Premium Deluxe Motorsport", "Simeon Yetarian", "Super Autos", 
                "Southern SA Auto", "Luxury Autos");

            dealershipList.ItemChanged += (sender, args) =>
            {
                GTA.UI.Screen.ShowSubtitle($"~b~Concessionnaire s√©lectionn√©:~w~ {args.Object}");
            };
            vehicleMenu.Add(dealershipList);

            // Toggle pour concessionnaires r√©alistes
            var realisticDealers = new NativeCheckboxItem("Concessionnaires R√©alistes", true)
            {
                Description = "Active les heures d'ouverture et stock limit√©"
            };
            vehicleMenu.Add(realisticDealers);

            // Actions v√©hicules
            vehicleMenu.Add(new NativeSeparatorItem("Actions"));

            var spawnTestVehicle = new NativeItem("üöó Test Drive", "Fait appara√Ætre un v√©hicule de test");
            spawnTestVehicle.Activated += SpawnTestVehicle;
            vehicleMenu.Add(spawnTestVehicle);

            var repairCurrentVehicle = new NativeItem("üîß R√©parer V√©hicule", "R√©pare le v√©hicule actuel");
            repairCurrentVehicle.Activated += RepairCurrentVehicle;
            vehicleMenu.Add(repairCurrentVehicle);

            // Retour
            AddBackButton(vehicleMenu, mainMenu);
        }

        private void SetupPoliceMenu()
        {
            // Toggle police r√©aliste
            var realisticPolice = new NativeCheckboxItem("Police R√©aliste", realisticPoliceEnabled)
            {
                Description = "Active le syst√®me de police r√©aliste avec IA am√©lior√©e"
            };
            realisticPolice.CheckboxChanged += (sender, args) =>
            {
                realisticPoliceEnabled = realisticPolice.Checked;
                GTA.UI.Screen.ShowSubtitle($"Police r√©aliste {(realisticPolice.Checked ? "~g~activ√©e" : "~r~d√©sactiv√©e")}~w~");
            };
            policeMenu.Add(realisticPolice);

            // Agressivit√© de la police
            var policeAggression = new NativeListItem<string>("Agressivit√© Police",
                "D√©finit le comportement de la police",
                "Tr√®s Passive", "Passive", "Normale", "Agressive", "Tr√®s Agressive");
            policeMenu.Add(policeAggression);

            // S√©parateur
            policeMenu.Add(new NativeSeparatorItem("Actions Rapides"));

            // Effacer niveau de recherche
            var clearWanted = new NativeItem("üö´ Effacer Recherche", "Remet le niveau √† 0");
            clearWanted.Activated += (sender, args) =>
            {
                Game.Player.Wanted.SetWantedLevel(0, false);
                Game.Player.Wanted.ApplyWantedLevelChangeNow(false);
                GTA.UI.Screen.ShowSubtitle("~g~Niveau de recherche effac√©");
            };
            policeMenu.Add(clearWanted);

            // Spawner police
            var spawnPolice = new NativeItem("üöî Spawner Patrouille", "Fait appara√Ætre une patrouille");
            spawnPolice.Activated += SpawnPolicePatrol;
            policeMenu.Add(spawnPolice);

            AddBackButton(policeMenu, mainMenu);
        }

        private void AddBackButton(NativeMenu currentMenu, NativeMenu parentMenu)
        {
            currentMenu.Add(new NativeSeparatorItem(""));
            var backItem = new NativeItem("‚Üê Retour au Menu Principal");
            backItem.Activated += (sender, args) =>
            {
                currentMenu.Visible = false;
                parentMenu.Visible = true;
            };
            currentMenu.Add(backItem);
        }

        private void SpawnTestVehicle(object sender, EventArgs e)
        {
            var testVehicles = new[] { "adder", "zentorno", "t20", "osiris", "entityxf", "vacca", "infernus" };
            var randomVehicle = testVehicles[new Random().Next(testVehicles.Length)];

            var playerPos = Game.Player.Character.Position;
            var spawnPos = playerPos + Game.Player.Character.ForwardVector * 3;

            var vehicle = World.CreateVehicle(randomVehicle, spawnPos);
            if (vehicle != null)
            {
                vehicle.PlaceOnGround();
                vehicle.Repair();
                GTA.UI.Screen.ShowSubtitle($"~g~V√©hicule de test spawn√©:~w~ {randomVehicle}");
            }
        }

        private void RepairCurrentVehicle(object sender, EventArgs e)
        {
            if (Game.Player.Character.IsInVehicle())
            {
                var vehicle = Game.Player.Character.CurrentVehicle;
                vehicle.Repair();
                vehicle.EngineHealth = 1000f;
                vehicle.PetrolTankHealth = 1000f;
                GTA.UI.Screen.ShowSubtitle("~g~V√©hicule r√©par√© !");
            }
            else
            {
                GTA.UI.Screen.ShowSubtitle("~r~Vous devez √™tre dans un v√©hicule !");
            }
        }

        private void SpawnPolicePatrol(object sender, EventArgs e)
        {
            var playerPos = Game.Player.Character.Position;
            var spawnPos = playerPos + Game.Player.Character.RightVector * 10;

            var policeCar = World.CreateVehicle("police", spawnPos);
            if (policeCar != null)
            {
                policeCar.PlaceOnGround();
                
                // Cr√©er un policier
                var cop = World.CreatePed(PedHash.Cop01SFY, spawnPos);
                if (cop != null)
                {
                    cop.SetIntoVehicle(policeCar, VehicleSeat.Driver);
                    cop.KeepTaskWhenMarkedAsNoLongerNeeded = true;
                    cop.BlockPermanentEvents = true;
                }
                
                GTA.UI.Screen.ShowSubtitle("~b~Patrouille de police d√©ploy√©e");
            }
        }

        private void SaveConfiguration(object sender, EventArgs e)
        {
            try
            {
                var config = new
                {
                    IsActive = isRealisActive,
                    RealisticPolice = realisticPoliceEnabled,
                    EconomyMultiplier = economyMultiplier,
                    SavedAt = DateTime.Now
                };

                var json = JsonConvert.SerializeObject(config, Formatting.Indented);
                System.IO.File.WriteAllText("scripts/REALIS_Config.json", json);
                
                GTA.UI.Screen.ShowSubtitle("~g~Configuration sauvegard√©e !");
            }
            catch (Exception ex)
            {
                GTA.UI.Screen.ShowSubtitle($"~r~Erreur sauvegarde: {ex.Message}");
            }
        }

        private void OnTick(object sender, EventArgs e)
        {
            // Traitement essentiel des menus LemonUI
            menuPool.Process();
        }

        private void OnKeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            // F9 pour ouvrir/fermer le menu principal
            if (e.KeyCode == System.Windows.Forms.Keys.F6)
            {
                mainMenu.Visible = !mainMenu.Visible;
            }
        }
    }
} 