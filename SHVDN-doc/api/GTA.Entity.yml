### YamlMime:ManagedReference
items:
- uid: GTA.Entity
  commentId: T:GTA.Entity
  id: Entity
  parent: GTA
  children:
  - GTA.Entity.AbovePosition
  - GTA.Entity.ActivatePhysics
  - GTA.Entity.AddBlip
  - GTA.Entity.AllowsFreezeWaitingOnCollision
  - GTA.Entity.ApplyForce(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  - GTA.Entity.ApplyForceRelative(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  - GTA.Entity.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  - GTA.Entity.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  - GTA.Entity.ApplyRelativeForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  - GTA.Entity.ApplyWorldForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  - GTA.Entity.ApplyWorldForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  - GTA.Entity.ApplyWorldForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  - GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3)
  - GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  - GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3)
  - GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  - GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  - GTA.Entity.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  - GTA.Entity.AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  - GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  - GTA.Entity.AttachedBlip
  - GTA.Entity.AttachedBlips
  - GTA.Entity.AttachedEntity
  - GTA.Entity.BelowPosition
  - GTA.Entity.BlocksAnyDamageButHasReactions
  - GTA.Entity.BlocksDamageByRelGroup
  - GTA.Entity.Bones
  - GTA.Entity.CanBeAutoVaulted
  - GTA.Entity.CanBeClimbed
  - GTA.Entity.CanOnlyBeDamagedByRelGroup
  - GTA.Entity.CenterOfGravityOffset
  - GTA.Entity.ClearLastWeaponDamage
  - GTA.Entity.ClearNotDamagedByRelGroup
  - GTA.Entity.ClearOnlyDamagedByRelGroup
  - GTA.Entity.CurrentInteriorProxy
  - GTA.Entity.CurrentInteriorRoomKey
  - GTA.Entity.DamageRecords
  - GTA.Entity.DeactivatePhysics
  - GTA.Entity.Delete
  - GTA.Entity.Detach
  - GTA.Entity.Detach(System.Boolean,System.Boolean)
  - GTA.Entity.DetachFragmentPart(System.Int32)
  - GTA.Entity.DontLoadCollision
  - GTA.Entity.EntityType
  - GTA.Entity.Equals(System.Object)
  - GTA.Entity.Exists
  - GTA.Entity.FindAnimationEventPhase(GTA.CrClipAsset,System.String,System.Single@,System.Single@)
  - GTA.Entity.ForwardVector
  - GTA.Entity.FragmentGroupCount
  - GTA.Entity.FromHandle(System.Int32)
  - GTA.Entity.FrontPosition
  - GTA.Entity.GetAnimationCurrentTime(GTA.CrClipAsset)
  - GTA.Entity.GetAnimationTotalTime(GTA.CrClipAsset)
  - GTA.Entity.GetHashCode
  - GTA.Entity.GetOffsetPosition(GTA.Math.Vector3)
  - GTA.Entity.GetPositionOffset(GTA.Math.Vector3)
  - GTA.Entity.GetSpeedVector(System.Boolean)
  - GTA.Entity.HasAnimationDirector
  - GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)
  - GTA.Entity.HasBeenDamagedBy(GTA.Entity)
  - GTA.Entity.HasBeenDamagedBy(GTA.WeaponHash)
  - GTA.Entity.HasBeenDamagedByAnyMeleeWeapon
  - GTA.Entity.HasBeenDamagedByAnyWeapon
  - GTA.Entity.HasClearLineOfSightTo(GTA.Entity,GTA.IntersectFlags)
  - GTA.Entity.HasClearLineOfSightToAdjustForCover(GTA.Entity,GTA.IntersectFlags)
  - GTA.Entity.HasClearLineOfSightToInFront(GTA.Entity)
  - GTA.Entity.HasCollided
  - GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding
  - GTA.Entity.HasDrawable
  - GTA.Entity.HasFinishedAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  - GTA.Entity.HasGravity
  - GTA.Entity.HasPhysics
  - GTA.Entity.HasSkeleton
  - GTA.Entity.Heading
  - GTA.Entity.Health
  - GTA.Entity.HealthFloat
  - GTA.Entity.HeightAboveGround
  - GTA.Entity.IsAlive
  - GTA.Entity.IsAttached
  - GTA.Entity.IsAttachedTo(GTA.Entity)
  - GTA.Entity.IsAttachedToAnyPed
  - GTA.Entity.IsAttachedToAnyProp
  - GTA.Entity.IsAttachedToAnyVehicle
  - GTA.Entity.IsBulletProof
  - GTA.Entity.IsCollisionEnabled
  - GTA.Entity.IsCollisionProof
  - GTA.Entity.IsDead
  - GTA.Entity.IsExplosionProof
  - GTA.Entity.IsFireProof
  - GTA.Entity.IsFragmentObject
  - GTA.Entity.IsInAir
  - GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)
  - GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  - GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)
  - GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3)
  - GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  - GTA.Entity.IsInRange(GTA.Math.Vector3,System.Single)
  - GTA.Entity.IsInWater
  - GTA.Entity.IsInWaterStrict
  - GTA.Entity.IsInvincible
  - GTA.Entity.IsMeleeProof
  - GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3)
  - GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  - GTA.Entity.IsOccluded
  - GTA.Entity.IsOnFire
  - GTA.Entity.IsOnScreen
  - GTA.Entity.IsOnlyDamagedByPlayer
  - GTA.Entity.IsOwnedByAnyScript
  - GTA.Entity.IsOwnedByShvdnScript
  - GTA.Entity.IsPersistent
  - GTA.Entity.IsPickupByCargobobDisabled
  - GTA.Entity.IsPlayingAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  - GTA.Entity.IsPositionFrozen
  - GTA.Entity.IsRecordingCollisions
  - GTA.Entity.IsRendered
  - GTA.Entity.IsSmokeProof
  - GTA.Entity.IsStatic
  - GTA.Entity.IsSteamProof
  - GTA.Entity.IsTouching(GTA.Entity)
  - GTA.Entity.IsTouching(GTA.Model)
  - GTA.Entity.IsUpright
  - GTA.Entity.IsUprightWithin(System.Single)
  - GTA.Entity.IsUpsideDown
  - GTA.Entity.IsVisible
  - GTA.Entity.KeepsDamageFlagsOnCleanupMissionState
  - GTA.Entity.LeftPosition
  - GTA.Entity.LocalRotationVelocity
  - GTA.Entity.LodDistance
  - GTA.Entity.MarkAsMissionEntity(System.Boolean)
  - GTA.Entity.MarkAsNoLongerNeeded
  - GTA.Entity.MaterialCollidingWith
  - GTA.Entity.Matrix
  - GTA.Entity.MaxHealth
  - GTA.Entity.MaxHealthFloat
  - GTA.Entity.MaxSpeed
  - GTA.Entity.MemoryAddress
  - GTA.Entity.Model
  - GTA.Entity.Opacity
  - GTA.Entity.OwnerScriptName
  - GTA.Entity.PedCollidingWith
  - GTA.Entity.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.AnimationFlags)
  - GTA.Entity.PlaySynchronizedAnim(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  - GTA.Entity.PlaySynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  - GTA.Entity.PopulationType
  - GTA.Entity.Position
  - GTA.Entity.PositionNoOffset
  - GTA.Entity.ProcessEntityAttachments
  - GTA.Entity.PropCollidingWith
  - GTA.Entity.Quaternion
  - GTA.Entity.RearPosition
  - GTA.Entity.RemoveParticleEffects
  - GTA.Entity.ResetOpacity
  - GTA.Entity.RightPosition
  - GTA.Entity.RightVector
  - GTA.Entity.Rotation
  - GTA.Entity.RotationVelocity
  - GTA.Entity.SetAnimationCurrentTime(GTA.CrClipAsset,System.Single)
  - GTA.Entity.SetAnimationSpeed(GTA.CrClipAsset,System.Single)
  - GTA.Entity.SetCenterOfGravityAtBoundCenter
  - GTA.Entity.SetDamping(GTA.PhysicsDampingType,System.Single)
  - GTA.Entity.SetNoCollision(GTA.Entity,System.Boolean)
  - GTA.Entity.SetNotDamagedByRelGroup(GTA.RelationshipGroup)
  - GTA.Entity.SetOnlyDamagedByRelGroup(GTA.RelationshipGroup)
  - GTA.Entity.SetOpacity(System.Int32,System.Boolean)
  - GTA.Entity.SetShouldFreezeWaitingOnCollision(System.Boolean)
  - GTA.Entity.SetToRespondToPhysicsSystem
  - GTA.Entity.ShouldRenderScorched
  - GTA.Entity.SpecificRelGroupForInflictorChecks
  - GTA.Entity.Speed
  - GTA.Entity.StopAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta)
  - GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta,System.Boolean)
  - GTA.Entity.StopSynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.AnimationBlendDelta)
  - GTA.Entity.SubmersionLevel
  - GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity@)
  - GTA.Entity.UpVector
  - GTA.Entity.UprightValue
  - GTA.Entity.VehicleCollidingWith
  - GTA.Entity.Velocity
  - GTA.Entity.WasInWater
  - GTA.Entity.WorldRotationVelocity
  - GTA.Entity.op_Equality(GTA.Entity,GTA.Entity)
  - GTA.Entity.op_Implicit(GTA.Entity)~GTA.Native.InputArgument
  - GTA.Entity.op_Inequality(GTA.Entity,GTA.Entity)
  langs:
  - csharp
  - vb
  name: Entity
  nameWithType: Entity
  fullName: GTA.Entity
  type: Class
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: 'public abstract class Entity : PoolObject, INativeValue, IDeletable, IExistable, ISpatial'
    content.vb: Public MustInherit Class Entity Inherits PoolObject Implements INativeValue, IDeletable, IExistable, ISpatial
  inheritance:
  - System.Object
  - GTA.PoolObject
  derivedClasses:
  - GTA.Ped
  - GTA.Prop
  - GTA.Vehicle
  implements:
  - GTA.Native.INativeValue
  - GTA.IDeletable
  - GTA.IExistable
  - GTA.ISpatial
  inheritedMembers:
  - GTA.PoolObject.Handle
  - GTA.PoolObject.NativeValue
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: GTA.Entity.FromHandle(System.Int32)
  commentId: M:GTA.Entity.FromHandle(System.Int32)
  id: FromHandle(System.Int32)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: FromHandle(int)
  nameWithType: Entity.FromHandle(int)
  fullName: GTA.Entity.FromHandle(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Entity FromHandle(int handle)
    parameters:
    - id: handle
      type: System.Int32
    return:
      type: GTA.Entity
    content.vb: Public Shared Function FromHandle(handle As Integer) As Entity
  overload: GTA.Entity.FromHandle*
  nameWithType.vb: Entity.FromHandle(Integer)
  fullName.vb: GTA.Entity.FromHandle(Integer)
  name.vb: FromHandle(Integer)
- uid: GTA.Entity.SetOpacity(System.Int32,System.Boolean)
  commentId: M:GTA.Entity.SetOpacity(System.Int32,System.Boolean)
  id: SetOpacity(System.Int32,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetOpacity(int, bool)
  nameWithType: Entity.SetOpacity(int, bool)
  fullName: GTA.Entity.SetOpacity(int, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetOpacity(int opacity, bool useSmoothOpacity)
    parameters:
    - id: opacity
      type: System.Int32
    - id: useSmoothOpacity
      type: System.Boolean
    content.vb: Public Sub SetOpacity(opacity As Integer, useSmoothOpacity As Boolean)
  overload: GTA.Entity.SetOpacity*
  nameWithType.vb: Entity.SetOpacity(Integer, Boolean)
  fullName.vb: GTA.Entity.SetOpacity(Integer, Boolean)
  name.vb: SetOpacity(Integer, Boolean)
- uid: GTA.Entity.ResetOpacity
  commentId: M:GTA.Entity.ResetOpacity
  id: ResetOpacity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ResetOpacity()
  nameWithType: Entity.ResetOpacity()
  fullName: GTA.Entity.ResetOpacity()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ResetOpacity()
    content.vb: Public Sub ResetOpacity()
  overload: GTA.Entity.ResetOpacity*
- uid: GTA.Entity.GetOffsetPosition(GTA.Math.Vector3)
  commentId: M:GTA.Entity.GetOffsetPosition(GTA.Math.Vector3)
  id: GetOffsetPosition(GTA.Math.Vector3)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: GetOffsetPosition(Vector3)
  nameWithType: Entity.GetOffsetPosition(Vector3)
  fullName: GTA.Entity.GetOffsetPosition(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetOffsetPosition(Vector3 offset)
    parameters:
    - id: offset
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetOffsetPosition(offset As Vector3) As Vector3
  overload: GTA.Entity.GetOffsetPosition*
- uid: GTA.Entity.GetPositionOffset(GTA.Math.Vector3)
  commentId: M:GTA.Entity.GetPositionOffset(GTA.Math.Vector3)
  id: GetPositionOffset(GTA.Math.Vector3)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: GetPositionOffset(Vector3)
  nameWithType: Entity.GetPositionOffset(Vector3)
  fullName: GTA.Entity.GetPositionOffset(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetPositionOffset(Vector3 worldCoords)
    parameters:
    - id: worldCoords
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetPositionOffset(worldCoords As Vector3) As Vector3
  overload: GTA.Entity.GetPositionOffset*
- uid: GTA.Entity.GetSpeedVector(System.Boolean)
  commentId: M:GTA.Entity.GetSpeedVector(System.Boolean)
  id: GetSpeedVector(System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: GetSpeedVector(bool)
  nameWithType: Entity.GetSpeedVector(bool)
  fullName: GTA.Entity.GetSpeedVector(bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetSpeedVector(bool relativeToEntity)
    parameters:
    - id: relativeToEntity
      type: System.Boolean
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetSpeedVector(relativeToEntity As Boolean) As Vector3
  overload: GTA.Entity.GetSpeedVector*
  nameWithType.vb: Entity.GetSpeedVector(Boolean)
  fullName.vb: GTA.Entity.GetSpeedVector(Boolean)
  name.vb: GetSpeedVector(Boolean)
- uid: GTA.Entity.HasBeenDamagedBy(GTA.Entity)
  commentId: M:GTA.Entity.HasBeenDamagedBy(GTA.Entity)
  id: HasBeenDamagedBy(GTA.Entity)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasBeenDamagedBy(Entity)
  nameWithType: Entity.HasBeenDamagedBy(Entity)
  fullName: GTA.Entity.HasBeenDamagedBy(GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasBeenDamagedBy(Entity entity)
    parameters:
    - id: entity
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Function HasBeenDamagedBy(entity As Entity) As Boolean
  overload: GTA.Entity.HasBeenDamagedBy*
- uid: GTA.Entity.HasBeenDamagedBy(GTA.WeaponHash)
  commentId: M:GTA.Entity.HasBeenDamagedBy(GTA.WeaponHash)
  id: HasBeenDamagedBy(GTA.WeaponHash)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasBeenDamagedBy(WeaponHash)
  nameWithType: Entity.HasBeenDamagedBy(WeaponHash)
  fullName: GTA.Entity.HasBeenDamagedBy(GTA.WeaponHash)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public virtual bool HasBeenDamagedBy(WeaponHash weapon)
    parameters:
    - id: weapon
      type: GTA.WeaponHash
    return:
      type: System.Boolean
    content.vb: Public Overridable Function HasBeenDamagedBy(weapon As WeaponHash) As Boolean
  overload: GTA.Entity.HasBeenDamagedBy*
- uid: GTA.Entity.HasBeenDamagedByAnyWeapon
  commentId: M:GTA.Entity.HasBeenDamagedByAnyWeapon
  id: HasBeenDamagedByAnyWeapon
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasBeenDamagedByAnyWeapon()
  nameWithType: Entity.HasBeenDamagedByAnyWeapon()
  fullName: GTA.Entity.HasBeenDamagedByAnyWeapon()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public virtual bool HasBeenDamagedByAnyWeapon()
    return:
      type: System.Boolean
    content.vb: Public Overridable Function HasBeenDamagedByAnyWeapon() As Boolean
  overload: GTA.Entity.HasBeenDamagedByAnyWeapon*
- uid: GTA.Entity.HasBeenDamagedByAnyMeleeWeapon
  commentId: M:GTA.Entity.HasBeenDamagedByAnyMeleeWeapon
  id: HasBeenDamagedByAnyMeleeWeapon
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasBeenDamagedByAnyMeleeWeapon()
  nameWithType: Entity.HasBeenDamagedByAnyMeleeWeapon()
  fullName: GTA.Entity.HasBeenDamagedByAnyMeleeWeapon()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public virtual bool HasBeenDamagedByAnyMeleeWeapon()
    return:
      type: System.Boolean
    content.vb: Public Overridable Function HasBeenDamagedByAnyMeleeWeapon() As Boolean
  overload: GTA.Entity.HasBeenDamagedByAnyMeleeWeapon*
- uid: GTA.Entity.ClearLastWeaponDamage
  commentId: M:GTA.Entity.ClearLastWeaponDamage
  id: ClearLastWeaponDamage
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ClearLastWeaponDamage()
  nameWithType: Entity.ClearLastWeaponDamage()
  fullName: GTA.Entity.ClearLastWeaponDamage()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public virtual void ClearLastWeaponDamage()
    content.vb: Public Overridable Sub ClearLastWeaponDamage()
  overload: GTA.Entity.ClearLastWeaponDamage*
- uid: GTA.Entity.DetachFragmentPart(System.Int32)
  commentId: M:GTA.Entity.DetachFragmentPart(System.Int32)
  id: DetachFragmentPart(System.Int32)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: DetachFragmentPart(int)
  nameWithType: Entity.DetachFragmentPart(int)
  fullName: GTA.Entity.DetachFragmentPart(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool DetachFragmentPart(int fragmentGroupIndex)
    parameters:
    - id: fragmentGroupIndex
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function DetachFragmentPart(fragmentGroupIndex As Integer) As Boolean
  overload: GTA.Entity.DetachFragmentPart*
  nameWithType.vb: Entity.DetachFragmentPart(Integer)
  fullName.vb: GTA.Entity.DetachFragmentPart(Integer)
  name.vb: DetachFragmentPart(Integer)
- uid: GTA.Entity.SetShouldFreezeWaitingOnCollision(System.Boolean)
  commentId: M:GTA.Entity.SetShouldFreezeWaitingOnCollision(System.Boolean)
  id: SetShouldFreezeWaitingOnCollision(System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetShouldFreezeWaitingOnCollision(bool)
  nameWithType: Entity.SetShouldFreezeWaitingOnCollision(bool)
  fullName: GTA.Entity.SetShouldFreezeWaitingOnCollision(bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetShouldFreezeWaitingOnCollision(bool shouldFreeze)
    parameters:
    - id: shouldFreeze
      type: System.Boolean
    content.vb: Public Sub SetShouldFreezeWaitingOnCollision(shouldFreeze As Boolean)
  overload: GTA.Entity.SetShouldFreezeWaitingOnCollision*
  nameWithType.vb: Entity.SetShouldFreezeWaitingOnCollision(Boolean)
  fullName.vb: GTA.Entity.SetShouldFreezeWaitingOnCollision(Boolean)
  name.vb: SetShouldFreezeWaitingOnCollision(Boolean)
- uid: GTA.Entity.SetOnlyDamagedByRelGroup(GTA.RelationshipGroup)
  commentId: M:GTA.Entity.SetOnlyDamagedByRelGroup(GTA.RelationshipGroup)
  id: SetOnlyDamagedByRelGroup(GTA.RelationshipGroup)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetOnlyDamagedByRelGroup(RelationshipGroup)
  nameWithType: Entity.SetOnlyDamagedByRelGroup(RelationshipGroup)
  fullName: GTA.Entity.SetOnlyDamagedByRelGroup(GTA.RelationshipGroup)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetOnlyDamagedByRelGroup(RelationshipGroup relGroup)
    parameters:
    - id: relGroup
      type: GTA.RelationshipGroup
    content.vb: Public Sub SetOnlyDamagedByRelGroup(relGroup As RelationshipGroup)
  overload: GTA.Entity.SetOnlyDamagedByRelGroup*
- uid: GTA.Entity.ClearOnlyDamagedByRelGroup
  commentId: M:GTA.Entity.ClearOnlyDamagedByRelGroup
  id: ClearOnlyDamagedByRelGroup
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ClearOnlyDamagedByRelGroup()
  nameWithType: Entity.ClearOnlyDamagedByRelGroup()
  fullName: GTA.Entity.ClearOnlyDamagedByRelGroup()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClearOnlyDamagedByRelGroup()
    content.vb: Public Sub ClearOnlyDamagedByRelGroup()
  overload: GTA.Entity.ClearOnlyDamagedByRelGroup*
- uid: GTA.Entity.SetNotDamagedByRelGroup(GTA.RelationshipGroup)
  commentId: M:GTA.Entity.SetNotDamagedByRelGroup(GTA.RelationshipGroup)
  id: SetNotDamagedByRelGroup(GTA.RelationshipGroup)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetNotDamagedByRelGroup(RelationshipGroup)
  nameWithType: Entity.SetNotDamagedByRelGroup(RelationshipGroup)
  fullName: GTA.Entity.SetNotDamagedByRelGroup(GTA.RelationshipGroup)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetNotDamagedByRelGroup(RelationshipGroup relGroup)
    parameters:
    - id: relGroup
      type: GTA.RelationshipGroup
    content.vb: Public Sub SetNotDamagedByRelGroup(relGroup As RelationshipGroup)
  overload: GTA.Entity.SetNotDamagedByRelGroup*
- uid: GTA.Entity.ClearNotDamagedByRelGroup
  commentId: M:GTA.Entity.ClearNotDamagedByRelGroup
  id: ClearNotDamagedByRelGroup
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ClearNotDamagedByRelGroup()
  nameWithType: Entity.ClearNotDamagedByRelGroup()
  fullName: GTA.Entity.ClearNotDamagedByRelGroup()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClearNotDamagedByRelGroup()
    content.vb: Public Sub ClearNotDamagedByRelGroup()
  overload: GTA.Entity.ClearNotDamagedByRelGroup*
- uid: GTA.Entity.IsUprightWithin(System.Single)
  commentId: M:GTA.Entity.IsUprightWithin(System.Single)
  id: IsUprightWithin(System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsUprightWithin(float)
  nameWithType: Entity.IsUprightWithin(float)
  fullName: GTA.Entity.IsUprightWithin(float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsUprightWithin(float angleToVerticalLimit = 90)
    parameters:
    - id: angleToVerticalLimit
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function IsUprightWithin(angleToVerticalLimit As Single = 90) As Boolean
  overload: GTA.Entity.IsUprightWithin*
  nameWithType.vb: Entity.IsUprightWithin(Single)
  fullName.vb: GTA.Entity.IsUprightWithin(Single)
  name.vb: IsUprightWithin(Single)
- uid: GTA.Entity.RemoveParticleEffects
  commentId: M:GTA.Entity.RemoveParticleEffects
  id: RemoveParticleEffects
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: RemoveParticleEffects()
  nameWithType: Entity.RemoveParticleEffects()
  fullName: GTA.Entity.RemoveParticleEffects()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void RemoveParticleEffects()
    content.vb: Public Sub RemoveParticleEffects()
  overload: GTA.Entity.RemoveParticleEffects*
- uid: GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity@)
  commentId: M:GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity@)
  id: TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity@)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: TryGetPhysicalEntityFromLastCollisionRecord(out Entity)
  nameWithType: Entity.TryGetPhysicalEntityFromLastCollisionRecord(out Entity)
  fullName: GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(out GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool TryGetPhysicalEntityFromLastCollisionRecord(out Entity entity)
    parameters:
    - id: entity
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Function TryGetPhysicalEntityFromLastCollisionRecord(entity As Entity) As Boolean
  overload: GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord*
  nameWithType.vb: Entity.TryGetPhysicalEntityFromLastCollisionRecord(Entity)
  fullName.vb: GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity)
  name.vb: TryGetPhysicalEntityFromLastCollisionRecord(Entity)
- uid: GTA.Entity.SetNoCollision(GTA.Entity,System.Boolean)
  commentId: M:GTA.Entity.SetNoCollision(GTA.Entity,System.Boolean)
  id: SetNoCollision(GTA.Entity,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetNoCollision(Entity, bool)
  nameWithType: Entity.SetNoCollision(Entity, bool)
  fullName: GTA.Entity.SetNoCollision(GTA.Entity, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetNoCollision(Entity entity, bool toggle)
    parameters:
    - id: entity
      type: GTA.Entity
    - id: toggle
      type: System.Boolean
    content.vb: Public Sub SetNoCollision(entity As Entity, toggle As Boolean)
  overload: GTA.Entity.SetNoCollision*
  nameWithType.vb: Entity.SetNoCollision(Entity, Boolean)
  fullName.vb: GTA.Entity.SetNoCollision(GTA.Entity, Boolean)
  name.vb: SetNoCollision(Entity, Boolean)
- uid: GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3)
  commentId: M:GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3)
  id: IsInArea(GTA.Math.Vector3,GTA.Math.Vector3)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInArea(Vector3, Vector3)
  nameWithType: Entity.IsInArea(Vector3, Vector3)
  fullName: GTA.Entity.IsInArea(GTA.Math.Vector3, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInArea(Vector3 minBounds, Vector3 maxBounds)
    parameters:
    - id: minBounds
      type: GTA.Math.Vector3
    - id: maxBounds
      type: GTA.Math.Vector3
    return:
      type: System.Boolean
    content.vb: Public Function IsInArea(minBounds As Vector3, maxBounds As Vector3) As Boolean
  overload: GTA.Entity.IsInArea*
- uid: GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  commentId: M:GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  id: IsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInArea(Vector3, Vector3, bool, PedTransportMode)
  nameWithType: Entity.IsInArea(Vector3, Vector3, bool, PedTransportMode)
  fullName: GTA.Entity.IsInArea(GTA.Math.Vector3, GTA.Math.Vector3, bool, GTA.PedTransportMode)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInArea(Vector3 minCoords, Vector3 maxCoords, bool do3DCheck, PedTransportMode transportMode = PedTransportMode.Any)
    parameters:
    - id: minCoords
      type: GTA.Math.Vector3
    - id: maxCoords
      type: GTA.Math.Vector3
    - id: do3DCheck
      type: System.Boolean
    - id: transportMode
      type: GTA.PedTransportMode
    return:
      type: System.Boolean
    content.vb: Public Function IsInArea(minCoords As Vector3, maxCoords As Vector3, do3DCheck As Boolean, transportMode As PedTransportMode = PedTransportMode.Any) As Boolean
  overload: GTA.Entity.IsInArea*
  nameWithType.vb: Entity.IsInArea(Vector3, Vector3, Boolean, PedTransportMode)
  fullName.vb: GTA.Entity.IsInArea(GTA.Math.Vector3, GTA.Math.Vector3, Boolean, GTA.PedTransportMode)
  name.vb: IsInArea(Vector3, Vector3, Boolean, PedTransportMode)
- uid: GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)
  commentId: M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)
  id: IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInAngledArea(Vector3, Vector3, float)
  nameWithType: Entity.IsInAngledArea(Vector3, Vector3, float)
  fullName: GTA.Entity.IsInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInAngledArea(Vector3 origin, Vector3 edge, float angle)
    parameters:
    - id: origin
      type: GTA.Math.Vector3
    - id: edge
      type: GTA.Math.Vector3
    - id: angle
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function IsInAngledArea(origin As Vector3, edge As Vector3, angle As Single) As Boolean
  overload: GTA.Entity.IsInAngledArea*
  nameWithType.vb: Entity.IsInAngledArea(Vector3, Vector3, Single)
  fullName.vb: GTA.Entity.IsInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, Single)
  name.vb: IsInAngledArea(Vector3, Vector3, Single)
- uid: GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  commentId: M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  id: IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInAngledArea(Vector3, Vector3, float, bool)
  nameWithType: Entity.IsInAngledArea(Vector3, Vector3, float, bool)
  fullName: GTA.Entity.IsInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInAngledArea(Vector3 originEdge, Vector3 extentEdge, float width, bool includeZAxis)
    parameters:
    - id: originEdge
      type: GTA.Math.Vector3
    - id: extentEdge
      type: GTA.Math.Vector3
    - id: width
      type: System.Single
    - id: includeZAxis
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Function IsInAngledArea(originEdge As Vector3, extentEdge As Vector3, width As Single, includeZAxis As Boolean) As Boolean
  overload: GTA.Entity.IsInAngledArea*
  nameWithType.vb: Entity.IsInAngledArea(Vector3, Vector3, Single, Boolean)
  fullName.vb: GTA.Entity.IsInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean)
  name.vb: IsInAngledArea(Vector3, Vector3, Single, Boolean)
- uid: GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)
  commentId: M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)
  id: IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInAngledArea(Vector3, Vector3, float, bool, PedTransportMode)
  nameWithType: Entity.IsInAngledArea(Vector3, Vector3, float, bool, PedTransportMode)
  fullName: GTA.Entity.IsInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, float, bool, GTA.PedTransportMode)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInAngledArea(Vector3 originEdge, Vector3 extentEdge, float width, bool do3DCheck, PedTransportMode transportMode = PedTransportMode.Any)
    parameters:
    - id: originEdge
      type: GTA.Math.Vector3
    - id: extentEdge
      type: GTA.Math.Vector3
    - id: width
      type: System.Single
    - id: do3DCheck
      type: System.Boolean
    - id: transportMode
      type: GTA.PedTransportMode
    return:
      type: System.Boolean
    content.vb: Public Function IsInAngledArea(originEdge As Vector3, extentEdge As Vector3, width As Single, do3DCheck As Boolean, transportMode As PedTransportMode = PedTransportMode.Any) As Boolean
  overload: GTA.Entity.IsInAngledArea*
  nameWithType.vb: Entity.IsInAngledArea(Vector3, Vector3, Single, Boolean, PedTransportMode)
  fullName.vb: GTA.Entity.IsInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, GTA.PedTransportMode)
  name.vb: IsInAngledArea(Vector3, Vector3, Single, Boolean, PedTransportMode)
- uid: GTA.Entity.IsInRange(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.Entity.IsInRange(GTA.Math.Vector3,System.Single)
  id: IsInRange(GTA.Math.Vector3,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInRange(Vector3, float)
  nameWithType: Entity.IsInRange(Vector3, float)
  fullName: GTA.Entity.IsInRange(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInRange(Vector3 position, float range)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: range
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function IsInRange(position As Vector3, range As Single) As Boolean
  overload: GTA.Entity.IsInRange*
  nameWithType.vb: Entity.IsInRange(Vector3, Single)
  fullName.vb: GTA.Entity.IsInRange(GTA.Math.Vector3, Single)
  name.vb: IsInRange(Vector3, Single)
- uid: GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3)
  commentId: M:GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3)
  id: IsNearEntity(GTA.Entity,GTA.Math.Vector3)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsNearEntity(Entity, Vector3)
  nameWithType: Entity.IsNearEntity(Entity, Vector3)
  fullName: GTA.Entity.IsNearEntity(GTA.Entity, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsNearEntity(Entity entity, Vector3 bounds)
    parameters:
    - id: entity
      type: GTA.Entity
    - id: bounds
      type: GTA.Math.Vector3
    return:
      type: System.Boolean
    content.vb: Public Function IsNearEntity(entity As Entity, bounds As Vector3) As Boolean
  overload: GTA.Entity.IsNearEntity*
- uid: GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  commentId: M:GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  id: IsNearEntity(GTA.Entity,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsNearEntity(Entity, Vector3, bool, PedTransportMode)
  nameWithType: Entity.IsNearEntity(Entity, Vector3, bool, PedTransportMode)
  fullName: GTA.Entity.IsNearEntity(GTA.Entity, GTA.Math.Vector3, bool, GTA.PedTransportMode)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsNearEntity(Entity entity, Vector3 bounds, bool do3DCheck, PedTransportMode transportMode = PedTransportMode.Any)
    parameters:
    - id: entity
      type: GTA.Entity
    - id: bounds
      type: GTA.Math.Vector3
    - id: do3DCheck
      type: System.Boolean
    - id: transportMode
      type: GTA.PedTransportMode
    return:
      type: System.Boolean
    content.vb: Public Function IsNearEntity(entity As Entity, bounds As Vector3, do3DCheck As Boolean, transportMode As PedTransportMode = PedTransportMode.Any) As Boolean
  overload: GTA.Entity.IsNearEntity*
  nameWithType.vb: Entity.IsNearEntity(Entity, Vector3, Boolean, PedTransportMode)
  fullName.vb: GTA.Entity.IsNearEntity(GTA.Entity, GTA.Math.Vector3, Boolean, GTA.PedTransportMode)
  name.vb: IsNearEntity(Entity, Vector3, Boolean, PedTransportMode)
- uid: GTA.Entity.IsTouching(GTA.Model)
  commentId: M:GTA.Entity.IsTouching(GTA.Model)
  id: IsTouching(GTA.Model)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsTouching(Model)
  nameWithType: Entity.IsTouching(Model)
  fullName: GTA.Entity.IsTouching(GTA.Model)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsTouching(Model model)
    parameters:
    - id: model
      type: GTA.Model
    return:
      type: System.Boolean
    content.vb: Public Function IsTouching(model As Model) As Boolean
  overload: GTA.Entity.IsTouching*
- uid: GTA.Entity.IsTouching(GTA.Entity)
  commentId: M:GTA.Entity.IsTouching(GTA.Entity)
  id: IsTouching(GTA.Entity)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsTouching(Entity)
  nameWithType: Entity.IsTouching(Entity)
  fullName: GTA.Entity.IsTouching(GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsTouching(Entity entity)
    parameters:
    - id: entity
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Function IsTouching(entity As Entity) As Boolean
  overload: GTA.Entity.IsTouching*
- uid: GTA.Entity.AddBlip
  commentId: M:GTA.Entity.AddBlip
  id: AddBlip
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AddBlip()
  nameWithType: Entity.AddBlip()
  fullName: GTA.Entity.AddBlip()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Blip AddBlip()
    return:
      type: GTA.Blip
    content.vb: Public Function AddBlip() As Blip
  overload: GTA.Entity.AddBlip*
- uid: GTA.Entity.Detach
  commentId: M:GTA.Entity.Detach
  id: Detach
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Detach()
  nameWithType: Entity.Detach()
  fullName: GTA.Entity.Detach()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Detach()
    content.vb: Public Sub Detach()
  overload: GTA.Entity.Detach*
- uid: GTA.Entity.Detach(System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.Detach(System.Boolean,System.Boolean)
  id: Detach(System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Detach(bool, bool)
  nameWithType: Entity.Detach(bool, bool)
  fullName: GTA.Entity.Detach(bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Detach(bool applyVelocity, bool noCollisionUntilClear)
    parameters:
    - id: applyVelocity
      type: System.Boolean
    - id: noCollisionUntilClear
      type: System.Boolean
    content.vb: Public Sub Detach(applyVelocity As Boolean, noCollisionUntilClear As Boolean)
  overload: GTA.Entity.Detach*
  nameWithType.vb: Entity.Detach(Boolean, Boolean)
  fullName.vb: GTA.Entity.Detach(Boolean, Boolean)
  name.vb: Detach(Boolean, Boolean)
- uid: GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3)
  commentId: M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3)
  id: AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachTo(Entity, Vector3, Vector3)
  nameWithType: Entity.AttachTo(Entity, Vector3, Vector3)
  fullName: GTA.Entity.AttachTo(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachTo(Entity entity, Vector3 position = default, Vector3 rotation = default)
    parameters:
    - id: entity
      type: GTA.Entity
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    content.vb: Public Sub AttachTo(entity As Entity, position As Vector3 = Nothing, rotation As Vector3 = Nothing)
  overload: GTA.Entity.AttachTo*
- uid: GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3)
  commentId: M:GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3)
  id: AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachTo(EntityBone, Vector3, Vector3)
  nameWithType: Entity.AttachTo(EntityBone, Vector3, Vector3)
  fullName: GTA.Entity.AttachTo(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachTo(EntityBone entityBone, Vector3 position = default, Vector3 rotation = default)
    parameters:
    - id: entityBone
      type: GTA.EntityBone
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    content.vb: Public Sub AttachTo(entityBone As EntityBone, position As Vector3 = Nothing, rotation As Vector3 = Nothing)
  overload: GTA.Entity.AttachTo*
- uid: GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  id: AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachTo(Entity, Vector3, Vector3, bool, bool, bool, bool, EulerRotationOrder, bool, bool)
  nameWithType: Entity.AttachTo(Entity, Vector3, Vector3, bool, bool, bool, bool, EulerRotationOrder, bool, bool)
  fullName: GTA.Entity.AttachTo(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, bool, bool, bool, bool, GTA.EulerRotationOrder, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachTo(Entity entity, Vector3 offset, Vector3 rotation, bool detachWhenDead = false, bool detachWhenRagdoll = false, bool activeCollisions = false, bool useBasicAttachIfPed = false, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ, bool attachOffsetIsRelative = true, bool markAsNoLongerNeededWhenDetached = false)
    parameters:
    - id: entity
      type: GTA.Entity
    - id: offset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: detachWhenDead
      type: System.Boolean
    - id: detachWhenRagdoll
      type: System.Boolean
    - id: activeCollisions
      type: System.Boolean
    - id: useBasicAttachIfPed
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    - id: attachOffsetIsRelative
      type: System.Boolean
    - id: markAsNoLongerNeededWhenDetached
      type: System.Boolean
    content.vb: Public Sub AttachTo(entity As Entity, offset As Vector3, rotation As Vector3, detachWhenDead As Boolean = False, detachWhenRagdoll As Boolean = False, activeCollisions As Boolean = False, useBasicAttachIfPed As Boolean = False, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ, attachOffsetIsRelative As Boolean = True, markAsNoLongerNeededWhenDetached As Boolean = False)
  overload: GTA.Entity.AttachTo*
  nameWithType.vb: Entity.AttachTo(Entity, Vector3, Vector3, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Boolean, Boolean)
  fullName.vb: GTA.Entity.AttachTo(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder, Boolean, Boolean)
  name.vb: AttachTo(Entity, Vector3, Vector3, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Boolean, Boolean)
- uid: GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  id: AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachTo(EntityBone, Vector3, Vector3, bool, bool, bool, bool, EulerRotationOrder, bool, bool)
  nameWithType: Entity.AttachTo(EntityBone, Vector3, Vector3, bool, bool, bool, bool, EulerRotationOrder, bool, bool)
  fullName: GTA.Entity.AttachTo(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, bool, bool, bool, bool, GTA.EulerRotationOrder, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachTo(EntityBone entityBone, Vector3 offset, Vector3 rotation, bool detachWhenDead = false, bool detachWhenRagdoll = false, bool activeCollisions = false, bool useBasicAttachIfPed = false, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ, bool attachOffsetIsRelative = true, bool markAsNoLongerNeededWhenDetached = false)
    parameters:
    - id: entityBone
      type: GTA.EntityBone
    - id: offset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: detachWhenDead
      type: System.Boolean
    - id: detachWhenRagdoll
      type: System.Boolean
    - id: activeCollisions
      type: System.Boolean
    - id: useBasicAttachIfPed
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    - id: attachOffsetIsRelative
      type: System.Boolean
    - id: markAsNoLongerNeededWhenDetached
      type: System.Boolean
    content.vb: Public Sub AttachTo(entityBone As EntityBone, offset As Vector3, rotation As Vector3, detachWhenDead As Boolean = False, detachWhenRagdoll As Boolean = False, activeCollisions As Boolean = False, useBasicAttachIfPed As Boolean = False, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ, attachOffsetIsRelative As Boolean = True, markAsNoLongerNeededWhenDetached As Boolean = False)
  overload: GTA.Entity.AttachTo*
  nameWithType.vb: Entity.AttachTo(EntityBone, Vector3, Vector3, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Boolean, Boolean)
  fullName.vb: GTA.Entity.AttachTo(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder, Boolean, Boolean)
  name.vb: AttachTo(EntityBone, Vector3, Vector3, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Boolean, Boolean)
- uid: GTA.Entity.AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  commentId: M:GTA.Entity.AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  id: AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachToMatrixPhysically(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  nameWithType: Entity.AttachToMatrixPhysically(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  fullName: GTA.Entity.AttachToMatrixPhysically(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToMatrixPhysically(Entity secondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ)
    parameters:
    - id: secondEntity
      type: GTA.Entity
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    content.vb: Public Sub AttachToMatrixPhysically(secondEntity As Entity, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ)
  overload: GTA.Entity.AttachToMatrixPhysically*
  nameWithType.vb: Entity.AttachToMatrixPhysically(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
  fullName.vb: GTA.Entity.AttachToMatrixPhysically(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder)
  name.vb: AttachToMatrixPhysically(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
- uid: GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  commentId: M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  id: AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  nameWithType: Entity.AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  fullName: GTA.Entity.AttachToBonePhysically(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToBonePhysically(EntityBone boneOfSecondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ)
    parameters:
    - id: boneOfSecondEntity
      type: GTA.EntityBone
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    content.vb: Public Sub AttachToBonePhysically(boneOfSecondEntity As EntityBone, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ)
  overload: GTA.Entity.AttachToBonePhysically*
  nameWithType.vb: Entity.AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
  fullName.vb: GTA.Entity.AttachToBonePhysically(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder)
  name.vb: AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
- uid: GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  commentId: M:GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  id: AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachToMatrixPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  nameWithType: Entity.AttachToMatrixPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  fullName: GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToMatrixPhysicallyOverrideInverseMass(Entity secondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ, float invMassScaleA = 1, float invMassScaleB = 1)
    parameters:
    - id: secondEntity
      type: GTA.Entity
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    - id: invMassScaleA
      type: System.Single
    - id: invMassScaleB
      type: System.Single
    content.vb: Public Sub AttachToMatrixPhysicallyOverrideInverseMass(secondEntity As Entity, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ, invMassScaleA As Single = 1, invMassScaleB As Single = 1)
  overload: GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass*
  nameWithType.vb: Entity.AttachToMatrixPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
  fullName.vb: GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder, Single, Single)
  name.vb: AttachToMatrixPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
- uid: GTA.Entity.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  commentId: M:GTA.Entity.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  id: AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  nameWithType: Entity.AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  fullName: GTA.Entity.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToBonePhysicallyOverrideInverseMass(EntityBone boneOfSecondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ, float invMassScaleA = 1, float invMassScaleB = 1)
    parameters:
    - id: boneOfSecondEntity
      type: GTA.EntityBone
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    - id: invMassScaleA
      type: System.Single
    - id: invMassScaleB
      type: System.Single
    content.vb: Public Sub AttachToBonePhysicallyOverrideInverseMass(boneOfSecondEntity As EntityBone, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ, invMassScaleA As Single = 1, invMassScaleB As Single = 1)
  overload: GTA.Entity.AttachToBonePhysicallyOverrideInverseMass*
  nameWithType.vb: Entity.AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
  fullName.vb: GTA.Entity.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder, Single, Single)
  name.vb: AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
- uid: GTA.Entity.IsAttached
  commentId: M:GTA.Entity.IsAttached
  id: IsAttached
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsAttached()
  nameWithType: Entity.IsAttached()
  fullName: GTA.Entity.IsAttached()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsAttached()
    return:
      type: System.Boolean
    content.vb: Public Function IsAttached() As Boolean
  overload: GTA.Entity.IsAttached*
- uid: GTA.Entity.IsAttachedTo(GTA.Entity)
  commentId: M:GTA.Entity.IsAttachedTo(GTA.Entity)
  id: IsAttachedTo(GTA.Entity)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsAttachedTo(Entity)
  nameWithType: Entity.IsAttachedTo(Entity)
  fullName: GTA.Entity.IsAttachedTo(GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsAttachedTo(Entity entity)
    parameters:
    - id: entity
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Function IsAttachedTo(entity As Entity) As Boolean
  overload: GTA.Entity.IsAttachedTo*
- uid: GTA.Entity.IsAttachedToAnyProp
  commentId: M:GTA.Entity.IsAttachedToAnyProp
  id: IsAttachedToAnyProp
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsAttachedToAnyProp()
  nameWithType: Entity.IsAttachedToAnyProp()
  fullName: GTA.Entity.IsAttachedToAnyProp()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsAttachedToAnyProp()
    return:
      type: System.Boolean
    content.vb: Public Function IsAttachedToAnyProp() As Boolean
  overload: GTA.Entity.IsAttachedToAnyProp*
- uid: GTA.Entity.IsAttachedToAnyPed
  commentId: M:GTA.Entity.IsAttachedToAnyPed
  id: IsAttachedToAnyPed
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsAttachedToAnyPed()
  nameWithType: Entity.IsAttachedToAnyPed()
  fullName: GTA.Entity.IsAttachedToAnyPed()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsAttachedToAnyPed()
    return:
      type: System.Boolean
    content.vb: Public Function IsAttachedToAnyPed() As Boolean
  overload: GTA.Entity.IsAttachedToAnyPed*
- uid: GTA.Entity.IsAttachedToAnyVehicle
  commentId: M:GTA.Entity.IsAttachedToAnyVehicle
  id: IsAttachedToAnyVehicle
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsAttachedToAnyVehicle()
  nameWithType: Entity.IsAttachedToAnyVehicle()
  fullName: GTA.Entity.IsAttachedToAnyVehicle()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsAttachedToAnyVehicle()
    return:
      type: System.Boolean
    content.vb: Public Function IsAttachedToAnyVehicle() As Boolean
  overload: GTA.Entity.IsAttachedToAnyVehicle*
- uid: GTA.Entity.ProcessEntityAttachments
  commentId: M:GTA.Entity.ProcessEntityAttachments
  id: ProcessEntityAttachments
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ProcessEntityAttachments()
  nameWithType: Entity.ProcessEntityAttachments()
  fullName: GTA.Entity.ProcessEntityAttachments()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ProcessEntityAttachments()
    content.vb: Public Sub ProcessEntityAttachments()
  overload: GTA.Entity.ProcessEntityAttachments*
- uid: GTA.Entity.ActivatePhysics
  commentId: M:GTA.Entity.ActivatePhysics
  id: ActivatePhysics
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ActivatePhysics()
  nameWithType: Entity.ActivatePhysics()
  fullName: GTA.Entity.ActivatePhysics()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ActivatePhysics()
    content.vb: Public Sub ActivatePhysics()
  overload: GTA.Entity.ActivatePhysics*
- uid: GTA.Entity.DeactivatePhysics
  commentId: M:GTA.Entity.DeactivatePhysics
  id: DeactivatePhysics
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: DeactivatePhysics()
  nameWithType: Entity.DeactivatePhysics()
  fullName: GTA.Entity.DeactivatePhysics()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void DeactivatePhysics()
    content.vb: Public Sub DeactivatePhysics()
  overload: GTA.Entity.DeactivatePhysics*
- uid: GTA.Entity.SetToRespondToPhysicsSystem
  commentId: M:GTA.Entity.SetToRespondToPhysicsSystem
  id: SetToRespondToPhysicsSystem
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetToRespondToPhysicsSystem()
  nameWithType: Entity.SetToRespondToPhysicsSystem()
  fullName: GTA.Entity.SetToRespondToPhysicsSystem()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetToRespondToPhysicsSystem()
    content.vb: Public Sub SetToRespondToPhysicsSystem()
  overload: GTA.Entity.SetToRespondToPhysicsSystem*
- uid: GTA.Entity.SetDamping(GTA.PhysicsDampingType,System.Single)
  commentId: M:GTA.Entity.SetDamping(GTA.PhysicsDampingType,System.Single)
  id: SetDamping(GTA.PhysicsDampingType,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetDamping(PhysicsDampingType, float)
  nameWithType: Entity.SetDamping(PhysicsDampingType, float)
  fullName: GTA.Entity.SetDamping(GTA.PhysicsDampingType, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetDamping(PhysicsDampingType dampingType, float dampingValue)
    parameters:
    - id: dampingType
      type: GTA.PhysicsDampingType
    - id: dampingValue
      type: System.Single
    content.vb: Public Sub SetDamping(dampingType As PhysicsDampingType, dampingValue As Single)
  overload: GTA.Entity.SetDamping*
  nameWithType.vb: Entity.SetDamping(PhysicsDampingType, Single)
  fullName.vb: GTA.Entity.SetDamping(GTA.PhysicsDampingType, Single)
  name.vb: SetDamping(PhysicsDampingType, Single)
- uid: GTA.Entity.SetCenterOfGravityAtBoundCenter
  commentId: M:GTA.Entity.SetCenterOfGravityAtBoundCenter
  id: SetCenterOfGravityAtBoundCenter
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetCenterOfGravityAtBoundCenter()
  nameWithType: Entity.SetCenterOfGravityAtBoundCenter()
  fullName: GTA.Entity.SetCenterOfGravityAtBoundCenter()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetCenterOfGravityAtBoundCenter()
    content.vb: Public Sub SetCenterOfGravityAtBoundCenter()
  overload: GTA.Entity.SetCenterOfGravityAtBoundCenter*
- uid: GTA.Entity.ApplyForce(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  commentId: M:GTA.Entity.ApplyForce(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  id: ApplyForce(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyForce(Vector3, Vector3, ForceType)
  nameWithType: Entity.ApplyForce(Vector3, Vector3, ForceType)
  fullName: GTA.Entity.ApplyForce(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyForce(Vector3 direction, Vector3 rotation = default, ForceType forceType = ForceType.ExternalImpulse)
    parameters:
    - id: direction
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    content.vb: Public Sub ApplyForce(direction As Vector3, rotation As Vector3 = Nothing, forceType As ForceType = ForceType.ExternalImpulse)
  overload: GTA.Entity.ApplyForce*
- uid: GTA.Entity.ApplyForceRelative(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  commentId: M:GTA.Entity.ApplyForceRelative(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  id: ApplyForceRelative(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyForceRelative(Vector3, Vector3, ForceType)
  nameWithType: Entity.ApplyForceRelative(Vector3, Vector3, ForceType)
  fullName: GTA.Entity.ApplyForceRelative(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyForceRelative(Vector3 direction, Vector3 rotation = default, ForceType forceType = ForceType.ExternalImpulse)
    parameters:
    - id: direction
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    content.vb: Public Sub ApplyForceRelative(direction As Vector3, rotation As Vector3 = Nothing, forceType As ForceType = ForceType.ExternalImpulse)
  overload: GTA.Entity.ApplyForceRelative*
- uid: GTA.Entity.ApplyWorldForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.ApplyWorldForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  id: ApplyWorldForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyWorldForceWorldOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  nameWithType: Entity.ApplyWorldForceWorldOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  fullName: GTA.Entity.ApplyWorldForceWorldOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyWorldForceWorldOffset(Vector3 force, Vector3 offset, ForceType forceType, bool scaleByMass, bool triggerAudio = false, bool scaleByTimeScale = true)
    parameters:
    - id: force
      type: GTA.Math.Vector3
    - id: offset
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    - id: scaleByMass
      type: System.Boolean
    - id: triggerAudio
      type: System.Boolean
    - id: scaleByTimeScale
      type: System.Boolean
    content.vb: Public Sub ApplyWorldForceWorldOffset(force As Vector3, offset As Vector3, forceType As ForceType, scaleByMass As Boolean, triggerAudio As Boolean = False, scaleByTimeScale As Boolean = True)
  overload: GTA.Entity.ApplyWorldForceWorldOffset*
  nameWithType.vb: Entity.ApplyWorldForceWorldOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
  fullName.vb: GTA.Entity.ApplyWorldForceWorldOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, Boolean, Boolean, Boolean)
  name.vb: ApplyWorldForceWorldOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
- uid: GTA.Entity.ApplyWorldForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.ApplyWorldForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  id: ApplyWorldForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyWorldForceRelativeOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  nameWithType: Entity.ApplyWorldForceRelativeOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  fullName: GTA.Entity.ApplyWorldForceRelativeOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyWorldForceRelativeOffset(Vector3 force, Vector3 offset, ForceType forceType, bool scaleByMass, bool triggerAudio = false, bool scaleByTimeScale = true)
    parameters:
    - id: force
      type: GTA.Math.Vector3
    - id: offset
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    - id: scaleByMass
      type: System.Boolean
    - id: triggerAudio
      type: System.Boolean
    - id: scaleByTimeScale
      type: System.Boolean
    content.vb: Public Sub ApplyWorldForceRelativeOffset(force As Vector3, offset As Vector3, forceType As ForceType, scaleByMass As Boolean, triggerAudio As Boolean = False, scaleByTimeScale As Boolean = True)
  overload: GTA.Entity.ApplyWorldForceRelativeOffset*
  nameWithType.vb: Entity.ApplyWorldForceRelativeOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
  fullName.vb: GTA.Entity.ApplyWorldForceRelativeOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, Boolean, Boolean, Boolean)
  name.vb: ApplyWorldForceRelativeOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
- uid: GTA.Entity.ApplyRelativeForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.ApplyRelativeForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  id: ApplyRelativeForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyRelativeForceWorldOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  nameWithType: Entity.ApplyRelativeForceWorldOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  fullName: GTA.Entity.ApplyRelativeForceWorldOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyRelativeForceWorldOffset(Vector3 force, Vector3 offset, ForceType forceType, bool scaleByMass, bool triggerAudio = false, bool scaleByTimeScale = true)
    parameters:
    - id: force
      type: GTA.Math.Vector3
    - id: offset
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    - id: scaleByMass
      type: System.Boolean
    - id: triggerAudio
      type: System.Boolean
    - id: scaleByTimeScale
      type: System.Boolean
    content.vb: Public Sub ApplyRelativeForceWorldOffset(force As Vector3, offset As Vector3, forceType As ForceType, scaleByMass As Boolean, triggerAudio As Boolean = False, scaleByTimeScale As Boolean = True)
  overload: GTA.Entity.ApplyRelativeForceWorldOffset*
  nameWithType.vb: Entity.ApplyRelativeForceWorldOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
  fullName.vb: GTA.Entity.ApplyRelativeForceWorldOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, Boolean, Boolean, Boolean)
  name.vb: ApplyRelativeForceWorldOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
- uid: GTA.Entity.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  id: ApplyRelativeForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyRelativeForceRelativeOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  nameWithType: Entity.ApplyRelativeForceRelativeOffset(Vector3, Vector3, ForceType, bool, bool, bool)
  fullName: GTA.Entity.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyRelativeForceRelativeOffset(Vector3 force, Vector3 offset, ForceType forceType, bool scaleByMass, bool triggerAudio = false, bool scaleByTimeScale = true)
    parameters:
    - id: force
      type: GTA.Math.Vector3
    - id: offset
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    - id: scaleByMass
      type: System.Boolean
    - id: triggerAudio
      type: System.Boolean
    - id: scaleByTimeScale
      type: System.Boolean
    content.vb: Public Sub ApplyRelativeForceRelativeOffset(force As Vector3, offset As Vector3, forceType As ForceType, scaleByMass As Boolean, triggerAudio As Boolean = False, scaleByTimeScale As Boolean = True)
  overload: GTA.Entity.ApplyRelativeForceRelativeOffset*
  nameWithType.vb: Entity.ApplyRelativeForceRelativeOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
  fullName.vb: GTA.Entity.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3, GTA.Math.Vector3, GTA.ForceType, Boolean, Boolean, Boolean)
  name.vb: ApplyRelativeForceRelativeOffset(Vector3, Vector3, ForceType, Boolean, Boolean, Boolean)
- uid: GTA.Entity.ApplyWorldForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.ApplyWorldForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  id: ApplyWorldForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyWorldForceCenterOfMass(Vector3, ForceType, bool, bool)
  nameWithType: Entity.ApplyWorldForceCenterOfMass(Vector3, ForceType, bool, bool)
  fullName: GTA.Entity.ApplyWorldForceCenterOfMass(GTA.Math.Vector3, GTA.ForceType, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyWorldForceCenterOfMass(Vector3 force, ForceType forceType, bool scaleByMass, bool applyToChildren = false)
    parameters:
    - id: force
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    - id: scaleByMass
      type: System.Boolean
    - id: applyToChildren
      type: System.Boolean
    content.vb: Public Sub ApplyWorldForceCenterOfMass(force As Vector3, forceType As ForceType, scaleByMass As Boolean, applyToChildren As Boolean = False)
  overload: GTA.Entity.ApplyWorldForceCenterOfMass*
  nameWithType.vb: Entity.ApplyWorldForceCenterOfMass(Vector3, ForceType, Boolean, Boolean)
  fullName.vb: GTA.Entity.ApplyWorldForceCenterOfMass(GTA.Math.Vector3, GTA.ForceType, Boolean, Boolean)
  name.vb: ApplyWorldForceCenterOfMass(Vector3, ForceType, Boolean, Boolean)
- uid: GTA.Entity.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  commentId: M:GTA.Entity.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  id: ApplyRelativeForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ApplyRelativeForceCenterOfMass(Vector3, ForceType, bool, bool)
  nameWithType: Entity.ApplyRelativeForceCenterOfMass(Vector3, ForceType, bool, bool)
  fullName: GTA.Entity.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3, GTA.ForceType, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ApplyRelativeForceCenterOfMass(Vector3 force, ForceType forceType, bool scaleByMass, bool applyToChildren = false)
    parameters:
    - id: force
      type: GTA.Math.Vector3
    - id: forceType
      type: GTA.ForceType
    - id: scaleByMass
      type: System.Boolean
    - id: applyToChildren
      type: System.Boolean
    content.vb: Public Sub ApplyRelativeForceCenterOfMass(force As Vector3, forceType As ForceType, scaleByMass As Boolean, applyToChildren As Boolean = False)
  overload: GTA.Entity.ApplyRelativeForceCenterOfMass*
  nameWithType.vb: Entity.ApplyRelativeForceCenterOfMass(Vector3, ForceType, Boolean, Boolean)
  fullName.vb: GTA.Entity.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3, GTA.ForceType, Boolean, Boolean)
  name.vb: ApplyRelativeForceCenterOfMass(Vector3, ForceType, Boolean, Boolean)
- uid: GTA.Entity.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.AnimationFlags)
  commentId: M:GTA.Entity.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.AnimationFlags)
  id: PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.AnimationFlags)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PlayAnimation(CrClipAsset, AnimationBlendDelta, bool, bool, bool, float, AnimationFlags)
  nameWithType: Entity.PlayAnimation(CrClipAsset, AnimationBlendDelta, bool, bool, bool, float, AnimationFlags)
  fullName: GTA.Entity.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, bool, bool, bool, float, GTA.AnimationFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool PlayAnimation(CrClipAsset crClipAsset, AnimationBlendDelta blendDelta, bool loop, bool holdLastFrame, bool driveToPose = false, float startPhase = 0, AnimationFlags animFlags = AnimationFlags.None)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: blendDelta
      type: GTA.AnimationBlendDelta
    - id: loop
      type: System.Boolean
    - id: holdLastFrame
      type: System.Boolean
    - id: driveToPose
      type: System.Boolean
    - id: startPhase
      type: System.Single
    - id: animFlags
      type: GTA.AnimationFlags
    return:
      type: System.Boolean
    content.vb: Public Function PlayAnimation(crClipAsset As CrClipAsset, blendDelta As AnimationBlendDelta, [loop] As Boolean, holdLastFrame As Boolean, driveToPose As Boolean = False, startPhase As Single = 0, animFlags As AnimationFlags = AnimationFlags.None) As Boolean
  overload: GTA.Entity.PlayAnimation*
  nameWithType.vb: Entity.PlayAnimation(CrClipAsset, AnimationBlendDelta, Boolean, Boolean, Boolean, Single, AnimationFlags)
  fullName.vb: GTA.Entity.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, Boolean, Boolean, Boolean, Single, GTA.AnimationFlags)
  name.vb: PlayAnimation(CrClipAsset, AnimationBlendDelta, Boolean, Boolean, Boolean, Single, AnimationFlags)
- uid: GTA.Entity.StopAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta)
  commentId: M:GTA.Entity.StopAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta)
  id: StopAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: StopAnimation(CrClipAsset, AnimationBlendDelta)
  nameWithType: Entity.StopAnimation(CrClipAsset, AnimationBlendDelta)
  fullName: GTA.Entity.StopAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool StopAnimation(CrClipAsset crClipAsset, AnimationBlendDelta blendDelta)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: blendDelta
      type: GTA.AnimationBlendDelta
    return:
      type: System.Boolean
    content.vb: Public Function StopAnimation(crClipAsset As CrClipAsset, blendDelta As AnimationBlendDelta) As Boolean
  overload: GTA.Entity.StopAnimation*
- uid: GTA.Entity.IsPlayingAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  commentId: M:GTA.Entity.IsPlayingAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  id: IsPlayingAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsPlayingAnimation(CrClipAsset, EntityAnimationType)
  nameWithType: Entity.IsPlayingAnimation(CrClipAsset, EntityAnimationType)
  fullName: GTA.Entity.IsPlayingAnimation(GTA.CrClipAsset, GTA.EntityAnimationType)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsPlayingAnimation(CrClipAsset crClipAsset, EntityAnimationType type = EntityAnimationType.Default)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: type
      type: GTA.EntityAnimationType
    return:
      type: System.Boolean
    content.vb: Public Function IsPlayingAnimation(crClipAsset As CrClipAsset, type As EntityAnimationType = EntityAnimationType.Default) As Boolean
  overload: GTA.Entity.IsPlayingAnimation*
- uid: GTA.Entity.HasFinishedAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  commentId: M:GTA.Entity.HasFinishedAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  id: HasFinishedAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasFinishedAnimation(CrClipAsset, EntityAnimationType)
  nameWithType: Entity.HasFinishedAnimation(CrClipAsset, EntityAnimationType)
  fullName: GTA.Entity.HasFinishedAnimation(GTA.CrClipAsset, GTA.EntityAnimationType)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasFinishedAnimation(CrClipAsset crClipAsset, EntityAnimationType type = EntityAnimationType.Default)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: type
      type: GTA.EntityAnimationType
    return:
      type: System.Boolean
    content.vb: Public Function HasFinishedAnimation(crClipAsset As CrClipAsset, type As EntityAnimationType = EntityAnimationType.Default) As Boolean
  overload: GTA.Entity.HasFinishedAnimation*
- uid: GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)
  commentId: M:GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)
  id: HasAnimationEventFired(GTA.AtHashValue)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasAnimationEventFired(AtHashValue)
  nameWithType: Entity.HasAnimationEventFired(AtHashValue)
  fullName: GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasAnimationEventFired(AtHashValue eventHash)
    parameters:
    - id: eventHash
      type: GTA.AtHashValue
    return:
      type: System.Boolean
    content.vb: Public Function HasAnimationEventFired(eventHash As AtHashValue) As Boolean
  overload: GTA.Entity.HasAnimationEventFired*
- uid: GTA.Entity.SetAnimationSpeed(GTA.CrClipAsset,System.Single)
  commentId: M:GTA.Entity.SetAnimationSpeed(GTA.CrClipAsset,System.Single)
  id: SetAnimationSpeed(GTA.CrClipAsset,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetAnimationSpeed(CrClipAsset, float)
  nameWithType: Entity.SetAnimationSpeed(CrClipAsset, float)
  fullName: GTA.Entity.SetAnimationSpeed(GTA.CrClipAsset, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetAnimationSpeed(CrClipAsset crClipAsset, float speedMultiplier)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: speedMultiplier
      type: System.Single
    content.vb: Public Sub SetAnimationSpeed(crClipAsset As CrClipAsset, speedMultiplier As Single)
  overload: GTA.Entity.SetAnimationSpeed*
  nameWithType.vb: Entity.SetAnimationSpeed(CrClipAsset, Single)
  fullName.vb: GTA.Entity.SetAnimationSpeed(GTA.CrClipAsset, Single)
  name.vb: SetAnimationSpeed(CrClipAsset, Single)
- uid: GTA.Entity.SetAnimationCurrentTime(GTA.CrClipAsset,System.Single)
  commentId: M:GTA.Entity.SetAnimationCurrentTime(GTA.CrClipAsset,System.Single)
  id: SetAnimationCurrentTime(GTA.CrClipAsset,System.Single)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SetAnimationCurrentTime(CrClipAsset, float)
  nameWithType: Entity.SetAnimationCurrentTime(CrClipAsset, float)
  fullName: GTA.Entity.SetAnimationCurrentTime(GTA.CrClipAsset, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SetAnimationCurrentTime(CrClipAsset crClipAsset, float newCurrentTime)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: newCurrentTime
      type: System.Single
    content.vb: Public Sub SetAnimationCurrentTime(crClipAsset As CrClipAsset, newCurrentTime As Single)
  overload: GTA.Entity.SetAnimationCurrentTime*
  nameWithType.vb: Entity.SetAnimationCurrentTime(CrClipAsset, Single)
  fullName.vb: GTA.Entity.SetAnimationCurrentTime(GTA.CrClipAsset, Single)
  name.vb: SetAnimationCurrentTime(CrClipAsset, Single)
- uid: GTA.Entity.GetAnimationCurrentTime(GTA.CrClipAsset)
  commentId: M:GTA.Entity.GetAnimationCurrentTime(GTA.CrClipAsset)
  id: GetAnimationCurrentTime(GTA.CrClipAsset)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: GetAnimationCurrentTime(CrClipAsset)
  nameWithType: Entity.GetAnimationCurrentTime(CrClipAsset)
  fullName: GTA.Entity.GetAnimationCurrentTime(GTA.CrClipAsset)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float GetAnimationCurrentTime(CrClipAsset crClipAsset)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    return:
      type: System.Single
    content.vb: Public Function GetAnimationCurrentTime(crClipAsset As CrClipAsset) As Single
  overload: GTA.Entity.GetAnimationCurrentTime*
- uid: GTA.Entity.GetAnimationTotalTime(GTA.CrClipAsset)
  commentId: M:GTA.Entity.GetAnimationTotalTime(GTA.CrClipAsset)
  id: GetAnimationTotalTime(GTA.CrClipAsset)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: GetAnimationTotalTime(CrClipAsset)
  nameWithType: Entity.GetAnimationTotalTime(CrClipAsset)
  fullName: GTA.Entity.GetAnimationTotalTime(GTA.CrClipAsset)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float GetAnimationTotalTime(CrClipAsset crClipAsset)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    return:
      type: System.Single
    content.vb: Public Function GetAnimationTotalTime(crClipAsset As CrClipAsset) As Single
  overload: GTA.Entity.GetAnimationTotalTime*
- uid: GTA.Entity.FindAnimationEventPhase(GTA.CrClipAsset,System.String,System.Single@,System.Single@)
  commentId: M:GTA.Entity.FindAnimationEventPhase(GTA.CrClipAsset,System.String,System.Single@,System.Single@)
  id: FindAnimationEventPhase(GTA.CrClipAsset,System.String,System.Single@,System.Single@)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: FindAnimationEventPhase(CrClipAsset, string, out float, out float)
  nameWithType: Entity.FindAnimationEventPhase(CrClipAsset, string, out float, out float)
  fullName: GTA.Entity.FindAnimationEventPhase(GTA.CrClipAsset, string, out float, out float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool FindAnimationEventPhase(CrClipAsset crClipAsset, string eventName, out float startPhase, out float endPhase)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: eventName
      type: System.String
    - id: startPhase
      type: System.Single
    - id: endPhase
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function FindAnimationEventPhase(crClipAsset As CrClipAsset, eventName As String, startPhase As Single, endPhase As Single) As Boolean
  overload: GTA.Entity.FindAnimationEventPhase*
  nameWithType.vb: Entity.FindAnimationEventPhase(CrClipAsset, String, Single, Single)
  fullName.vb: GTA.Entity.FindAnimationEventPhase(GTA.CrClipAsset, String, Single, Single)
  name.vb: FindAnimationEventPhase(CrClipAsset, String, Single, Single)
- uid: GTA.Entity.PlaySynchronizedAnim(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  commentId: M:GTA.Entity.PlaySynchronizedAnim(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  id: PlaySynchronizedAnim(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PlaySynchronizedAnim(FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta?, SyncedSceneFlags, AnimationBlendDelta?)
  nameWithType: Entity.PlaySynchronizedAnim(FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta?, SyncedSceneFlags, AnimationBlendDelta?)
  fullName: GTA.Entity.PlaySynchronizedAnim(GTA.FwSyncedScene, GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta?, GTA.SyncedSceneFlags, GTA.AnimationBlendDelta?)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool PlaySynchronizedAnim(FwSyncedScene scene, CrClipAsset anim, AnimationBlendDelta blendIn, AnimationBlendDelta? blendOut = null, SyncedSceneFlags flags = SyncedSceneFlags.None, AnimationBlendDelta? moverBlendIn = null)
    parameters:
    - id: scene
      type: GTA.FwSyncedScene
    - id: anim
      type: GTA.CrClipAsset
    - id: blendIn
      type: GTA.AnimationBlendDelta
    - id: blendOut
      type: System.Nullable{GTA.AnimationBlendDelta}
    - id: flags
      type: GTA.SyncedSceneFlags
    - id: moverBlendIn
      type: System.Nullable{GTA.AnimationBlendDelta}
    return:
      type: System.Boolean
    content.vb: Public Function PlaySynchronizedAnim(scene As FwSyncedScene, anim As CrClipAsset, blendIn As AnimationBlendDelta, blendOut As AnimationBlendDelta? = Nothing, flags As SyncedSceneFlags = SyncedSceneFlags.None, moverBlendIn As AnimationBlendDelta? = Nothing) As Boolean
  overload: GTA.Entity.PlaySynchronizedAnim*
- uid: GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta,System.Boolean)
  commentId: M:GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta,System.Boolean)
  id: StopSynchronizedAnim(GTA.AnimationBlendDelta,System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: StopSynchronizedAnim(AnimationBlendDelta, bool)
  nameWithType: Entity.StopSynchronizedAnim(AnimationBlendDelta, bool)
  fullName: GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool StopSynchronizedAnim(AnimationBlendDelta blendOut, bool activateCollision)
    parameters:
    - id: blendOut
      type: GTA.AnimationBlendDelta
    - id: activateCollision
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Function StopSynchronizedAnim(blendOut As AnimationBlendDelta, activateCollision As Boolean) As Boolean
  overload: GTA.Entity.StopSynchronizedAnim*
  nameWithType.vb: Entity.StopSynchronizedAnim(AnimationBlendDelta, Boolean)
  fullName.vb: GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta, Boolean)
  name.vb: StopSynchronizedAnim(AnimationBlendDelta, Boolean)
- uid: GTA.Entity.PlaySynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  commentId: M:GTA.Entity.PlaySynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  id: PlaySynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PlaySynchronizedMapEntityAnim(Vector3, float, Model, FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta?, SyncedSceneFlags, AnimationBlendDelta?)
  nameWithType: Entity.PlaySynchronizedMapEntityAnim(Vector3, float, Model, FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta?, SyncedSceneFlags, AnimationBlendDelta?)
  fullName: GTA.Entity.PlaySynchronizedMapEntityAnim(GTA.Math.Vector3, float, GTA.Model, GTA.FwSyncedScene, GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta?, GTA.SyncedSceneFlags, GTA.AnimationBlendDelta?)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool PlaySynchronizedMapEntityAnim(Vector3 newPos, float radius, Model propModel, FwSyncedScene scene, CrClipAsset anim, AnimationBlendDelta blendIn, AnimationBlendDelta? blendOut = null, SyncedSceneFlags flags = SyncedSceneFlags.None, AnimationBlendDelta? moverBlendIn = null)
    parameters:
    - id: newPos
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: propModel
      type: GTA.Model
    - id: scene
      type: GTA.FwSyncedScene
    - id: anim
      type: GTA.CrClipAsset
    - id: blendIn
      type: GTA.AnimationBlendDelta
    - id: blendOut
      type: System.Nullable{GTA.AnimationBlendDelta}
    - id: flags
      type: GTA.SyncedSceneFlags
    - id: moverBlendIn
      type: System.Nullable{GTA.AnimationBlendDelta}
    return:
      type: System.Boolean
    content.vb: Public Shared Function PlaySynchronizedMapEntityAnim(newPos As Vector3, radius As Single, propModel As Model, scene As FwSyncedScene, anim As CrClipAsset, blendIn As AnimationBlendDelta, blendOut As AnimationBlendDelta? = Nothing, flags As SyncedSceneFlags = SyncedSceneFlags.None, moverBlendIn As AnimationBlendDelta? = Nothing) As Boolean
  overload: GTA.Entity.PlaySynchronizedMapEntityAnim*
  nameWithType.vb: Entity.PlaySynchronizedMapEntityAnim(Vector3, Single, Model, FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta?, SyncedSceneFlags, AnimationBlendDelta?)
  fullName.vb: GTA.Entity.PlaySynchronizedMapEntityAnim(GTA.Math.Vector3, Single, GTA.Model, GTA.FwSyncedScene, GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta?, GTA.SyncedSceneFlags, GTA.AnimationBlendDelta?)
  name.vb: PlaySynchronizedMapEntityAnim(Vector3, Single, Model, FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta?, SyncedSceneFlags, AnimationBlendDelta?)
- uid: GTA.Entity.StopSynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.AnimationBlendDelta)
  commentId: M:GTA.Entity.StopSynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.AnimationBlendDelta)
  id: StopSynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.AnimationBlendDelta)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: StopSynchronizedMapEntityAnim(Vector3, float, Model, AnimationBlendDelta)
  nameWithType: Entity.StopSynchronizedMapEntityAnim(Vector3, float, Model, AnimationBlendDelta)
  fullName: GTA.Entity.StopSynchronizedMapEntityAnim(GTA.Math.Vector3, float, GTA.Model, GTA.AnimationBlendDelta)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool StopSynchronizedMapEntityAnim(Vector3 newPos, float radius, Model propModel, AnimationBlendDelta blendOut)
    parameters:
    - id: newPos
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: propModel
      type: GTA.Model
    - id: blendOut
      type: GTA.AnimationBlendDelta
    return:
      type: System.Boolean
    content.vb: Public Shared Function StopSynchronizedMapEntityAnim(newPos As Vector3, radius As Single, propModel As Model, blendOut As AnimationBlendDelta) As Boolean
  overload: GTA.Entity.StopSynchronizedMapEntityAnim*
  nameWithType.vb: Entity.StopSynchronizedMapEntityAnim(Vector3, Single, Model, AnimationBlendDelta)
  fullName.vb: GTA.Entity.StopSynchronizedMapEntityAnim(GTA.Math.Vector3, Single, GTA.Model, GTA.AnimationBlendDelta)
  name.vb: StopSynchronizedMapEntityAnim(Vector3, Single, Model, AnimationBlendDelta)
- uid: GTA.Entity.HasClearLineOfSightTo(GTA.Entity,GTA.IntersectFlags)
  commentId: M:GTA.Entity.HasClearLineOfSightTo(GTA.Entity,GTA.IntersectFlags)
  id: HasClearLineOfSightTo(GTA.Entity,GTA.IntersectFlags)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasClearLineOfSightTo(Entity, IntersectFlags)
  nameWithType: Entity.HasClearLineOfSightTo(Entity, IntersectFlags)
  fullName: GTA.Entity.HasClearLineOfSightTo(GTA.Entity, GTA.IntersectFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasClearLineOfSightTo(Entity target, IntersectFlags losFlags = IntersectFlags.LosToEntity)
    parameters:
    - id: target
      type: GTA.Entity
    - id: losFlags
      type: GTA.IntersectFlags
    return:
      type: System.Boolean
    content.vb: Public Function HasClearLineOfSightTo(target As Entity, losFlags As IntersectFlags = IntersectFlags.LosToEntity) As Boolean
  overload: GTA.Entity.HasClearLineOfSightTo*
- uid: GTA.Entity.HasClearLineOfSightToAdjustForCover(GTA.Entity,GTA.IntersectFlags)
  commentId: M:GTA.Entity.HasClearLineOfSightToAdjustForCover(GTA.Entity,GTA.IntersectFlags)
  id: HasClearLineOfSightToAdjustForCover(GTA.Entity,GTA.IntersectFlags)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasClearLineOfSightToAdjustForCover(Entity, IntersectFlags)
  nameWithType: Entity.HasClearLineOfSightToAdjustForCover(Entity, IntersectFlags)
  fullName: GTA.Entity.HasClearLineOfSightToAdjustForCover(GTA.Entity, GTA.IntersectFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasClearLineOfSightToAdjustForCover(Entity target, IntersectFlags losFlags = IntersectFlags.LosToEntity)
    parameters:
    - id: target
      type: GTA.Entity
    - id: losFlags
      type: GTA.IntersectFlags
    return:
      type: System.Boolean
    content.vb: Public Function HasClearLineOfSightToAdjustForCover(target As Entity, losFlags As IntersectFlags = IntersectFlags.LosToEntity) As Boolean
  overload: GTA.Entity.HasClearLineOfSightToAdjustForCover*
- uid: GTA.Entity.HasClearLineOfSightToInFront(GTA.Entity)
  commentId: M:GTA.Entity.HasClearLineOfSightToInFront(GTA.Entity)
  id: HasClearLineOfSightToInFront(GTA.Entity)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasClearLineOfSightToInFront(Entity)
  nameWithType: Entity.HasClearLineOfSightToInFront(Entity)
  fullName: GTA.Entity.HasClearLineOfSightToInFront(GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasClearLineOfSightToInFront(Entity target)
    parameters:
    - id: target
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Function HasClearLineOfSightToInFront(target As Entity) As Boolean
  overload: GTA.Entity.HasClearLineOfSightToInFront*
- uid: GTA.Entity.MarkAsMissionEntity(System.Boolean)
  commentId: M:GTA.Entity.MarkAsMissionEntity(System.Boolean)
  id: MarkAsMissionEntity(System.Boolean)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MarkAsMissionEntity(bool)
  nameWithType: Entity.MarkAsMissionEntity(bool)
  fullName: GTA.Entity.MarkAsMissionEntity(bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void MarkAsMissionEntity(bool grabFromOtherScript = false)
    parameters:
    - id: grabFromOtherScript
      type: System.Boolean
    content.vb: Public Sub MarkAsMissionEntity(grabFromOtherScript As Boolean = False)
  overload: GTA.Entity.MarkAsMissionEntity*
  nameWithType.vb: Entity.MarkAsMissionEntity(Boolean)
  fullName.vb: GTA.Entity.MarkAsMissionEntity(Boolean)
  name.vb: MarkAsMissionEntity(Boolean)
- uid: GTA.Entity.MarkAsNoLongerNeeded
  commentId: M:GTA.Entity.MarkAsNoLongerNeeded
  id: MarkAsNoLongerNeeded
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MarkAsNoLongerNeeded()
  nameWithType: Entity.MarkAsNoLongerNeeded()
  fullName: GTA.Entity.MarkAsNoLongerNeeded()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void MarkAsNoLongerNeeded()
    content.vb: Public Sub MarkAsNoLongerNeeded()
  overload: GTA.Entity.MarkAsNoLongerNeeded*
- uid: GTA.Entity.Delete
  commentId: M:GTA.Entity.Delete
  id: Delete
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: Entity.Delete()
  fullName: GTA.Entity.Delete()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public override void Delete()
    content.vb: Public Overrides Sub Delete()
  overridden: GTA.PoolObject.Delete
  overload: GTA.Entity.Delete*
- uid: GTA.Entity.Exists
  commentId: M:GTA.Entity.Exists
  id: Exists
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Exists()
  nameWithType: Entity.Exists()
  fullName: GTA.Entity.Exists()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public override bool Exists()
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Exists() As Boolean
  overridden: GTA.PoolObject.Exists
  overload: GTA.Entity.Exists*
- uid: GTA.Entity.Equals(System.Object)
  commentId: M:GTA.Entity.Equals(System.Object)
  id: Equals(System.Object)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Entity.Equals(object)
  fullName: GTA.Entity.Equals(object)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: GTA.Entity.Equals*
  nameWithType.vb: Entity.Equals(Object)
  fullName.vb: GTA.Entity.Equals(Object)
  name.vb: Equals(Object)
- uid: GTA.Entity.op_Equality(GTA.Entity,GTA.Entity)
  commentId: M:GTA.Entity.op_Equality(GTA.Entity,GTA.Entity)
  id: op_Equality(GTA.Entity,GTA.Entity)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: operator ==(Entity, Entity)
  nameWithType: Entity.operator ==(Entity, Entity)
  fullName: GTA.Entity.operator ==(GTA.Entity, GTA.Entity)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool operator ==(Entity left, Entity right)
    parameters:
    - id: left
      type: GTA.Entity
    - id: right
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As Entity, right As Entity) As Boolean
  overload: GTA.Entity.op_Equality*
  nameWithType.vb: Entity.=(Entity, Entity)
  fullName.vb: GTA.Entity.=(GTA.Entity, GTA.Entity)
  name.vb: =(Entity, Entity)
- uid: GTA.Entity.op_Inequality(GTA.Entity,GTA.Entity)
  commentId: M:GTA.Entity.op_Inequality(GTA.Entity,GTA.Entity)
  id: op_Inequality(GTA.Entity,GTA.Entity)
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: operator !=(Entity, Entity)
  nameWithType: Entity.operator !=(Entity, Entity)
  fullName: GTA.Entity.operator !=(GTA.Entity, GTA.Entity)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool operator !=(Entity left, Entity right)
    parameters:
    - id: left
      type: GTA.Entity
    - id: right
      type: GTA.Entity
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As Entity, right As Entity) As Boolean
  overload: GTA.Entity.op_Inequality*
  nameWithType.vb: Entity.<>(Entity, Entity)
  fullName.vb: GTA.Entity.<>(GTA.Entity, GTA.Entity)
  name.vb: <>(Entity, Entity)
- uid: GTA.Entity.op_Implicit(GTA.Entity)~GTA.Native.InputArgument
  commentId: M:GTA.Entity.op_Implicit(GTA.Entity)~GTA.Native.InputArgument
  id: op_Implicit(GTA.Entity)~GTA.Native.InputArgument
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: implicit operator InputArgument(Entity)
  nameWithType: Entity.implicit operator InputArgument(Entity)
  fullName: GTA.Entity.implicit operator GTA.Native.InputArgument(GTA.Entity)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static implicit operator InputArgument(Entity value)
    parameters:
    - id: value
      type: GTA.Entity
    return:
      type: GTA.Native.InputArgument
    content.vb: Public Shared Widening Operator CType(value As Entity) As InputArgument
  overload: GTA.Entity.op_Implicit*
  nameWithType.vb: Entity.CType(Entity)
  fullName.vb: GTA.Entity.CType(GTA.Entity)
  name.vb: CType(Entity)
- uid: GTA.Entity.GetHashCode
  commentId: M:GTA.Entity.GetHashCode
  id: GetHashCode
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Entity.GetHashCode()
  fullName: GTA.Entity.GetHashCode()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: GTA.Entity.GetHashCode*
- uid: GTA.Entity.MemoryAddress
  commentId: P:GTA.Entity.MemoryAddress
  id: MemoryAddress
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MemoryAddress
  nameWithType: Entity.MemoryAddress
  fullName: GTA.Entity.MemoryAddress
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public IntPtr MemoryAddress { get; }
    parameters: []
    return:
      type: System.IntPtr
    content.vb: Public ReadOnly Property MemoryAddress As IntPtr
  overload: GTA.Entity.MemoryAddress*
- uid: GTA.Entity.EntityType
  commentId: P:GTA.Entity.EntityType
  id: EntityType
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: EntityType
  nameWithType: Entity.EntityType
  fullName: GTA.Entity.EntityType
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public EntityType EntityType { get; }
    parameters: []
    return:
      type: GTA.EntityType
    content.vb: Public ReadOnly Property EntityType As EntityType
  overload: GTA.Entity.EntityType*
- uid: GTA.Entity.PopulationType
  commentId: P:GTA.Entity.PopulationType
  id: PopulationType
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PopulationType
  nameWithType: Entity.PopulationType
  fullName: GTA.Entity.PopulationType
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public EntityPopulationType PopulationType { get; set; }
    parameters: []
    return:
      type: GTA.EntityPopulationType
    content.vb: Public Property PopulationType As EntityPopulationType
  overload: GTA.Entity.PopulationType*
- uid: GTA.Entity.IsDead
  commentId: P:GTA.Entity.IsDead
  id: IsDead
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsDead
  nameWithType: Entity.IsDead
  fullName: GTA.Entity.IsDead
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsDead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDead As Boolean
  overload: GTA.Entity.IsDead*
- uid: GTA.Entity.IsAlive
  commentId: P:GTA.Entity.IsAlive
  id: IsAlive
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsAlive
  nameWithType: Entity.IsAlive
  fullName: GTA.Entity.IsAlive
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsAlive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAlive As Boolean
  overload: GTA.Entity.IsAlive*
- uid: GTA.Entity.HasDrawable
  commentId: P:GTA.Entity.HasDrawable
  id: HasDrawable
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasDrawable
  nameWithType: Entity.HasDrawable
  fullName: GTA.Entity.HasDrawable
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasDrawable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasDrawable As Boolean
  overload: GTA.Entity.HasDrawable*
- uid: GTA.Entity.HasSkeleton
  commentId: P:GTA.Entity.HasSkeleton
  id: HasSkeleton
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasSkeleton
  nameWithType: Entity.HasSkeleton
  fullName: GTA.Entity.HasSkeleton
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasSkeleton { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasSkeleton As Boolean
  overload: GTA.Entity.HasSkeleton*
- uid: GTA.Entity.HasAnimationDirector
  commentId: P:GTA.Entity.HasAnimationDirector
  id: HasAnimationDirector
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasAnimationDirector
  nameWithType: Entity.HasAnimationDirector
  fullName: GTA.Entity.HasAnimationDirector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasAnimationDirector { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasAnimationDirector As Boolean
  overload: GTA.Entity.HasAnimationDirector*
- uid: GTA.Entity.IsOwnedByShvdnScript
  commentId: P:GTA.Entity.IsOwnedByShvdnScript
  id: IsOwnedByShvdnScript
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsOwnedByShvdnScript
  nameWithType: Entity.IsOwnedByShvdnScript
  fullName: GTA.Entity.IsOwnedByShvdnScript
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsOwnedByShvdnScript { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOwnedByShvdnScript As Boolean
  overload: GTA.Entity.IsOwnedByShvdnScript*
- uid: GTA.Entity.IsOwnedByAnyScript
  commentId: P:GTA.Entity.IsOwnedByAnyScript
  id: IsOwnedByAnyScript
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsOwnedByAnyScript
  nameWithType: Entity.IsOwnedByAnyScript
  fullName: GTA.Entity.IsOwnedByAnyScript
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsOwnedByAnyScript { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOwnedByAnyScript As Boolean
  overload: GTA.Entity.IsOwnedByAnyScript*
- uid: GTA.Entity.OwnerScriptName
  commentId: P:GTA.Entity.OwnerScriptName
  id: OwnerScriptName
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: OwnerScriptName
  nameWithType: Entity.OwnerScriptName
  fullName: GTA.Entity.OwnerScriptName
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public string OwnerScriptName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property OwnerScriptName As String
  overload: GTA.Entity.OwnerScriptName*
- uid: GTA.Entity.Model
  commentId: P:GTA.Entity.Model
  id: Model
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: Entity.Model
  fullName: GTA.Entity.Model
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Model Model { get; }
    parameters: []
    return:
      type: GTA.Model
    content.vb: Public ReadOnly Property Model As Model
  overload: GTA.Entity.Model*
- uid: GTA.Entity.Opacity
  commentId: P:GTA.Entity.Opacity
  id: Opacity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Opacity
  nameWithType: Entity.Opacity
  fullName: GTA.Entity.Opacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int Opacity { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Opacity As Integer
  overload: GTA.Entity.Opacity*
- uid: GTA.Entity.LodDistance
  commentId: P:GTA.Entity.LodDistance
  id: LodDistance
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: LodDistance
  nameWithType: Entity.LodDistance
  fullName: GTA.Entity.LodDistance
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int LodDistance { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LodDistance As Integer
  overload: GTA.Entity.LodDistance*
- uid: GTA.Entity.IsPersistent
  commentId: P:GTA.Entity.IsPersistent
  id: IsPersistent
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsPersistent
  nameWithType: Entity.IsPersistent
  fullName: GTA.Entity.IsPersistent
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsPersistent { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsPersistent As Boolean
  overload: GTA.Entity.IsPersistent*
- uid: GTA.Entity.IsPositionFrozen
  commentId: P:GTA.Entity.IsPositionFrozen
  id: IsPositionFrozen
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsPositionFrozen
  nameWithType: Entity.IsPositionFrozen
  fullName: GTA.Entity.IsPositionFrozen
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsPositionFrozen { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsPositionFrozen As Boolean
  overload: GTA.Entity.IsPositionFrozen*
- uid: GTA.Entity.Bones
  commentId: P:GTA.Entity.Bones
  id: Bones
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Bones
  nameWithType: Entity.Bones
  fullName: GTA.Entity.Bones
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public virtual EntityBoneCollection Bones { get; }
    parameters: []
    return:
      type: GTA.EntityBoneCollection
    content.vb: Public Overridable ReadOnly Property Bones As EntityBoneCollection
  overload: GTA.Entity.Bones*
- uid: GTA.Entity.Health
  commentId: P:GTA.Entity.Health
  id: Health
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Health
  nameWithType: Entity.Health
  fullName: GTA.Entity.Health
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int Health { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Health As Integer
  overload: GTA.Entity.Health*
- uid: GTA.Entity.MaxHealth
  commentId: P:GTA.Entity.MaxHealth
  id: MaxHealth
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MaxHealth
  nameWithType: Entity.MaxHealth
  fullName: GTA.Entity.MaxHealth
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public virtual int MaxHealth { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable Property MaxHealth As Integer
  overload: GTA.Entity.MaxHealth*
- uid: GTA.Entity.HealthFloat
  commentId: P:GTA.Entity.HealthFloat
  id: HealthFloat
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HealthFloat
  nameWithType: Entity.HealthFloat
  fullName: GTA.Entity.HealthFloat
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float HealthFloat { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property HealthFloat As Single
  overload: GTA.Entity.HealthFloat*
- uid: GTA.Entity.MaxHealthFloat
  commentId: P:GTA.Entity.MaxHealthFloat
  id: MaxHealthFloat
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MaxHealthFloat
  nameWithType: Entity.MaxHealthFloat
  fullName: GTA.Entity.MaxHealthFloat
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float MaxHealthFloat { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property MaxHealthFloat As Single
  overload: GTA.Entity.MaxHealthFloat*
- uid: GTA.Entity.Matrix
  commentId: P:GTA.Entity.Matrix
  id: Matrix
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Matrix
  nameWithType: Entity.Matrix
  fullName: GTA.Entity.Matrix
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Matrix Matrix { get; }
    parameters: []
    return:
      type: GTA.Math.Matrix
    content.vb: Public ReadOnly Property Matrix As Matrix
  overload: GTA.Entity.Matrix*
- uid: GTA.Entity.Position
  commentId: P:GTA.Entity.Position
  id: Position
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Entity.Position
  fullName: GTA.Entity.Position
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public virtual Vector3 Position { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Overridable Property Position As Vector3
  overload: GTA.Entity.Position*
  implements:
  - GTA.ISpatial.Position
- uid: GTA.Entity.PositionNoOffset
  commentId: P:GTA.Entity.PositionNoOffset
  id: PositionNoOffset
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PositionNoOffset
  nameWithType: Entity.PositionNoOffset
  fullName: GTA.Entity.PositionNoOffset
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 PositionNoOffset { set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public WriteOnly Property PositionNoOffset As Vector3
  overload: GTA.Entity.PositionNoOffset*
- uid: GTA.Entity.Rotation
  commentId: P:GTA.Entity.Rotation
  id: Rotation
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Rotation
  nameWithType: Entity.Rotation
  fullName: GTA.Entity.Rotation
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public virtual Vector3 Rotation { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Overridable Property Rotation As Vector3
  overload: GTA.Entity.Rotation*
  implements:
  - GTA.ISpatial.Rotation
- uid: GTA.Entity.Heading
  commentId: P:GTA.Entity.Heading
  id: Heading
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Heading
  nameWithType: Entity.Heading
  fullName: GTA.Entity.Heading
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float Heading { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Heading As Single
  overload: GTA.Entity.Heading*
- uid: GTA.Entity.SubmersionLevel
  commentId: P:GTA.Entity.SubmersionLevel
  id: SubmersionLevel
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SubmersionLevel
  nameWithType: Entity.SubmersionLevel
  fullName: GTA.Entity.SubmersionLevel
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float SubmersionLevel { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property SubmersionLevel As Single
  overload: GTA.Entity.SubmersionLevel*
- uid: GTA.Entity.HeightAboveGround
  commentId: P:GTA.Entity.HeightAboveGround
  id: HeightAboveGround
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HeightAboveGround
  nameWithType: Entity.HeightAboveGround
  fullName: GTA.Entity.HeightAboveGround
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float HeightAboveGround { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property HeightAboveGround As Single
  overload: GTA.Entity.HeightAboveGround*
- uid: GTA.Entity.Quaternion
  commentId: P:GTA.Entity.Quaternion
  id: Quaternion
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Quaternion
  nameWithType: Entity.Quaternion
  fullName: GTA.Entity.Quaternion
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Quaternion Quaternion { get; set; }
    parameters: []
    return:
      type: GTA.Math.Quaternion
    content.vb: Public Property Quaternion As Quaternion
  overload: GTA.Entity.Quaternion*
- uid: GTA.Entity.UpVector
  commentId: P:GTA.Entity.UpVector
  id: UpVector
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: UpVector
  nameWithType: Entity.UpVector
  fullName: GTA.Entity.UpVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 UpVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property UpVector As Vector3
  overload: GTA.Entity.UpVector*
- uid: GTA.Entity.RightVector
  commentId: P:GTA.Entity.RightVector
  id: RightVector
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: RightVector
  nameWithType: Entity.RightVector
  fullName: GTA.Entity.RightVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RightVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RightVector As Vector3
  overload: GTA.Entity.RightVector*
- uid: GTA.Entity.ForwardVector
  commentId: P:GTA.Entity.ForwardVector
  id: ForwardVector
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ForwardVector
  nameWithType: Entity.ForwardVector
  fullName: GTA.Entity.ForwardVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 ForwardVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property ForwardVector As Vector3
  overload: GTA.Entity.ForwardVector*
- uid: GTA.Entity.LeftPosition
  commentId: P:GTA.Entity.LeftPosition
  id: LeftPosition
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: LeftPosition
  nameWithType: Entity.LeftPosition
  fullName: GTA.Entity.LeftPosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 LeftPosition { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property LeftPosition As Vector3
  overload: GTA.Entity.LeftPosition*
- uid: GTA.Entity.RightPosition
  commentId: P:GTA.Entity.RightPosition
  id: RightPosition
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: RightPosition
  nameWithType: Entity.RightPosition
  fullName: GTA.Entity.RightPosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RightPosition { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RightPosition As Vector3
  overload: GTA.Entity.RightPosition*
- uid: GTA.Entity.RearPosition
  commentId: P:GTA.Entity.RearPosition
  id: RearPosition
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: RearPosition
  nameWithType: Entity.RearPosition
  fullName: GTA.Entity.RearPosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RearPosition { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RearPosition As Vector3
  overload: GTA.Entity.RearPosition*
- uid: GTA.Entity.FrontPosition
  commentId: P:GTA.Entity.FrontPosition
  id: FrontPosition
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: FrontPosition
  nameWithType: Entity.FrontPosition
  fullName: GTA.Entity.FrontPosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 FrontPosition { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property FrontPosition As Vector3
  overload: GTA.Entity.FrontPosition*
- uid: GTA.Entity.AbovePosition
  commentId: P:GTA.Entity.AbovePosition
  id: AbovePosition
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AbovePosition
  nameWithType: Entity.AbovePosition
  fullName: GTA.Entity.AbovePosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 AbovePosition { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property AbovePosition As Vector3
  overload: GTA.Entity.AbovePosition*
- uid: GTA.Entity.BelowPosition
  commentId: P:GTA.Entity.BelowPosition
  id: BelowPosition
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: BelowPosition
  nameWithType: Entity.BelowPosition
  fullName: GTA.Entity.BelowPosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 BelowPosition { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property BelowPosition As Vector3
  overload: GTA.Entity.BelowPosition*
- uid: GTA.Entity.Speed
  commentId: P:GTA.Entity.Speed
  id: Speed
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Speed
  nameWithType: Entity.Speed
  fullName: GTA.Entity.Speed
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float Speed { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Speed As Single
  overload: GTA.Entity.Speed*
- uid: GTA.Entity.MaxSpeed
  commentId: P:GTA.Entity.MaxSpeed
  id: MaxSpeed
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MaxSpeed
  nameWithType: Entity.MaxSpeed
  fullName: GTA.Entity.MaxSpeed
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float MaxSpeed { set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public WriteOnly Property MaxSpeed As Single
  overload: GTA.Entity.MaxSpeed*
- uid: GTA.Entity.Velocity
  commentId: P:GTA.Entity.Velocity
  id: Velocity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: Velocity
  nameWithType: Entity.Velocity
  fullName: GTA.Entity.Velocity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 Velocity { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property Velocity As Vector3
  overload: GTA.Entity.Velocity*
- uid: GTA.Entity.RotationVelocity
  commentId: P:GTA.Entity.RotationVelocity
  id: RotationVelocity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: RotationVelocity
  nameWithType: Entity.RotationVelocity
  fullName: GTA.Entity.RotationVelocity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Entity.RotationVelocity is obsolete because GET_ENTITY_ROTATION_VELOCITY returns the world angular velocity with local to world conversion applied. Use Entity.LocalRotationVelocity instead.")]

      public Vector3 RotationVelocity { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: >-
      <Obsolete("Entity.RotationVelocity is obsolete because GET_ENTITY_ROTATION_VELOCITY returns the world angular velocity with local to world conversion applied. Use Entity.LocalRotationVelocity instead.")>

      Public Property RotationVelocity As Vector3
  overload: GTA.Entity.RotationVelocity*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Entity.RotationVelocity is obsolete because GET_ENTITY_ROTATION_VELOCITY returns the world angular velocity with local to world conversion applied. Use Entity.LocalRotationVelocity instead.
- uid: GTA.Entity.WorldRotationVelocity
  commentId: P:GTA.Entity.WorldRotationVelocity
  id: WorldRotationVelocity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: WorldRotationVelocity
  nameWithType: Entity.WorldRotationVelocity
  fullName: GTA.Entity.WorldRotationVelocity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 WorldRotationVelocity { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property WorldRotationVelocity As Vector3
  overload: GTA.Entity.WorldRotationVelocity*
- uid: GTA.Entity.LocalRotationVelocity
  commentId: P:GTA.Entity.LocalRotationVelocity
  id: LocalRotationVelocity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: LocalRotationVelocity
  nameWithType: Entity.LocalRotationVelocity
  fullName: GTA.Entity.LocalRotationVelocity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 LocalRotationVelocity { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property LocalRotationVelocity As Vector3
  overload: GTA.Entity.LocalRotationVelocity*
- uid: GTA.Entity.DamageRecords
  commentId: P:GTA.Entity.DamageRecords
  id: DamageRecords
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: DamageRecords
  nameWithType: Entity.DamageRecords
  fullName: GTA.Entity.DamageRecords
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public EntityDamageRecordCollection DamageRecords { get; }
    parameters: []
    return:
      type: GTA.EntityDamageRecordCollection
    content.vb: Public ReadOnly Property DamageRecords As EntityDamageRecordCollection
  overload: GTA.Entity.DamageRecords*
- uid: GTA.Entity.FragmentGroupCount
  commentId: P:GTA.Entity.FragmentGroupCount
  id: FragmentGroupCount
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: FragmentGroupCount
  nameWithType: Entity.FragmentGroupCount
  fullName: GTA.Entity.FragmentGroupCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int FragmentGroupCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FragmentGroupCount As Integer
  overload: GTA.Entity.FragmentGroupCount*
- uid: GTA.Entity.IsFragmentObject
  commentId: P:GTA.Entity.IsFragmentObject
  id: IsFragmentObject
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsFragmentObject
  nameWithType: Entity.IsFragmentObject
  fullName: GTA.Entity.IsFragmentObject
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsFragmentObject { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFragmentObject As Boolean
  overload: GTA.Entity.IsFragmentObject*
- uid: GTA.Entity.IsInWater
  commentId: P:GTA.Entity.IsInWater
  id: IsInWater
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInWater
  nameWithType: Entity.IsInWater
  fullName: GTA.Entity.IsInWater
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInWater { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInWater As Boolean
  overload: GTA.Entity.IsInWater*
- uid: GTA.Entity.IsInWaterStrict
  commentId: P:GTA.Entity.IsInWaterStrict
  id: IsInWaterStrict
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInWaterStrict
  nameWithType: Entity.IsInWaterStrict
  fullName: GTA.Entity.IsInWaterStrict
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInWaterStrict { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInWaterStrict As Boolean
  overload: GTA.Entity.IsInWaterStrict*
- uid: GTA.Entity.WasInWater
  commentId: P:GTA.Entity.WasInWater
  id: WasInWater
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: WasInWater
  nameWithType: Entity.WasInWater
  fullName: GTA.Entity.WasInWater
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool WasInWater { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property WasInWater As Boolean
  overload: GTA.Entity.WasInWater*
- uid: GTA.Entity.DontLoadCollision
  commentId: P:GTA.Entity.DontLoadCollision
  id: DontLoadCollision
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: DontLoadCollision
  nameWithType: Entity.DontLoadCollision
  fullName: GTA.Entity.DontLoadCollision
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool DontLoadCollision { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property DontLoadCollision As Boolean
  overload: GTA.Entity.DontLoadCollision*
- uid: GTA.Entity.AllowsFreezeWaitingOnCollision
  commentId: P:GTA.Entity.AllowsFreezeWaitingOnCollision
  id: AllowsFreezeWaitingOnCollision
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AllowsFreezeWaitingOnCollision
  nameWithType: Entity.AllowsFreezeWaitingOnCollision
  fullName: GTA.Entity.AllowsFreezeWaitingOnCollision
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool AllowsFreezeWaitingOnCollision { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowsFreezeWaitingOnCollision As Boolean
  overload: GTA.Entity.AllowsFreezeWaitingOnCollision*
- uid: GTA.Entity.IsFireProof
  commentId: P:GTA.Entity.IsFireProof
  id: IsFireProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsFireProof
  nameWithType: Entity.IsFireProof
  fullName: GTA.Entity.IsFireProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsFireProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsFireProof As Boolean
  overload: GTA.Entity.IsFireProof*
- uid: GTA.Entity.IsMeleeProof
  commentId: P:GTA.Entity.IsMeleeProof
  id: IsMeleeProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsMeleeProof
  nameWithType: Entity.IsMeleeProof
  fullName: GTA.Entity.IsMeleeProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsMeleeProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsMeleeProof As Boolean
  overload: GTA.Entity.IsMeleeProof*
- uid: GTA.Entity.IsBulletProof
  commentId: P:GTA.Entity.IsBulletProof
  id: IsBulletProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsBulletProof
  nameWithType: Entity.IsBulletProof
  fullName: GTA.Entity.IsBulletProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsBulletProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsBulletProof As Boolean
  overload: GTA.Entity.IsBulletProof*
- uid: GTA.Entity.IsExplosionProof
  commentId: P:GTA.Entity.IsExplosionProof
  id: IsExplosionProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsExplosionProof
  nameWithType: Entity.IsExplosionProof
  fullName: GTA.Entity.IsExplosionProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsExplosionProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsExplosionProof As Boolean
  overload: GTA.Entity.IsExplosionProof*
- uid: GTA.Entity.IsCollisionProof
  commentId: P:GTA.Entity.IsCollisionProof
  id: IsCollisionProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsCollisionProof
  nameWithType: Entity.IsCollisionProof
  fullName: GTA.Entity.IsCollisionProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsCollisionProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsCollisionProof As Boolean
  overload: GTA.Entity.IsCollisionProof*
- uid: GTA.Entity.IsSteamProof
  commentId: P:GTA.Entity.IsSteamProof
  id: IsSteamProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsSteamProof
  nameWithType: Entity.IsSteamProof
  fullName: GTA.Entity.IsSteamProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsSteamProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsSteamProof As Boolean
  overload: GTA.Entity.IsSteamProof*
- uid: GTA.Entity.IsSmokeProof
  commentId: P:GTA.Entity.IsSmokeProof
  id: IsSmokeProof
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsSmokeProof
  nameWithType: Entity.IsSmokeProof
  fullName: GTA.Entity.IsSmokeProof
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsSmokeProof { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsSmokeProof As Boolean
  overload: GTA.Entity.IsSmokeProof*
- uid: GTA.Entity.IsInvincible
  commentId: P:GTA.Entity.IsInvincible
  id: IsInvincible
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInvincible
  nameWithType: Entity.IsInvincible
  fullName: GTA.Entity.IsInvincible
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInvincible { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsInvincible As Boolean
  overload: GTA.Entity.IsInvincible*
- uid: GTA.Entity.BlocksAnyDamageButHasReactions
  commentId: P:GTA.Entity.BlocksAnyDamageButHasReactions
  id: BlocksAnyDamageButHasReactions
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: BlocksAnyDamageButHasReactions
  nameWithType: Entity.BlocksAnyDamageButHasReactions
  fullName: GTA.Entity.BlocksAnyDamageButHasReactions
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool BlocksAnyDamageButHasReactions { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property BlocksAnyDamageButHasReactions As Boolean
  overload: GTA.Entity.BlocksAnyDamageButHasReactions*
- uid: GTA.Entity.IsOnlyDamagedByPlayer
  commentId: P:GTA.Entity.IsOnlyDamagedByPlayer
  id: IsOnlyDamagedByPlayer
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsOnlyDamagedByPlayer
  nameWithType: Entity.IsOnlyDamagedByPlayer
  fullName: GTA.Entity.IsOnlyDamagedByPlayer
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsOnlyDamagedByPlayer { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsOnlyDamagedByPlayer As Boolean
  overload: GTA.Entity.IsOnlyDamagedByPlayer*
- uid: GTA.Entity.CanOnlyBeDamagedByRelGroup
  commentId: P:GTA.Entity.CanOnlyBeDamagedByRelGroup
  id: CanOnlyBeDamagedByRelGroup
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: CanOnlyBeDamagedByRelGroup
  nameWithType: Entity.CanOnlyBeDamagedByRelGroup
  fullName: GTA.Entity.CanOnlyBeDamagedByRelGroup
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool CanOnlyBeDamagedByRelGroup { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanOnlyBeDamagedByRelGroup As Boolean
  overload: GTA.Entity.CanOnlyBeDamagedByRelGroup*
- uid: GTA.Entity.BlocksDamageByRelGroup
  commentId: P:GTA.Entity.BlocksDamageByRelGroup
  id: BlocksDamageByRelGroup
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: BlocksDamageByRelGroup
  nameWithType: Entity.BlocksDamageByRelGroup
  fullName: GTA.Entity.BlocksDamageByRelGroup
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool BlocksDamageByRelGroup { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property BlocksDamageByRelGroup As Boolean
  overload: GTA.Entity.BlocksDamageByRelGroup*
- uid: GTA.Entity.ShouldRenderScorched
  commentId: P:GTA.Entity.ShouldRenderScorched
  id: ShouldRenderScorched
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: ShouldRenderScorched
  nameWithType: Entity.ShouldRenderScorched
  fullName: GTA.Entity.ShouldRenderScorched
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool ShouldRenderScorched { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ShouldRenderScorched As Boolean
  overload: GTA.Entity.ShouldRenderScorched*
- uid: GTA.Entity.CanBeAutoVaulted
  commentId: P:GTA.Entity.CanBeAutoVaulted
  id: CanBeAutoVaulted
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: CanBeAutoVaulted
  nameWithType: Entity.CanBeAutoVaulted
  fullName: GTA.Entity.CanBeAutoVaulted
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool CanBeAutoVaulted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanBeAutoVaulted As Boolean
  overload: GTA.Entity.CanBeAutoVaulted*
- uid: GTA.Entity.CanBeClimbed
  commentId: P:GTA.Entity.CanBeClimbed
  id: CanBeClimbed
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: CanBeClimbed
  nameWithType: Entity.CanBeClimbed
  fullName: GTA.Entity.CanBeClimbed
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool CanBeClimbed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanBeClimbed As Boolean
  overload: GTA.Entity.CanBeClimbed*
- uid: GTA.Entity.IsPickupByCargobobDisabled
  commentId: P:GTA.Entity.IsPickupByCargobobDisabled
  id: IsPickupByCargobobDisabled
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsPickupByCargobobDisabled
  nameWithType: Entity.IsPickupByCargobobDisabled
  fullName: GTA.Entity.IsPickupByCargobobDisabled
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsPickupByCargobobDisabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsPickupByCargobobDisabled As Boolean
  overload: GTA.Entity.IsPickupByCargobobDisabled*
- uid: GTA.Entity.KeepsDamageFlagsOnCleanupMissionState
  commentId: P:GTA.Entity.KeepsDamageFlagsOnCleanupMissionState
  id: KeepsDamageFlagsOnCleanupMissionState
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: KeepsDamageFlagsOnCleanupMissionState
  nameWithType: Entity.KeepsDamageFlagsOnCleanupMissionState
  fullName: GTA.Entity.KeepsDamageFlagsOnCleanupMissionState
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool KeepsDamageFlagsOnCleanupMissionState { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property KeepsDamageFlagsOnCleanupMissionState As Boolean
  overload: GTA.Entity.KeepsDamageFlagsOnCleanupMissionState*
- uid: GTA.Entity.SpecificRelGroupForInflictorChecks
  commentId: P:GTA.Entity.SpecificRelGroupForInflictorChecks
  id: SpecificRelGroupForInflictorChecks
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: SpecificRelGroupForInflictorChecks
  nameWithType: Entity.SpecificRelGroupForInflictorChecks
  fullName: GTA.Entity.SpecificRelGroupForInflictorChecks
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public RelationshipGroup SpecificRelGroupForInflictorChecks { get; set; }
    parameters: []
    return:
      type: GTA.RelationshipGroup
    content.vb: Public Property SpecificRelGroupForInflictorChecks As RelationshipGroup
  overload: GTA.Entity.SpecificRelGroupForInflictorChecks*
- uid: GTA.Entity.IsVisible
  commentId: P:GTA.Entity.IsVisible
  id: IsVisible
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsVisible
  nameWithType: Entity.IsVisible
  fullName: GTA.Entity.IsVisible
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsVisible { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsVisible As Boolean
  overload: GTA.Entity.IsVisible*
- uid: GTA.Entity.IsOccluded
  commentId: P:GTA.Entity.IsOccluded
  id: IsOccluded
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsOccluded
  nameWithType: Entity.IsOccluded
  fullName: GTA.Entity.IsOccluded
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsOccluded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOccluded As Boolean
  overload: GTA.Entity.IsOccluded*
- uid: GTA.Entity.IsRendered
  commentId: P:GTA.Entity.IsRendered
  id: IsRendered
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsRendered
  nameWithType: Entity.IsRendered
  fullName: GTA.Entity.IsRendered
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsRendered { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRendered As Boolean
  overload: GTA.Entity.IsRendered*
- uid: GTA.Entity.IsOnFire
  commentId: P:GTA.Entity.IsOnFire
  id: IsOnFire
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsOnFire
  nameWithType: Entity.IsOnFire
  fullName: GTA.Entity.IsOnFire
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsOnFire { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOnFire As Boolean
  overload: GTA.Entity.IsOnFire*
- uid: GTA.Entity.IsOnScreen
  commentId: P:GTA.Entity.IsOnScreen
  id: IsOnScreen
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsOnScreen
  nameWithType: Entity.IsOnScreen
  fullName: GTA.Entity.IsOnScreen
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsOnScreen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOnScreen As Boolean
  overload: GTA.Entity.IsOnScreen*
- uid: GTA.Entity.IsUpright
  commentId: P:GTA.Entity.IsUpright
  id: IsUpright
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsUpright
  nameWithType: Entity.IsUpright
  fullName: GTA.Entity.IsUpright
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsUpright { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUpright As Boolean
  overload: GTA.Entity.IsUpright*
- uid: GTA.Entity.IsUpsideDown
  commentId: P:GTA.Entity.IsUpsideDown
  id: IsUpsideDown
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsUpsideDown
  nameWithType: Entity.IsUpsideDown
  fullName: GTA.Entity.IsUpsideDown
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsUpsideDown { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUpsideDown As Boolean
  overload: GTA.Entity.IsUpsideDown*
- uid: GTA.Entity.IsInAir
  commentId: P:GTA.Entity.IsInAir
  id: IsInAir
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsInAir
  nameWithType: Entity.IsInAir
  fullName: GTA.Entity.IsInAir
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsInAir { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInAir As Boolean
  overload: GTA.Entity.IsInAir*
- uid: GTA.Entity.UprightValue
  commentId: P:GTA.Entity.UprightValue
  id: UprightValue
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: UprightValue
  nameWithType: Entity.UprightValue
  fullName: GTA.Entity.UprightValue
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public float UprightValue { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property UprightValue As Single
  overload: GTA.Entity.UprightValue*
- uid: GTA.Entity.HasGravity
  commentId: P:GTA.Entity.HasGravity
  id: HasGravity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasGravity
  nameWithType: Entity.HasGravity
  fullName: GTA.Entity.HasGravity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasGravity { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasGravity As Boolean
  overload: GTA.Entity.HasGravity*
- uid: GTA.Entity.HasCollided
  commentId: P:GTA.Entity.HasCollided
  id: HasCollided
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasCollided
  nameWithType: Entity.HasCollided
  fullName: GTA.Entity.HasCollided
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasCollided { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasCollided As Boolean
  overload: GTA.Entity.HasCollided*
- uid: GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding
  commentId: P:GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding
  id: HasCollidedWithBuildingOrAnimatedBuilding
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasCollidedWithBuildingOrAnimatedBuilding
  nameWithType: Entity.HasCollidedWithBuildingOrAnimatedBuilding
  fullName: GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasCollidedWithBuildingOrAnimatedBuilding { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasCollidedWithBuildingOrAnimatedBuilding As Boolean
  overload: GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding*
- uid: GTA.Entity.MaterialCollidingWith
  commentId: P:GTA.Entity.MaterialCollidingWith
  id: MaterialCollidingWith
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: MaterialCollidingWith
  nameWithType: Entity.MaterialCollidingWith
  fullName: GTA.Entity.MaterialCollidingWith
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public MaterialHash MaterialCollidingWith { get; }
    parameters: []
    return:
      type: GTA.MaterialHash
    content.vb: Public ReadOnly Property MaterialCollidingWith As MaterialHash
  overload: GTA.Entity.MaterialCollidingWith*
- uid: GTA.Entity.VehicleCollidingWith
  commentId: P:GTA.Entity.VehicleCollidingWith
  id: VehicleCollidingWith
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: VehicleCollidingWith
  nameWithType: Entity.VehicleCollidingWith
  fullName: GTA.Entity.VehicleCollidingWith
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vehicle VehicleCollidingWith { get; }
    parameters: []
    return:
      type: GTA.Vehicle
    content.vb: Public ReadOnly Property VehicleCollidingWith As Vehicle
  overload: GTA.Entity.VehicleCollidingWith*
- uid: GTA.Entity.PedCollidingWith
  commentId: P:GTA.Entity.PedCollidingWith
  id: PedCollidingWith
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PedCollidingWith
  nameWithType: Entity.PedCollidingWith
  fullName: GTA.Entity.PedCollidingWith
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Ped PedCollidingWith { get; }
    parameters: []
    return:
      type: GTA.Ped
    content.vb: Public ReadOnly Property PedCollidingWith As Ped
  overload: GTA.Entity.PedCollidingWith*
- uid: GTA.Entity.PropCollidingWith
  commentId: P:GTA.Entity.PropCollidingWith
  id: PropCollidingWith
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: PropCollidingWith
  nameWithType: Entity.PropCollidingWith
  fullName: GTA.Entity.PropCollidingWith
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Prop PropCollidingWith { get; }
    parameters: []
    return:
      type: GTA.Prop
    content.vb: Public ReadOnly Property PropCollidingWith As Prop
  overload: GTA.Entity.PropCollidingWith*
- uid: GTA.Entity.IsCollisionEnabled
  commentId: P:GTA.Entity.IsCollisionEnabled
  id: IsCollisionEnabled
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsCollisionEnabled
  nameWithType: Entity.IsCollisionEnabled
  fullName: GTA.Entity.IsCollisionEnabled
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsCollisionEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsCollisionEnabled As Boolean
  overload: GTA.Entity.IsCollisionEnabled*
- uid: GTA.Entity.IsRecordingCollisions
  commentId: P:GTA.Entity.IsRecordingCollisions
  id: IsRecordingCollisions
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsRecordingCollisions
  nameWithType: Entity.IsRecordingCollisions
  fullName: GTA.Entity.IsRecordingCollisions
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsRecordingCollisions { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsRecordingCollisions As Boolean
  overload: GTA.Entity.IsRecordingCollisions*
- uid: GTA.Entity.AttachedBlip
  commentId: P:GTA.Entity.AttachedBlip
  id: AttachedBlip
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachedBlip
  nameWithType: Entity.AttachedBlip
  fullName: GTA.Entity.AttachedBlip
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Blip AttachedBlip { get; }
    parameters: []
    return:
      type: GTA.Blip
    content.vb: Public ReadOnly Property AttachedBlip As Blip
  overload: GTA.Entity.AttachedBlip*
- uid: GTA.Entity.AttachedBlips
  commentId: P:GTA.Entity.AttachedBlips
  id: AttachedBlips
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachedBlips
  nameWithType: Entity.AttachedBlips
  fullName: GTA.Entity.AttachedBlips
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Blip[] AttachedBlips { get; }
    parameters: []
    return:
      type: GTA.Blip[]
    content.vb: Public ReadOnly Property AttachedBlips As Blip()
  overload: GTA.Entity.AttachedBlips*
- uid: GTA.Entity.AttachedEntity
  commentId: P:GTA.Entity.AttachedEntity
  id: AttachedEntity
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: AttachedEntity
  nameWithType: Entity.AttachedEntity
  fullName: GTA.Entity.AttachedEntity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Entity AttachedEntity { get; }
    parameters: []
    return:
      type: GTA.Entity
    content.vb: Public ReadOnly Property AttachedEntity As Entity
  overload: GTA.Entity.AttachedEntity*
- uid: GTA.Entity.HasPhysics
  commentId: P:GTA.Entity.HasPhysics
  id: HasPhysics
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: HasPhysics
  nameWithType: Entity.HasPhysics
  fullName: GTA.Entity.HasPhysics
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool HasPhysics { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasPhysics As Boolean
  overload: GTA.Entity.HasPhysics*
- uid: GTA.Entity.IsStatic
  commentId: P:GTA.Entity.IsStatic
  id: IsStatic
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: Entity.IsStatic
  fullName: GTA.Entity.IsStatic
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsStatic { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsStatic As Boolean
  overload: GTA.Entity.IsStatic*
- uid: GTA.Entity.CenterOfGravityOffset
  commentId: P:GTA.Entity.CenterOfGravityOffset
  id: CenterOfGravityOffset
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: CenterOfGravityOffset
  nameWithType: Entity.CenterOfGravityOffset
  fullName: GTA.Entity.CenterOfGravityOffset
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 CenterOfGravityOffset { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property CenterOfGravityOffset As Vector3
  overload: GTA.Entity.CenterOfGravityOffset*
- uid: GTA.Entity.CurrentInteriorProxy
  commentId: P:GTA.Entity.CurrentInteriorProxy
  id: CurrentInteriorProxy
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: CurrentInteriorProxy
  nameWithType: Entity.CurrentInteriorProxy
  fullName: GTA.Entity.CurrentInteriorProxy
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public InteriorProxy CurrentInteriorProxy { get; }
    parameters: []
    return:
      type: GTA.InteriorProxy
    content.vb: Public ReadOnly Property CurrentInteriorProxy As InteriorProxy
  overload: GTA.Entity.CurrentInteriorProxy*
- uid: GTA.Entity.CurrentInteriorRoomKey
  commentId: P:GTA.Entity.CurrentInteriorRoomKey
  id: CurrentInteriorRoomKey
  parent: GTA.Entity
  langs:
  - csharp
  - vb
  name: CurrentInteriorRoomKey
  nameWithType: Entity.CurrentInteriorRoomKey
  fullName: GTA.Entity.CurrentInteriorRoomKey
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int CurrentInteriorRoomKey { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CurrentInteriorRoomKey As Integer
  overload: GTA.Entity.CurrentInteriorRoomKey*
references:
- uid: GTA
  commentId: N:GTA
  isExternal: true
  href: GTA.html
  name: GTA
  nameWithType: GTA
  fullName: GTA
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: GTA.PoolObject
  commentId: T:GTA.PoolObject
  parent: GTA
  isExternal: true
  href: GTA.PoolObject.html
  name: PoolObject
  nameWithType: PoolObject
  fullName: GTA.PoolObject
- uid: GTA.Native.INativeValue
  commentId: T:GTA.Native.INativeValue
  parent: GTA.Native
  isExternal: true
  href: GTA.Native.INativeValue.html
  name: INativeValue
  nameWithType: INativeValue
  fullName: GTA.Native.INativeValue
- uid: GTA.IDeletable
  commentId: T:GTA.IDeletable
  parent: GTA
  isExternal: true
  href: GTA.IDeletable.html
  name: IDeletable
  nameWithType: IDeletable
  fullName: GTA.IDeletable
- uid: GTA.IExistable
  commentId: T:GTA.IExistable
  parent: GTA
  isExternal: true
  href: GTA.IExistable.html
  name: IExistable
  nameWithType: IExistable
  fullName: GTA.IExistable
- uid: GTA.ISpatial
  commentId: T:GTA.ISpatial
  parent: GTA
  isExternal: true
  href: GTA.ISpatial.html
  name: ISpatial
  nameWithType: ISpatial
  fullName: GTA.ISpatial
- uid: GTA.PoolObject.Handle
  commentId: P:GTA.PoolObject.Handle
  parent: GTA.PoolObject
  isExternal: true
  href: GTA.PoolObject.html#GTA_PoolObject_Handle
  name: Handle
  nameWithType: PoolObject.Handle
  fullName: GTA.PoolObject.Handle
- uid: GTA.PoolObject.NativeValue
  commentId: P:GTA.PoolObject.NativeValue
  parent: GTA.PoolObject
  isExternal: true
  href: GTA.PoolObject.html#GTA_PoolObject_NativeValue
  name: NativeValue
  nameWithType: PoolObject.NativeValue
  fullName: GTA.PoolObject.NativeValue
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: GTA.Native
  commentId: N:GTA.Native
  isExternal: true
  href: GTA.html
  name: GTA.Native
  nameWithType: GTA.Native
  fullName: GTA.Native
  spec.csharp:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Native
    name: Native
    isExternal: true
    href: GTA.Native.html
  spec.vb:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Native
    name: Native
    isExternal: true
    href: GTA.Native.html
- uid: GTA.Entity.FromHandle*
  commentId: Overload:GTA.Entity.FromHandle
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_FromHandle_System_Int32_
  name: FromHandle
  nameWithType: Entity.FromHandle
  fullName: GTA.Entity.FromHandle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: GTA.Entity
  commentId: T:GTA.Entity
  parent: GTA
  isExternal: true
  href: GTA.Entity.html
  name: Entity
  nameWithType: Entity
  fullName: GTA.Entity
- uid: GTA.Entity.SetOpacity*
  commentId: Overload:GTA.Entity.SetOpacity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetOpacity_System_Int32_System_Boolean_
  name: SetOpacity
  nameWithType: Entity.SetOpacity
  fullName: GTA.Entity.SetOpacity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: GTA.Entity.ResetOpacity*
  commentId: Overload:GTA.Entity.ResetOpacity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ResetOpacity
  name: ResetOpacity
  nameWithType: Entity.ResetOpacity
  fullName: GTA.Entity.ResetOpacity
- uid: GTA.Entity.GetOffsetPosition*
  commentId: Overload:GTA.Entity.GetOffsetPosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_GetOffsetPosition_GTA_Math_Vector3_
  name: GetOffsetPosition
  nameWithType: Entity.GetOffsetPosition
  fullName: GTA.Entity.GetOffsetPosition
- uid: GTA.Math.Vector3
  commentId: T:GTA.Math.Vector3
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Vector3.html
  name: Vector3
  nameWithType: Vector3
  fullName: GTA.Math.Vector3
- uid: GTA.Math
  commentId: N:GTA.Math
  isExternal: true
  href: GTA.html
  name: GTA.Math
  nameWithType: GTA.Math
  fullName: GTA.Math
  spec.csharp:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
  spec.vb:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
- uid: GTA.Entity.GetPositionOffset*
  commentId: Overload:GTA.Entity.GetPositionOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_GetPositionOffset_GTA_Math_Vector3_
  name: GetPositionOffset
  nameWithType: Entity.GetPositionOffset
  fullName: GTA.Entity.GetPositionOffset
- uid: GTA.Entity.GetSpeedVector*
  commentId: Overload:GTA.Entity.GetSpeedVector
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_GetSpeedVector_System_Boolean_
  name: GetSpeedVector
  nameWithType: Entity.GetSpeedVector
  fullName: GTA.Entity.GetSpeedVector
- uid: GTA.Entity.HasBeenDamagedBy*
  commentId: Overload:GTA.Entity.HasBeenDamagedBy
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasBeenDamagedBy_GTA_Entity_
  name: HasBeenDamagedBy
  nameWithType: Entity.HasBeenDamagedBy
  fullName: GTA.Entity.HasBeenDamagedBy
- uid: GTA.WeaponHash
  commentId: T:GTA.WeaponHash
  parent: GTA
  isExternal: true
  href: GTA.WeaponHash.html
  name: WeaponHash
  nameWithType: WeaponHash
  fullName: GTA.WeaponHash
- uid: GTA.Entity.HasBeenDamagedByAnyWeapon*
  commentId: Overload:GTA.Entity.HasBeenDamagedByAnyWeapon
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasBeenDamagedByAnyWeapon
  name: HasBeenDamagedByAnyWeapon
  nameWithType: Entity.HasBeenDamagedByAnyWeapon
  fullName: GTA.Entity.HasBeenDamagedByAnyWeapon
- uid: GTA.Entity.HasBeenDamagedByAnyMeleeWeapon*
  commentId: Overload:GTA.Entity.HasBeenDamagedByAnyMeleeWeapon
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasBeenDamagedByAnyMeleeWeapon
  name: HasBeenDamagedByAnyMeleeWeapon
  nameWithType: Entity.HasBeenDamagedByAnyMeleeWeapon
  fullName: GTA.Entity.HasBeenDamagedByAnyMeleeWeapon
- uid: GTA.Entity.ClearLastWeaponDamage*
  commentId: Overload:GTA.Entity.ClearLastWeaponDamage
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ClearLastWeaponDamage
  name: ClearLastWeaponDamage
  nameWithType: Entity.ClearLastWeaponDamage
  fullName: GTA.Entity.ClearLastWeaponDamage
- uid: GTA.Entity.DetachFragmentPart*
  commentId: Overload:GTA.Entity.DetachFragmentPart
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_DetachFragmentPart_System_Int32_
  name: DetachFragmentPart
  nameWithType: Entity.DetachFragmentPart
  fullName: GTA.Entity.DetachFragmentPart
- uid: GTA.Entity.SetShouldFreezeWaitingOnCollision*
  commentId: Overload:GTA.Entity.SetShouldFreezeWaitingOnCollision
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetShouldFreezeWaitingOnCollision_System_Boolean_
  name: SetShouldFreezeWaitingOnCollision
  nameWithType: Entity.SetShouldFreezeWaitingOnCollision
  fullName: GTA.Entity.SetShouldFreezeWaitingOnCollision
- uid: GTA.Entity.SetOnlyDamagedByRelGroup*
  commentId: Overload:GTA.Entity.SetOnlyDamagedByRelGroup
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetOnlyDamagedByRelGroup_GTA_RelationshipGroup_
  name: SetOnlyDamagedByRelGroup
  nameWithType: Entity.SetOnlyDamagedByRelGroup
  fullName: GTA.Entity.SetOnlyDamagedByRelGroup
- uid: GTA.RelationshipGroup
  commentId: T:GTA.RelationshipGroup
  parent: GTA
  isExternal: true
  href: GTA.RelationshipGroup.html
  name: RelationshipGroup
  nameWithType: RelationshipGroup
  fullName: GTA.RelationshipGroup
- uid: GTA.Entity.ClearOnlyDamagedByRelGroup*
  commentId: Overload:GTA.Entity.ClearOnlyDamagedByRelGroup
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ClearOnlyDamagedByRelGroup
  name: ClearOnlyDamagedByRelGroup
  nameWithType: Entity.ClearOnlyDamagedByRelGroup
  fullName: GTA.Entity.ClearOnlyDamagedByRelGroup
- uid: GTA.Entity.SetNotDamagedByRelGroup*
  commentId: Overload:GTA.Entity.SetNotDamagedByRelGroup
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetNotDamagedByRelGroup_GTA_RelationshipGroup_
  name: SetNotDamagedByRelGroup
  nameWithType: Entity.SetNotDamagedByRelGroup
  fullName: GTA.Entity.SetNotDamagedByRelGroup
- uid: GTA.Entity.ClearNotDamagedByRelGroup*
  commentId: Overload:GTA.Entity.ClearNotDamagedByRelGroup
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ClearNotDamagedByRelGroup
  name: ClearNotDamagedByRelGroup
  nameWithType: Entity.ClearNotDamagedByRelGroup
  fullName: GTA.Entity.ClearNotDamagedByRelGroup
- uid: GTA.Entity.IsUprightWithin*
  commentId: Overload:GTA.Entity.IsUprightWithin
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsUprightWithin_System_Single_
  name: IsUprightWithin
  nameWithType: Entity.IsUprightWithin
  fullName: GTA.Entity.IsUprightWithin
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: GTA.Entity.RemoveParticleEffects*
  commentId: Overload:GTA.Entity.RemoveParticleEffects
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_RemoveParticleEffects
  name: RemoveParticleEffects
  nameWithType: Entity.RemoveParticleEffects
  fullName: GTA.Entity.RemoveParticleEffects
- uid: GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord*
  commentId: Overload:GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_TryGetPhysicalEntityFromLastCollisionRecord_GTA_Entity__
  name: TryGetPhysicalEntityFromLastCollisionRecord
  nameWithType: Entity.TryGetPhysicalEntityFromLastCollisionRecord
  fullName: GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord
- uid: GTA.Entity.SetNoCollision*
  commentId: Overload:GTA.Entity.SetNoCollision
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetNoCollision_GTA_Entity_System_Boolean_
  name: SetNoCollision
  nameWithType: Entity.SetNoCollision
  fullName: GTA.Entity.SetNoCollision
- uid: GTA.Entity.IsInArea*
  commentId: Overload:GTA.Entity.IsInArea
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInArea_GTA_Math_Vector3_GTA_Math_Vector3_
  name: IsInArea
  nameWithType: Entity.IsInArea
  fullName: GTA.Entity.IsInArea
- uid: GTA.PedTransportMode
  commentId: T:GTA.PedTransportMode
  parent: GTA
  isExternal: true
  href: GTA.PedTransportMode.html
  name: PedTransportMode
  nameWithType: PedTransportMode
  fullName: GTA.PedTransportMode
- uid: GTA.Entity.IsInAngledArea*
  commentId: Overload:GTA.Entity.IsInAngledArea
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInAngledArea_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_
  name: IsInAngledArea
  nameWithType: Entity.IsInAngledArea
  fullName: GTA.Entity.IsInAngledArea
- uid: GTA.Entity.IsInRange*
  commentId: Overload:GTA.Entity.IsInRange
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInRange_GTA_Math_Vector3_System_Single_
  name: IsInRange
  nameWithType: Entity.IsInRange
  fullName: GTA.Entity.IsInRange
- uid: GTA.Entity.IsNearEntity*
  commentId: Overload:GTA.Entity.IsNearEntity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsNearEntity_GTA_Entity_GTA_Math_Vector3_
  name: IsNearEntity
  nameWithType: Entity.IsNearEntity
  fullName: GTA.Entity.IsNearEntity
- uid: GTA.Entity.IsTouching*
  commentId: Overload:GTA.Entity.IsTouching
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsTouching_GTA_Model_
  name: IsTouching
  nameWithType: Entity.IsTouching
  fullName: GTA.Entity.IsTouching
- uid: GTA.Model
  commentId: T:GTA.Model
  parent: GTA
  isExternal: true
  href: GTA.Model.html
  name: Model
  nameWithType: Model
  fullName: GTA.Model
- uid: GTA.Entity.AddBlip*
  commentId: Overload:GTA.Entity.AddBlip
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AddBlip
  name: AddBlip
  nameWithType: Entity.AddBlip
  fullName: GTA.Entity.AddBlip
- uid: GTA.Blip
  commentId: T:GTA.Blip
  parent: GTA
  isExternal: true
  href: GTA.Blip.html
  name: Blip
  nameWithType: Blip
  fullName: GTA.Blip
- uid: GTA.Entity.Detach*
  commentId: Overload:GTA.Entity.Detach
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Detach
  name: Detach
  nameWithType: Entity.Detach
  fullName: GTA.Entity.Detach
- uid: GTA.Entity.AttachTo*
  commentId: Overload:GTA.Entity.AttachTo
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachTo_GTA_Entity_GTA_Math_Vector3_GTA_Math_Vector3_
  name: AttachTo
  nameWithType: Entity.AttachTo
  fullName: GTA.Entity.AttachTo
- uid: GTA.EntityBone
  commentId: T:GTA.EntityBone
  parent: GTA
  isExternal: true
  href: GTA.EntityBone.html
  name: EntityBone
  nameWithType: EntityBone
  fullName: GTA.EntityBone
- uid: GTA.EulerRotationOrder
  commentId: T:GTA.EulerRotationOrder
  parent: GTA
  isExternal: true
  href: GTA.EulerRotationOrder.html
  name: EulerRotationOrder
  nameWithType: EulerRotationOrder
  fullName: GTA.EulerRotationOrder
- uid: GTA.Entity.AttachToMatrixPhysically*
  commentId: Overload:GTA.Entity.AttachToMatrixPhysically
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachToMatrixPhysically_GTA_Entity_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_
  name: AttachToMatrixPhysically
  nameWithType: Entity.AttachToMatrixPhysically
  fullName: GTA.Entity.AttachToMatrixPhysically
- uid: GTA.Entity.AttachToBonePhysically*
  commentId: Overload:GTA.Entity.AttachToBonePhysically
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachToBonePhysically_GTA_EntityBone_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_
  name: AttachToBonePhysically
  nameWithType: Entity.AttachToBonePhysically
  fullName: GTA.Entity.AttachToBonePhysically
- uid: GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass*
  commentId: Overload:GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachToMatrixPhysicallyOverrideInverseMass_GTA_Entity_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_System_Single_System_Single_
  name: AttachToMatrixPhysicallyOverrideInverseMass
  nameWithType: Entity.AttachToMatrixPhysicallyOverrideInverseMass
  fullName: GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass
- uid: GTA.Entity.AttachToBonePhysicallyOverrideInverseMass*
  commentId: Overload:GTA.Entity.AttachToBonePhysicallyOverrideInverseMass
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachToBonePhysicallyOverrideInverseMass_GTA_EntityBone_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_System_Single_System_Single_
  name: AttachToBonePhysicallyOverrideInverseMass
  nameWithType: Entity.AttachToBonePhysicallyOverrideInverseMass
  fullName: GTA.Entity.AttachToBonePhysicallyOverrideInverseMass
- uid: GTA.Entity.IsAttached*
  commentId: Overload:GTA.Entity.IsAttached
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsAttached
  name: IsAttached
  nameWithType: Entity.IsAttached
  fullName: GTA.Entity.IsAttached
- uid: GTA.Entity.IsAttachedTo*
  commentId: Overload:GTA.Entity.IsAttachedTo
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsAttachedTo_GTA_Entity_
  name: IsAttachedTo
  nameWithType: Entity.IsAttachedTo
  fullName: GTA.Entity.IsAttachedTo
- uid: GTA.Entity.IsAttachedToAnyProp*
  commentId: Overload:GTA.Entity.IsAttachedToAnyProp
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsAttachedToAnyProp
  name: IsAttachedToAnyProp
  nameWithType: Entity.IsAttachedToAnyProp
  fullName: GTA.Entity.IsAttachedToAnyProp
- uid: GTA.Entity.IsAttachedToAnyPed*
  commentId: Overload:GTA.Entity.IsAttachedToAnyPed
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsAttachedToAnyPed
  name: IsAttachedToAnyPed
  nameWithType: Entity.IsAttachedToAnyPed
  fullName: GTA.Entity.IsAttachedToAnyPed
- uid: GTA.Entity.IsAttachedToAnyVehicle*
  commentId: Overload:GTA.Entity.IsAttachedToAnyVehicle
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsAttachedToAnyVehicle
  name: IsAttachedToAnyVehicle
  nameWithType: Entity.IsAttachedToAnyVehicle
  fullName: GTA.Entity.IsAttachedToAnyVehicle
- uid: GTA.Entity.ProcessEntityAttachments*
  commentId: Overload:GTA.Entity.ProcessEntityAttachments
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ProcessEntityAttachments
  name: ProcessEntityAttachments
  nameWithType: Entity.ProcessEntityAttachments
  fullName: GTA.Entity.ProcessEntityAttachments
- uid: GTA.Entity.ActivatePhysics*
  commentId: Overload:GTA.Entity.ActivatePhysics
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ActivatePhysics
  name: ActivatePhysics
  nameWithType: Entity.ActivatePhysics
  fullName: GTA.Entity.ActivatePhysics
- uid: GTA.Entity.DeactivatePhysics*
  commentId: Overload:GTA.Entity.DeactivatePhysics
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_DeactivatePhysics
  name: DeactivatePhysics
  nameWithType: Entity.DeactivatePhysics
  fullName: GTA.Entity.DeactivatePhysics
- uid: GTA.Entity.SetToRespondToPhysicsSystem*
  commentId: Overload:GTA.Entity.SetToRespondToPhysicsSystem
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetToRespondToPhysicsSystem
  name: SetToRespondToPhysicsSystem
  nameWithType: Entity.SetToRespondToPhysicsSystem
  fullName: GTA.Entity.SetToRespondToPhysicsSystem
- uid: GTA.Entity.SetDamping*
  commentId: Overload:GTA.Entity.SetDamping
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetDamping_GTA_PhysicsDampingType_System_Single_
  name: SetDamping
  nameWithType: Entity.SetDamping
  fullName: GTA.Entity.SetDamping
- uid: GTA.PhysicsDampingType
  commentId: T:GTA.PhysicsDampingType
  parent: GTA
  isExternal: true
  href: GTA.PhysicsDampingType.html
  name: PhysicsDampingType
  nameWithType: PhysicsDampingType
  fullName: GTA.PhysicsDampingType
- uid: GTA.Entity.SetCenterOfGravityAtBoundCenter*
  commentId: Overload:GTA.Entity.SetCenterOfGravityAtBoundCenter
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetCenterOfGravityAtBoundCenter
  name: SetCenterOfGravityAtBoundCenter
  nameWithType: Entity.SetCenterOfGravityAtBoundCenter
  fullName: GTA.Entity.SetCenterOfGravityAtBoundCenter
- uid: GTA.Entity.ApplyForce*
  commentId: Overload:GTA.Entity.ApplyForce
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyForce_GTA_Math_Vector3_GTA_Math_Vector3_GTA_ForceType_
  name: ApplyForce
  nameWithType: Entity.ApplyForce
  fullName: GTA.Entity.ApplyForce
- uid: GTA.ForceType
  commentId: T:GTA.ForceType
  parent: GTA
  isExternal: true
  href: GTA.ForceType.html
  name: ForceType
  nameWithType: ForceType
  fullName: GTA.ForceType
- uid: GTA.Entity.ApplyForceRelative*
  commentId: Overload:GTA.Entity.ApplyForceRelative
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyForceRelative_GTA_Math_Vector3_GTA_Math_Vector3_GTA_ForceType_
  name: ApplyForceRelative
  nameWithType: Entity.ApplyForceRelative
  fullName: GTA.Entity.ApplyForceRelative
- uid: GTA.Entity.ApplyWorldForceWorldOffset*
  commentId: Overload:GTA.Entity.ApplyWorldForceWorldOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyWorldForceWorldOffset_GTA_Math_Vector3_GTA_Math_Vector3_GTA_ForceType_System_Boolean_System_Boolean_System_Boolean_
  name: ApplyWorldForceWorldOffset
  nameWithType: Entity.ApplyWorldForceWorldOffset
  fullName: GTA.Entity.ApplyWorldForceWorldOffset
- uid: GTA.Entity.ApplyWorldForceRelativeOffset*
  commentId: Overload:GTA.Entity.ApplyWorldForceRelativeOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyWorldForceRelativeOffset_GTA_Math_Vector3_GTA_Math_Vector3_GTA_ForceType_System_Boolean_System_Boolean_System_Boolean_
  name: ApplyWorldForceRelativeOffset
  nameWithType: Entity.ApplyWorldForceRelativeOffset
  fullName: GTA.Entity.ApplyWorldForceRelativeOffset
- uid: GTA.Entity.ApplyRelativeForceWorldOffset*
  commentId: Overload:GTA.Entity.ApplyRelativeForceWorldOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyRelativeForceWorldOffset_GTA_Math_Vector3_GTA_Math_Vector3_GTA_ForceType_System_Boolean_System_Boolean_System_Boolean_
  name: ApplyRelativeForceWorldOffset
  nameWithType: Entity.ApplyRelativeForceWorldOffset
  fullName: GTA.Entity.ApplyRelativeForceWorldOffset
- uid: GTA.Entity.ApplyRelativeForceRelativeOffset*
  commentId: Overload:GTA.Entity.ApplyRelativeForceRelativeOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyRelativeForceRelativeOffset_GTA_Math_Vector3_GTA_Math_Vector3_GTA_ForceType_System_Boolean_System_Boolean_System_Boolean_
  name: ApplyRelativeForceRelativeOffset
  nameWithType: Entity.ApplyRelativeForceRelativeOffset
  fullName: GTA.Entity.ApplyRelativeForceRelativeOffset
- uid: GTA.Entity.ApplyWorldForceCenterOfMass*
  commentId: Overload:GTA.Entity.ApplyWorldForceCenterOfMass
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyWorldForceCenterOfMass_GTA_Math_Vector3_GTA_ForceType_System_Boolean_System_Boolean_
  name: ApplyWorldForceCenterOfMass
  nameWithType: Entity.ApplyWorldForceCenterOfMass
  fullName: GTA.Entity.ApplyWorldForceCenterOfMass
- uid: GTA.Entity.ApplyRelativeForceCenterOfMass*
  commentId: Overload:GTA.Entity.ApplyRelativeForceCenterOfMass
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ApplyRelativeForceCenterOfMass_GTA_Math_Vector3_GTA_ForceType_System_Boolean_System_Boolean_
  name: ApplyRelativeForceCenterOfMass
  nameWithType: Entity.ApplyRelativeForceCenterOfMass
  fullName: GTA.Entity.ApplyRelativeForceCenterOfMass
- uid: GTA.Entity.PlayAnimation*
  commentId: Overload:GTA.Entity.PlayAnimation
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PlayAnimation_GTA_CrClipAsset_GTA_AnimationBlendDelta_System_Boolean_System_Boolean_System_Boolean_System_Single_GTA_AnimationFlags_
  name: PlayAnimation
  nameWithType: Entity.PlayAnimation
  fullName: GTA.Entity.PlayAnimation
- uid: GTA.CrClipAsset
  commentId: T:GTA.CrClipAsset
  parent: GTA
  isExternal: true
  href: GTA.CrClipAsset.html
  name: CrClipAsset
  nameWithType: CrClipAsset
  fullName: GTA.CrClipAsset
- uid: GTA.AnimationBlendDelta
  commentId: T:GTA.AnimationBlendDelta
  parent: GTA
  isExternal: true
  href: GTA.AnimationBlendDelta.html
  name: AnimationBlendDelta
  nameWithType: AnimationBlendDelta
  fullName: GTA.AnimationBlendDelta
- uid: GTA.AnimationFlags
  commentId: T:GTA.AnimationFlags
  parent: GTA
  isExternal: true
  href: GTA.AnimationFlags.html
  name: AnimationFlags
  nameWithType: AnimationFlags
  fullName: GTA.AnimationFlags
- uid: GTA.Entity.StopAnimation*
  commentId: Overload:GTA.Entity.StopAnimation
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_StopAnimation_GTA_CrClipAsset_GTA_AnimationBlendDelta_
  name: StopAnimation
  nameWithType: Entity.StopAnimation
  fullName: GTA.Entity.StopAnimation
- uid: GTA.Entity.IsPlayingAnimation*
  commentId: Overload:GTA.Entity.IsPlayingAnimation
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsPlayingAnimation_GTA_CrClipAsset_GTA_EntityAnimationType_
  name: IsPlayingAnimation
  nameWithType: Entity.IsPlayingAnimation
  fullName: GTA.Entity.IsPlayingAnimation
- uid: GTA.EntityAnimationType
  commentId: T:GTA.EntityAnimationType
  parent: GTA
  isExternal: true
  href: GTA.EntityAnimationType.html
  name: EntityAnimationType
  nameWithType: EntityAnimationType
  fullName: GTA.EntityAnimationType
- uid: GTA.Entity.HasFinishedAnimation*
  commentId: Overload:GTA.Entity.HasFinishedAnimation
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasFinishedAnimation_GTA_CrClipAsset_GTA_EntityAnimationType_
  name: HasFinishedAnimation
  nameWithType: Entity.HasFinishedAnimation
  fullName: GTA.Entity.HasFinishedAnimation
- uid: GTA.Entity.HasAnimationEventFired*
  commentId: Overload:GTA.Entity.HasAnimationEventFired
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasAnimationEventFired_GTA_AtHashValue_
  name: HasAnimationEventFired
  nameWithType: Entity.HasAnimationEventFired
  fullName: GTA.Entity.HasAnimationEventFired
- uid: GTA.AtHashValue
  commentId: T:GTA.AtHashValue
  parent: GTA
  isExternal: true
  href: GTA.AtHashValue.html
  name: AtHashValue
  nameWithType: AtHashValue
  fullName: GTA.AtHashValue
- uid: GTA.Entity.SetAnimationSpeed*
  commentId: Overload:GTA.Entity.SetAnimationSpeed
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetAnimationSpeed_GTA_CrClipAsset_System_Single_
  name: SetAnimationSpeed
  nameWithType: Entity.SetAnimationSpeed
  fullName: GTA.Entity.SetAnimationSpeed
- uid: GTA.Entity.SetAnimationCurrentTime*
  commentId: Overload:GTA.Entity.SetAnimationCurrentTime
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SetAnimationCurrentTime_GTA_CrClipAsset_System_Single_
  name: SetAnimationCurrentTime
  nameWithType: Entity.SetAnimationCurrentTime
  fullName: GTA.Entity.SetAnimationCurrentTime
- uid: GTA.Entity.GetAnimationCurrentTime*
  commentId: Overload:GTA.Entity.GetAnimationCurrentTime
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_GetAnimationCurrentTime_GTA_CrClipAsset_
  name: GetAnimationCurrentTime
  nameWithType: Entity.GetAnimationCurrentTime
  fullName: GTA.Entity.GetAnimationCurrentTime
- uid: GTA.Entity.GetAnimationTotalTime*
  commentId: Overload:GTA.Entity.GetAnimationTotalTime
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_GetAnimationTotalTime_GTA_CrClipAsset_
  name: GetAnimationTotalTime
  nameWithType: Entity.GetAnimationTotalTime
  fullName: GTA.Entity.GetAnimationTotalTime
- uid: GTA.Entity.FindAnimationEventPhase*
  commentId: Overload:GTA.Entity.FindAnimationEventPhase
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_FindAnimationEventPhase_GTA_CrClipAsset_System_String_System_Single__System_Single__
  name: FindAnimationEventPhase
  nameWithType: Entity.FindAnimationEventPhase
  fullName: GTA.Entity.FindAnimationEventPhase
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: GTA.Entity.PlaySynchronizedAnim*
  commentId: Overload:GTA.Entity.PlaySynchronizedAnim
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PlaySynchronizedAnim_GTA_FwSyncedScene_GTA_CrClipAsset_GTA_AnimationBlendDelta_System_Nullable_GTA_AnimationBlendDelta__GTA_SyncedSceneFlags_System_Nullable_GTA_AnimationBlendDelta__
  name: PlaySynchronizedAnim
  nameWithType: Entity.PlaySynchronizedAnim
  fullName: GTA.Entity.PlaySynchronizedAnim
- uid: GTA.FwSyncedScene
  commentId: T:GTA.FwSyncedScene
  parent: GTA
  isExternal: true
  href: GTA.FwSyncedScene.html
  name: FwSyncedScene
  nameWithType: FwSyncedScene
  fullName: GTA.FwSyncedScene
- uid: System.Nullable{GTA.AnimationBlendDelta}
  commentId: T:System.Nullable{GTA.AnimationBlendDelta}
  parent: System
  definition: System.Nullable`1
  href: GTA.AnimationBlendDelta.html
  name: AnimationBlendDelta?
  nameWithType: AnimationBlendDelta?
  fullName: GTA.AnimationBlendDelta?
  spec.csharp:
  - uid: GTA.AnimationBlendDelta
    name: AnimationBlendDelta
    isExternal: true
    href: GTA.AnimationBlendDelta.html
  - name: '?'
  spec.vb:
  - uid: GTA.AnimationBlendDelta
    name: AnimationBlendDelta
    isExternal: true
    href: GTA.AnimationBlendDelta.html
  - name: '?'
- uid: GTA.SyncedSceneFlags
  commentId: T:GTA.SyncedSceneFlags
  parent: GTA
  isExternal: true
  href: GTA.SyncedSceneFlags.html
  name: SyncedSceneFlags
  nameWithType: SyncedSceneFlags
  fullName: GTA.SyncedSceneFlags
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: GTA.Entity.StopSynchronizedAnim*
  commentId: Overload:GTA.Entity.StopSynchronizedAnim
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_StopSynchronizedAnim_GTA_AnimationBlendDelta_System_Boolean_
  name: StopSynchronizedAnim
  nameWithType: Entity.StopSynchronizedAnim
  fullName: GTA.Entity.StopSynchronizedAnim
- uid: GTA.Entity.PlaySynchronizedMapEntityAnim*
  commentId: Overload:GTA.Entity.PlaySynchronizedMapEntityAnim
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PlaySynchronizedMapEntityAnim_GTA_Math_Vector3_System_Single_GTA_Model_GTA_FwSyncedScene_GTA_CrClipAsset_GTA_AnimationBlendDelta_System_Nullable_GTA_AnimationBlendDelta__GTA_SyncedSceneFlags_System_Nullable_GTA_AnimationBlendDelta__
  name: PlaySynchronizedMapEntityAnim
  nameWithType: Entity.PlaySynchronizedMapEntityAnim
  fullName: GTA.Entity.PlaySynchronizedMapEntityAnim
- uid: GTA.Entity.StopSynchronizedMapEntityAnim*
  commentId: Overload:GTA.Entity.StopSynchronizedMapEntityAnim
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_StopSynchronizedMapEntityAnim_GTA_Math_Vector3_System_Single_GTA_Model_GTA_AnimationBlendDelta_
  name: StopSynchronizedMapEntityAnim
  nameWithType: Entity.StopSynchronizedMapEntityAnim
  fullName: GTA.Entity.StopSynchronizedMapEntityAnim
- uid: GTA.Entity.HasClearLineOfSightTo*
  commentId: Overload:GTA.Entity.HasClearLineOfSightTo
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasClearLineOfSightTo_GTA_Entity_GTA_IntersectFlags_
  name: HasClearLineOfSightTo
  nameWithType: Entity.HasClearLineOfSightTo
  fullName: GTA.Entity.HasClearLineOfSightTo
- uid: GTA.IntersectFlags
  commentId: T:GTA.IntersectFlags
  parent: GTA
  isExternal: true
  href: GTA.IntersectFlags.html
  name: IntersectFlags
  nameWithType: IntersectFlags
  fullName: GTA.IntersectFlags
- uid: GTA.Entity.HasClearLineOfSightToAdjustForCover*
  commentId: Overload:GTA.Entity.HasClearLineOfSightToAdjustForCover
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasClearLineOfSightToAdjustForCover_GTA_Entity_GTA_IntersectFlags_
  name: HasClearLineOfSightToAdjustForCover
  nameWithType: Entity.HasClearLineOfSightToAdjustForCover
  fullName: GTA.Entity.HasClearLineOfSightToAdjustForCover
- uid: GTA.Entity.HasClearLineOfSightToInFront*
  commentId: Overload:GTA.Entity.HasClearLineOfSightToInFront
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasClearLineOfSightToInFront_GTA_Entity_
  name: HasClearLineOfSightToInFront
  nameWithType: Entity.HasClearLineOfSightToInFront
  fullName: GTA.Entity.HasClearLineOfSightToInFront
- uid: GTA.Entity.MarkAsMissionEntity*
  commentId: Overload:GTA.Entity.MarkAsMissionEntity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MarkAsMissionEntity_System_Boolean_
  name: MarkAsMissionEntity
  nameWithType: Entity.MarkAsMissionEntity
  fullName: GTA.Entity.MarkAsMissionEntity
- uid: GTA.Entity.MarkAsNoLongerNeeded*
  commentId: Overload:GTA.Entity.MarkAsNoLongerNeeded
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MarkAsNoLongerNeeded
  name: MarkAsNoLongerNeeded
  nameWithType: Entity.MarkAsNoLongerNeeded
  fullName: GTA.Entity.MarkAsNoLongerNeeded
- uid: GTA.PoolObject.Delete
  commentId: M:GTA.PoolObject.Delete
  parent: GTA.PoolObject
  isExternal: true
  href: GTA.PoolObject.html#GTA_PoolObject_Delete
  name: Delete()
  nameWithType: PoolObject.Delete()
  fullName: GTA.PoolObject.Delete()
  spec.csharp:
  - uid: GTA.PoolObject.Delete
    name: Delete
    isExternal: true
    href: GTA.PoolObject.html#GTA_PoolObject_Delete
  - name: (
  - name: )
  spec.vb:
  - uid: GTA.PoolObject.Delete
    name: Delete
    isExternal: true
    href: GTA.PoolObject.html#GTA_PoolObject_Delete
  - name: (
  - name: )
- uid: GTA.Entity.Delete*
  commentId: Overload:GTA.Entity.Delete
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Delete
  name: Delete
  nameWithType: Entity.Delete
  fullName: GTA.Entity.Delete
- uid: GTA.PoolObject.Exists
  commentId: M:GTA.PoolObject.Exists
  parent: GTA.PoolObject
  isExternal: true
  href: GTA.PoolObject.html#GTA_PoolObject_Exists
  name: Exists()
  nameWithType: PoolObject.Exists()
  fullName: GTA.PoolObject.Exists()
  spec.csharp:
  - uid: GTA.PoolObject.Exists
    name: Exists
    isExternal: true
    href: GTA.PoolObject.html#GTA_PoolObject_Exists
  - name: (
  - name: )
  spec.vb:
  - uid: GTA.PoolObject.Exists
    name: Exists
    isExternal: true
    href: GTA.PoolObject.html#GTA_PoolObject_Exists
  - name: (
  - name: )
- uid: GTA.Entity.Exists*
  commentId: Overload:GTA.Entity.Exists
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Exists
  name: Exists
  nameWithType: Entity.Exists
  fullName: GTA.Entity.Exists
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: GTA.Entity.Equals*
  commentId: Overload:GTA.Entity.Equals
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Equals_System_Object_
  name: Equals
  nameWithType: Entity.Equals
  fullName: GTA.Entity.Equals
- uid: GTA.Entity.op_Equality*
  commentId: Overload:GTA.Entity.op_Equality
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_op_Equality_GTA_Entity_GTA_Entity_
  name: operator ==
  nameWithType: Entity.operator ==
  fullName: GTA.Entity.operator ==
  nameWithType.vb: Entity.=
  fullName.vb: GTA.Entity.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: GTA.Entity.op_Equality*
    name: ==
    isExternal: true
    href: GTA.Entity.html#GTA_Entity_op_Equality_GTA_Entity_GTA_Entity_
- uid: GTA.Entity.op_Inequality*
  commentId: Overload:GTA.Entity.op_Inequality
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_op_Inequality_GTA_Entity_GTA_Entity_
  name: operator !=
  nameWithType: Entity.operator !=
  fullName: GTA.Entity.operator !=
  nameWithType.vb: Entity.<>
  fullName.vb: GTA.Entity.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: GTA.Entity.op_Inequality*
    name: '!='
    isExternal: true
    href: GTA.Entity.html#GTA_Entity_op_Inequality_GTA_Entity_GTA_Entity_
- uid: GTA.Entity.op_Implicit*
  commentId: Overload:GTA.Entity.op_Implicit
  name: implicit operator
  nameWithType: Entity.implicit operator
  fullName: GTA.Entity.implicit operator
  nameWithType.vb: Entity.CType
  fullName.vb: GTA.Entity.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: GTA.Native.InputArgument
  commentId: T:GTA.Native.InputArgument
  parent: GTA.Native
  isExternal: true
  href: GTA.Native.InputArgument.html
  name: InputArgument
  nameWithType: InputArgument
  fullName: GTA.Native.InputArgument
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: GTA.Entity.GetHashCode*
  commentId: Overload:GTA.Entity.GetHashCode
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_GetHashCode
  name: GetHashCode
  nameWithType: Entity.GetHashCode
  fullName: GTA.Entity.GetHashCode
- uid: GTA.Entity.MemoryAddress*
  commentId: Overload:GTA.Entity.MemoryAddress
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MemoryAddress
  name: MemoryAddress
  nameWithType: Entity.MemoryAddress
  fullName: GTA.Entity.MemoryAddress
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: GTA.Entity.EntityType*
  commentId: Overload:GTA.Entity.EntityType
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_EntityType
  name: EntityType
  nameWithType: Entity.EntityType
  fullName: GTA.Entity.EntityType
- uid: GTA.EntityType
  commentId: T:GTA.EntityType
  parent: GTA
  isExternal: true
  href: GTA.EntityType.html
  name: EntityType
  nameWithType: EntityType
  fullName: GTA.EntityType
- uid: GTA.Entity.PopulationType*
  commentId: Overload:GTA.Entity.PopulationType
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PopulationType
  name: PopulationType
  nameWithType: Entity.PopulationType
  fullName: GTA.Entity.PopulationType
- uid: GTA.EntityPopulationType
  commentId: T:GTA.EntityPopulationType
  parent: GTA
  isExternal: true
  href: GTA.EntityPopulationType.html
  name: EntityPopulationType
  nameWithType: EntityPopulationType
  fullName: GTA.EntityPopulationType
- uid: GTA.Entity.IsDead*
  commentId: Overload:GTA.Entity.IsDead
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsDead
  name: IsDead
  nameWithType: Entity.IsDead
  fullName: GTA.Entity.IsDead
- uid: GTA.Entity.IsAlive*
  commentId: Overload:GTA.Entity.IsAlive
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsAlive
  name: IsAlive
  nameWithType: Entity.IsAlive
  fullName: GTA.Entity.IsAlive
- uid: GTA.Entity.HasDrawable*
  commentId: Overload:GTA.Entity.HasDrawable
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasDrawable
  name: HasDrawable
  nameWithType: Entity.HasDrawable
  fullName: GTA.Entity.HasDrawable
- uid: GTA.Entity.HasSkeleton*
  commentId: Overload:GTA.Entity.HasSkeleton
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasSkeleton
  name: HasSkeleton
  nameWithType: Entity.HasSkeleton
  fullName: GTA.Entity.HasSkeleton
- uid: GTA.Entity.HasAnimationDirector*
  commentId: Overload:GTA.Entity.HasAnimationDirector
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasAnimationDirector
  name: HasAnimationDirector
  nameWithType: Entity.HasAnimationDirector
  fullName: GTA.Entity.HasAnimationDirector
- uid: GTA.Entity.IsOwnedByShvdnScript*
  commentId: Overload:GTA.Entity.IsOwnedByShvdnScript
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsOwnedByShvdnScript
  name: IsOwnedByShvdnScript
  nameWithType: Entity.IsOwnedByShvdnScript
  fullName: GTA.Entity.IsOwnedByShvdnScript
- uid: GTA.Entity.IsOwnedByAnyScript*
  commentId: Overload:GTA.Entity.IsOwnedByAnyScript
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsOwnedByAnyScript
  name: IsOwnedByAnyScript
  nameWithType: Entity.IsOwnedByAnyScript
  fullName: GTA.Entity.IsOwnedByAnyScript
- uid: GTA.Entity.OwnerScriptName*
  commentId: Overload:GTA.Entity.OwnerScriptName
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_OwnerScriptName
  name: OwnerScriptName
  nameWithType: Entity.OwnerScriptName
  fullName: GTA.Entity.OwnerScriptName
- uid: GTA.Entity.Model*
  commentId: Overload:GTA.Entity.Model
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Model
  name: Model
  nameWithType: Entity.Model
  fullName: GTA.Entity.Model
- uid: GTA.Entity.Opacity*
  commentId: Overload:GTA.Entity.Opacity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Opacity
  name: Opacity
  nameWithType: Entity.Opacity
  fullName: GTA.Entity.Opacity
- uid: GTA.Entity.LodDistance*
  commentId: Overload:GTA.Entity.LodDistance
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_LodDistance
  name: LodDistance
  nameWithType: Entity.LodDistance
  fullName: GTA.Entity.LodDistance
- uid: GTA.Entity.IsPersistent*
  commentId: Overload:GTA.Entity.IsPersistent
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsPersistent
  name: IsPersistent
  nameWithType: Entity.IsPersistent
  fullName: GTA.Entity.IsPersistent
- uid: GTA.Entity.IsPositionFrozen*
  commentId: Overload:GTA.Entity.IsPositionFrozen
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsPositionFrozen
  name: IsPositionFrozen
  nameWithType: Entity.IsPositionFrozen
  fullName: GTA.Entity.IsPositionFrozen
- uid: GTA.Entity.Bones*
  commentId: Overload:GTA.Entity.Bones
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Bones
  name: Bones
  nameWithType: Entity.Bones
  fullName: GTA.Entity.Bones
- uid: GTA.EntityBoneCollection
  commentId: T:GTA.EntityBoneCollection
  parent: GTA
  isExternal: true
  href: GTA.EntityBoneCollection.html
  name: EntityBoneCollection
  nameWithType: EntityBoneCollection
  fullName: GTA.EntityBoneCollection
- uid: GTA.Entity.Health*
  commentId: Overload:GTA.Entity.Health
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Health
  name: Health
  nameWithType: Entity.Health
  fullName: GTA.Entity.Health
- uid: GTA.Entity.MaxHealth*
  commentId: Overload:GTA.Entity.MaxHealth
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MaxHealth
  name: MaxHealth
  nameWithType: Entity.MaxHealth
  fullName: GTA.Entity.MaxHealth
- uid: GTA.Entity.HealthFloat*
  commentId: Overload:GTA.Entity.HealthFloat
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HealthFloat
  name: HealthFloat
  nameWithType: Entity.HealthFloat
  fullName: GTA.Entity.HealthFloat
- uid: GTA.Entity.MaxHealthFloat*
  commentId: Overload:GTA.Entity.MaxHealthFloat
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MaxHealthFloat
  name: MaxHealthFloat
  nameWithType: Entity.MaxHealthFloat
  fullName: GTA.Entity.MaxHealthFloat
- uid: GTA.Entity.Matrix*
  commentId: Overload:GTA.Entity.Matrix
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Matrix
  name: Matrix
  nameWithType: Entity.Matrix
  fullName: GTA.Entity.Matrix
- uid: GTA.Math.Matrix
  commentId: T:GTA.Math.Matrix
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Matrix.html
  name: Matrix
  nameWithType: Matrix
  fullName: GTA.Math.Matrix
- uid: GTA.Entity.Position*
  commentId: Overload:GTA.Entity.Position
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Position
  name: Position
  nameWithType: Entity.Position
  fullName: GTA.Entity.Position
- uid: GTA.ISpatial.Position
  commentId: P:GTA.ISpatial.Position
  parent: GTA.ISpatial
  isExternal: true
  href: GTA.ISpatial.html#GTA_ISpatial_Position
  name: Position
  nameWithType: ISpatial.Position
  fullName: GTA.ISpatial.Position
- uid: GTA.Entity.PositionNoOffset*
  commentId: Overload:GTA.Entity.PositionNoOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PositionNoOffset
  name: PositionNoOffset
  nameWithType: Entity.PositionNoOffset
  fullName: GTA.Entity.PositionNoOffset
- uid: GTA.Entity.Rotation*
  commentId: Overload:GTA.Entity.Rotation
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Rotation
  name: Rotation
  nameWithType: Entity.Rotation
  fullName: GTA.Entity.Rotation
- uid: GTA.ISpatial.Rotation
  commentId: P:GTA.ISpatial.Rotation
  parent: GTA.ISpatial
  isExternal: true
  href: GTA.ISpatial.html#GTA_ISpatial_Rotation
  name: Rotation
  nameWithType: ISpatial.Rotation
  fullName: GTA.ISpatial.Rotation
- uid: GTA.Entity.Heading*
  commentId: Overload:GTA.Entity.Heading
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Heading
  name: Heading
  nameWithType: Entity.Heading
  fullName: GTA.Entity.Heading
- uid: GTA.Entity.SubmersionLevel*
  commentId: Overload:GTA.Entity.SubmersionLevel
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SubmersionLevel
  name: SubmersionLevel
  nameWithType: Entity.SubmersionLevel
  fullName: GTA.Entity.SubmersionLevel
- uid: GTA.Entity.HeightAboveGround*
  commentId: Overload:GTA.Entity.HeightAboveGround
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HeightAboveGround
  name: HeightAboveGround
  nameWithType: Entity.HeightAboveGround
  fullName: GTA.Entity.HeightAboveGround
- uid: GTA.Entity.Quaternion*
  commentId: Overload:GTA.Entity.Quaternion
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Quaternion
  name: Quaternion
  nameWithType: Entity.Quaternion
  fullName: GTA.Entity.Quaternion
- uid: GTA.Math.Quaternion
  commentId: T:GTA.Math.Quaternion
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Quaternion.html
  name: Quaternion
  nameWithType: Quaternion
  fullName: GTA.Math.Quaternion
- uid: GTA.Entity.UpVector*
  commentId: Overload:GTA.Entity.UpVector
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_UpVector
  name: UpVector
  nameWithType: Entity.UpVector
  fullName: GTA.Entity.UpVector
- uid: GTA.Entity.RightVector*
  commentId: Overload:GTA.Entity.RightVector
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_RightVector
  name: RightVector
  nameWithType: Entity.RightVector
  fullName: GTA.Entity.RightVector
- uid: GTA.Entity.ForwardVector*
  commentId: Overload:GTA.Entity.ForwardVector
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ForwardVector
  name: ForwardVector
  nameWithType: Entity.ForwardVector
  fullName: GTA.Entity.ForwardVector
- uid: GTA.Entity.LeftPosition*
  commentId: Overload:GTA.Entity.LeftPosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_LeftPosition
  name: LeftPosition
  nameWithType: Entity.LeftPosition
  fullName: GTA.Entity.LeftPosition
- uid: GTA.Entity.RightPosition*
  commentId: Overload:GTA.Entity.RightPosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_RightPosition
  name: RightPosition
  nameWithType: Entity.RightPosition
  fullName: GTA.Entity.RightPosition
- uid: GTA.Entity.RearPosition*
  commentId: Overload:GTA.Entity.RearPosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_RearPosition
  name: RearPosition
  nameWithType: Entity.RearPosition
  fullName: GTA.Entity.RearPosition
- uid: GTA.Entity.FrontPosition*
  commentId: Overload:GTA.Entity.FrontPosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_FrontPosition
  name: FrontPosition
  nameWithType: Entity.FrontPosition
  fullName: GTA.Entity.FrontPosition
- uid: GTA.Entity.AbovePosition*
  commentId: Overload:GTA.Entity.AbovePosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AbovePosition
  name: AbovePosition
  nameWithType: Entity.AbovePosition
  fullName: GTA.Entity.AbovePosition
- uid: GTA.Entity.BelowPosition*
  commentId: Overload:GTA.Entity.BelowPosition
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_BelowPosition
  name: BelowPosition
  nameWithType: Entity.BelowPosition
  fullName: GTA.Entity.BelowPosition
- uid: GTA.Entity.Speed*
  commentId: Overload:GTA.Entity.Speed
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Speed
  name: Speed
  nameWithType: Entity.Speed
  fullName: GTA.Entity.Speed
- uid: GTA.Entity.MaxSpeed*
  commentId: Overload:GTA.Entity.MaxSpeed
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MaxSpeed
  name: MaxSpeed
  nameWithType: Entity.MaxSpeed
  fullName: GTA.Entity.MaxSpeed
- uid: GTA.Entity.Velocity*
  commentId: Overload:GTA.Entity.Velocity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_Velocity
  name: Velocity
  nameWithType: Entity.Velocity
  fullName: GTA.Entity.Velocity
- uid: GTA.Entity.RotationVelocity*
  commentId: Overload:GTA.Entity.RotationVelocity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_RotationVelocity
  name: RotationVelocity
  nameWithType: Entity.RotationVelocity
  fullName: GTA.Entity.RotationVelocity
- uid: GTA.Entity.WorldRotationVelocity*
  commentId: Overload:GTA.Entity.WorldRotationVelocity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_WorldRotationVelocity
  name: WorldRotationVelocity
  nameWithType: Entity.WorldRotationVelocity
  fullName: GTA.Entity.WorldRotationVelocity
- uid: GTA.Entity.LocalRotationVelocity*
  commentId: Overload:GTA.Entity.LocalRotationVelocity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_LocalRotationVelocity
  name: LocalRotationVelocity
  nameWithType: Entity.LocalRotationVelocity
  fullName: GTA.Entity.LocalRotationVelocity
- uid: GTA.Entity.DamageRecords*
  commentId: Overload:GTA.Entity.DamageRecords
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_DamageRecords
  name: DamageRecords
  nameWithType: Entity.DamageRecords
  fullName: GTA.Entity.DamageRecords
- uid: GTA.EntityDamageRecordCollection
  commentId: T:GTA.EntityDamageRecordCollection
  parent: GTA
  isExternal: true
  href: GTA.EntityDamageRecordCollection.html
  name: EntityDamageRecordCollection
  nameWithType: EntityDamageRecordCollection
  fullName: GTA.EntityDamageRecordCollection
- uid: GTA.Entity.FragmentGroupCount*
  commentId: Overload:GTA.Entity.FragmentGroupCount
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_FragmentGroupCount
  name: FragmentGroupCount
  nameWithType: Entity.FragmentGroupCount
  fullName: GTA.Entity.FragmentGroupCount
- uid: GTA.Entity.IsFragmentObject*
  commentId: Overload:GTA.Entity.IsFragmentObject
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsFragmentObject
  name: IsFragmentObject
  nameWithType: Entity.IsFragmentObject
  fullName: GTA.Entity.IsFragmentObject
- uid: GTA.Entity.IsInWater*
  commentId: Overload:GTA.Entity.IsInWater
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInWater
  name: IsInWater
  nameWithType: Entity.IsInWater
  fullName: GTA.Entity.IsInWater
- uid: GTA.Entity.IsInWaterStrict*
  commentId: Overload:GTA.Entity.IsInWaterStrict
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInWaterStrict
  name: IsInWaterStrict
  nameWithType: Entity.IsInWaterStrict
  fullName: GTA.Entity.IsInWaterStrict
- uid: GTA.Entity.WasInWater*
  commentId: Overload:GTA.Entity.WasInWater
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_WasInWater
  name: WasInWater
  nameWithType: Entity.WasInWater
  fullName: GTA.Entity.WasInWater
- uid: GTA.Entity.DontLoadCollision*
  commentId: Overload:GTA.Entity.DontLoadCollision
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_DontLoadCollision
  name: DontLoadCollision
  nameWithType: Entity.DontLoadCollision
  fullName: GTA.Entity.DontLoadCollision
- uid: GTA.Entity.AllowsFreezeWaitingOnCollision*
  commentId: Overload:GTA.Entity.AllowsFreezeWaitingOnCollision
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AllowsFreezeWaitingOnCollision
  name: AllowsFreezeWaitingOnCollision
  nameWithType: Entity.AllowsFreezeWaitingOnCollision
  fullName: GTA.Entity.AllowsFreezeWaitingOnCollision
- uid: GTA.Entity.IsFireProof*
  commentId: Overload:GTA.Entity.IsFireProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsFireProof
  name: IsFireProof
  nameWithType: Entity.IsFireProof
  fullName: GTA.Entity.IsFireProof
- uid: GTA.Entity.IsMeleeProof*
  commentId: Overload:GTA.Entity.IsMeleeProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsMeleeProof
  name: IsMeleeProof
  nameWithType: Entity.IsMeleeProof
  fullName: GTA.Entity.IsMeleeProof
- uid: GTA.Entity.IsBulletProof*
  commentId: Overload:GTA.Entity.IsBulletProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsBulletProof
  name: IsBulletProof
  nameWithType: Entity.IsBulletProof
  fullName: GTA.Entity.IsBulletProof
- uid: GTA.Entity.IsExplosionProof*
  commentId: Overload:GTA.Entity.IsExplosionProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsExplosionProof
  name: IsExplosionProof
  nameWithType: Entity.IsExplosionProof
  fullName: GTA.Entity.IsExplosionProof
- uid: GTA.Entity.IsCollisionProof*
  commentId: Overload:GTA.Entity.IsCollisionProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsCollisionProof
  name: IsCollisionProof
  nameWithType: Entity.IsCollisionProof
  fullName: GTA.Entity.IsCollisionProof
- uid: GTA.Entity.IsSteamProof*
  commentId: Overload:GTA.Entity.IsSteamProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsSteamProof
  name: IsSteamProof
  nameWithType: Entity.IsSteamProof
  fullName: GTA.Entity.IsSteamProof
- uid: GTA.Entity.IsSmokeProof*
  commentId: Overload:GTA.Entity.IsSmokeProof
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsSmokeProof
  name: IsSmokeProof
  nameWithType: Entity.IsSmokeProof
  fullName: GTA.Entity.IsSmokeProof
- uid: GTA.Entity.IsInvincible*
  commentId: Overload:GTA.Entity.IsInvincible
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInvincible
  name: IsInvincible
  nameWithType: Entity.IsInvincible
  fullName: GTA.Entity.IsInvincible
- uid: GTA.Entity.BlocksAnyDamageButHasReactions*
  commentId: Overload:GTA.Entity.BlocksAnyDamageButHasReactions
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_BlocksAnyDamageButHasReactions
  name: BlocksAnyDamageButHasReactions
  nameWithType: Entity.BlocksAnyDamageButHasReactions
  fullName: GTA.Entity.BlocksAnyDamageButHasReactions
- uid: GTA.Entity.IsOnlyDamagedByPlayer*
  commentId: Overload:GTA.Entity.IsOnlyDamagedByPlayer
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsOnlyDamagedByPlayer
  name: IsOnlyDamagedByPlayer
  nameWithType: Entity.IsOnlyDamagedByPlayer
  fullName: GTA.Entity.IsOnlyDamagedByPlayer
- uid: GTA.Entity.CanOnlyBeDamagedByRelGroup*
  commentId: Overload:GTA.Entity.CanOnlyBeDamagedByRelGroup
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_CanOnlyBeDamagedByRelGroup
  name: CanOnlyBeDamagedByRelGroup
  nameWithType: Entity.CanOnlyBeDamagedByRelGroup
  fullName: GTA.Entity.CanOnlyBeDamagedByRelGroup
- uid: GTA.Entity.BlocksDamageByRelGroup*
  commentId: Overload:GTA.Entity.BlocksDamageByRelGroup
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_BlocksDamageByRelGroup
  name: BlocksDamageByRelGroup
  nameWithType: Entity.BlocksDamageByRelGroup
  fullName: GTA.Entity.BlocksDamageByRelGroup
- uid: GTA.Entity.ShouldRenderScorched*
  commentId: Overload:GTA.Entity.ShouldRenderScorched
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_ShouldRenderScorched
  name: ShouldRenderScorched
  nameWithType: Entity.ShouldRenderScorched
  fullName: GTA.Entity.ShouldRenderScorched
- uid: GTA.Entity.CanBeAutoVaulted*
  commentId: Overload:GTA.Entity.CanBeAutoVaulted
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_CanBeAutoVaulted
  name: CanBeAutoVaulted
  nameWithType: Entity.CanBeAutoVaulted
  fullName: GTA.Entity.CanBeAutoVaulted
- uid: GTA.Entity.CanBeClimbed*
  commentId: Overload:GTA.Entity.CanBeClimbed
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_CanBeClimbed
  name: CanBeClimbed
  nameWithType: Entity.CanBeClimbed
  fullName: GTA.Entity.CanBeClimbed
- uid: GTA.Entity.IsPickupByCargobobDisabled*
  commentId: Overload:GTA.Entity.IsPickupByCargobobDisabled
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsPickupByCargobobDisabled
  name: IsPickupByCargobobDisabled
  nameWithType: Entity.IsPickupByCargobobDisabled
  fullName: GTA.Entity.IsPickupByCargobobDisabled
- uid: GTA.Entity.KeepsDamageFlagsOnCleanupMissionState*
  commentId: Overload:GTA.Entity.KeepsDamageFlagsOnCleanupMissionState
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_KeepsDamageFlagsOnCleanupMissionState
  name: KeepsDamageFlagsOnCleanupMissionState
  nameWithType: Entity.KeepsDamageFlagsOnCleanupMissionState
  fullName: GTA.Entity.KeepsDamageFlagsOnCleanupMissionState
- uid: GTA.Entity.SpecificRelGroupForInflictorChecks*
  commentId: Overload:GTA.Entity.SpecificRelGroupForInflictorChecks
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_SpecificRelGroupForInflictorChecks
  name: SpecificRelGroupForInflictorChecks
  nameWithType: Entity.SpecificRelGroupForInflictorChecks
  fullName: GTA.Entity.SpecificRelGroupForInflictorChecks
- uid: GTA.Entity.IsVisible*
  commentId: Overload:GTA.Entity.IsVisible
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsVisible
  name: IsVisible
  nameWithType: Entity.IsVisible
  fullName: GTA.Entity.IsVisible
- uid: GTA.Entity.IsOccluded*
  commentId: Overload:GTA.Entity.IsOccluded
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsOccluded
  name: IsOccluded
  nameWithType: Entity.IsOccluded
  fullName: GTA.Entity.IsOccluded
- uid: GTA.Entity.IsRendered*
  commentId: Overload:GTA.Entity.IsRendered
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsRendered
  name: IsRendered
  nameWithType: Entity.IsRendered
  fullName: GTA.Entity.IsRendered
- uid: GTA.Entity.IsOnFire*
  commentId: Overload:GTA.Entity.IsOnFire
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsOnFire
  name: IsOnFire
  nameWithType: Entity.IsOnFire
  fullName: GTA.Entity.IsOnFire
- uid: GTA.Entity.IsOnScreen*
  commentId: Overload:GTA.Entity.IsOnScreen
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsOnScreen
  name: IsOnScreen
  nameWithType: Entity.IsOnScreen
  fullName: GTA.Entity.IsOnScreen
- uid: GTA.Entity.IsUpright*
  commentId: Overload:GTA.Entity.IsUpright
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsUpright
  name: IsUpright
  nameWithType: Entity.IsUpright
  fullName: GTA.Entity.IsUpright
- uid: GTA.Entity.IsUpsideDown*
  commentId: Overload:GTA.Entity.IsUpsideDown
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsUpsideDown
  name: IsUpsideDown
  nameWithType: Entity.IsUpsideDown
  fullName: GTA.Entity.IsUpsideDown
- uid: GTA.Entity.IsInAir*
  commentId: Overload:GTA.Entity.IsInAir
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsInAir
  name: IsInAir
  nameWithType: Entity.IsInAir
  fullName: GTA.Entity.IsInAir
- uid: GTA.Entity.UprightValue*
  commentId: Overload:GTA.Entity.UprightValue
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_UprightValue
  name: UprightValue
  nameWithType: Entity.UprightValue
  fullName: GTA.Entity.UprightValue
- uid: GTA.Entity.HasGravity*
  commentId: Overload:GTA.Entity.HasGravity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasGravity
  name: HasGravity
  nameWithType: Entity.HasGravity
  fullName: GTA.Entity.HasGravity
- uid: GTA.Entity.HasCollided*
  commentId: Overload:GTA.Entity.HasCollided
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasCollided
  name: HasCollided
  nameWithType: Entity.HasCollided
  fullName: GTA.Entity.HasCollided
- uid: GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding*
  commentId: Overload:GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasCollidedWithBuildingOrAnimatedBuilding
  name: HasCollidedWithBuildingOrAnimatedBuilding
  nameWithType: Entity.HasCollidedWithBuildingOrAnimatedBuilding
  fullName: GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding
- uid: GTA.Entity.MaterialCollidingWith*
  commentId: Overload:GTA.Entity.MaterialCollidingWith
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_MaterialCollidingWith
  name: MaterialCollidingWith
  nameWithType: Entity.MaterialCollidingWith
  fullName: GTA.Entity.MaterialCollidingWith
- uid: GTA.MaterialHash
  commentId: T:GTA.MaterialHash
  parent: GTA
  isExternal: true
  href: GTA.MaterialHash.html
  name: MaterialHash
  nameWithType: MaterialHash
  fullName: GTA.MaterialHash
- uid: GTA.Entity.VehicleCollidingWith*
  commentId: Overload:GTA.Entity.VehicleCollidingWith
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_VehicleCollidingWith
  name: VehicleCollidingWith
  nameWithType: Entity.VehicleCollidingWith
  fullName: GTA.Entity.VehicleCollidingWith
- uid: GTA.Vehicle
  commentId: T:GTA.Vehicle
  parent: GTA
  isExternal: true
  href: GTA.Vehicle.html
  name: Vehicle
  nameWithType: Vehicle
  fullName: GTA.Vehicle
- uid: GTA.Entity.PedCollidingWith*
  commentId: Overload:GTA.Entity.PedCollidingWith
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PedCollidingWith
  name: PedCollidingWith
  nameWithType: Entity.PedCollidingWith
  fullName: GTA.Entity.PedCollidingWith
- uid: GTA.Ped
  commentId: T:GTA.Ped
  parent: GTA
  isExternal: true
  href: GTA.Ped.html
  name: Ped
  nameWithType: Ped
  fullName: GTA.Ped
- uid: GTA.Entity.PropCollidingWith*
  commentId: Overload:GTA.Entity.PropCollidingWith
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_PropCollidingWith
  name: PropCollidingWith
  nameWithType: Entity.PropCollidingWith
  fullName: GTA.Entity.PropCollidingWith
- uid: GTA.Prop
  commentId: T:GTA.Prop
  parent: GTA
  isExternal: true
  href: GTA.Prop.html
  name: Prop
  nameWithType: Prop
  fullName: GTA.Prop
- uid: GTA.Entity.IsCollisionEnabled*
  commentId: Overload:GTA.Entity.IsCollisionEnabled
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsCollisionEnabled
  name: IsCollisionEnabled
  nameWithType: Entity.IsCollisionEnabled
  fullName: GTA.Entity.IsCollisionEnabled
- uid: GTA.Entity.IsRecordingCollisions*
  commentId: Overload:GTA.Entity.IsRecordingCollisions
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsRecordingCollisions
  name: IsRecordingCollisions
  nameWithType: Entity.IsRecordingCollisions
  fullName: GTA.Entity.IsRecordingCollisions
- uid: GTA.Entity.AttachedBlip*
  commentId: Overload:GTA.Entity.AttachedBlip
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachedBlip
  name: AttachedBlip
  nameWithType: Entity.AttachedBlip
  fullName: GTA.Entity.AttachedBlip
- uid: GTA.Entity.AttachedBlips*
  commentId: Overload:GTA.Entity.AttachedBlips
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachedBlips
  name: AttachedBlips
  nameWithType: Entity.AttachedBlips
  fullName: GTA.Entity.AttachedBlips
- uid: GTA.Blip[]
  isExternal: true
  href: GTA.Blip.html
  name: Blip[]
  nameWithType: Blip[]
  fullName: GTA.Blip[]
  nameWithType.vb: Blip()
  fullName.vb: GTA.Blip()
  name.vb: Blip()
  spec.csharp:
  - uid: GTA.Blip
    name: Blip
    isExternal: true
    href: GTA.Blip.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Blip
    name: Blip
    isExternal: true
    href: GTA.Blip.html
  - name: (
  - name: )
- uid: GTA.Entity.AttachedEntity*
  commentId: Overload:GTA.Entity.AttachedEntity
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_AttachedEntity
  name: AttachedEntity
  nameWithType: Entity.AttachedEntity
  fullName: GTA.Entity.AttachedEntity
- uid: GTA.Entity.HasPhysics*
  commentId: Overload:GTA.Entity.HasPhysics
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_HasPhysics
  name: HasPhysics
  nameWithType: Entity.HasPhysics
  fullName: GTA.Entity.HasPhysics
- uid: GTA.Entity.IsStatic*
  commentId: Overload:GTA.Entity.IsStatic
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_IsStatic
  name: IsStatic
  nameWithType: Entity.IsStatic
  fullName: GTA.Entity.IsStatic
- uid: GTA.Entity.CenterOfGravityOffset*
  commentId: Overload:GTA.Entity.CenterOfGravityOffset
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_CenterOfGravityOffset
  name: CenterOfGravityOffset
  nameWithType: Entity.CenterOfGravityOffset
  fullName: GTA.Entity.CenterOfGravityOffset
- uid: GTA.Entity.CurrentInteriorProxy*
  commentId: Overload:GTA.Entity.CurrentInteriorProxy
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_CurrentInteriorProxy
  name: CurrentInteriorProxy
  nameWithType: Entity.CurrentInteriorProxy
  fullName: GTA.Entity.CurrentInteriorProxy
- uid: GTA.InteriorProxy
  commentId: T:GTA.InteriorProxy
  parent: GTA
  isExternal: true
  href: GTA.InteriorProxy.html
  name: InteriorProxy
  nameWithType: InteriorProxy
  fullName: GTA.InteriorProxy
- uid: GTA.Entity.CurrentInteriorRoomKey*
  commentId: Overload:GTA.Entity.CurrentInteriorRoomKey
  isExternal: true
  href: GTA.Entity.html#GTA_Entity_CurrentInteriorRoomKey
  name: CurrentInteriorRoomKey
  nameWithType: Entity.CurrentInteriorRoomKey
  fullName: GTA.Entity.CurrentInteriorRoomKey
