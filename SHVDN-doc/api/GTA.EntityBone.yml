### YamlMime:ManagedReference
items:
- uid: GTA.EntityBone
  commentId: T:GTA.EntityBone
  id: EntityBone
  parent: GTA
  children:
  - GTA.EntityBone.AttachToBone(GTA.EntityBone,System.Boolean,System.Boolean)
  - GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  - GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  - GTA.EntityBone.AttachToBoneYForward(GTA.EntityBone,System.Boolean,System.Boolean)
  - GTA.EntityBone.AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  - GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  - GTA.EntityBone.Equals(System.Object)
  - GTA.EntityBone.ForwardVector
  - GTA.EntityBone.FragmentGroupIndex
  - GTA.EntityBone.GetHashCode
  - GTA.EntityBone.GetOffsetPosition(GTA.Math.Vector3)
  - GTA.EntityBone.GetPositionOffset(GTA.Math.Vector3)
  - GTA.EntityBone.GetRelativeOffsetPosition(GTA.Math.Vector3)
  - GTA.EntityBone.GetRelativePositionOffset(GTA.Math.Vector3)
  - GTA.EntityBone.Index
  - GTA.EntityBone.IsValid
  - GTA.EntityBone.Name
  - GTA.EntityBone.NextSibling
  - GTA.EntityBone.Owner
  - GTA.EntityBone.Parent
  - GTA.EntityBone.Pose
  - GTA.EntityBone.PoseMatrix
  - GTA.EntityBone.PoseQuaternion
  - GTA.EntityBone.PoseRotation
  - GTA.EntityBone.Position
  - GTA.EntityBone.Quaternion
  - GTA.EntityBone.RelativeForwardVector
  - GTA.EntityBone.RelativeMatrix
  - GTA.EntityBone.RelativePosition
  - GTA.EntityBone.RelativeQuaternion
  - GTA.EntityBone.RelativeRightVector
  - GTA.EntityBone.RelativeRotation
  - GTA.EntityBone.RelativeUpVector
  - GTA.EntityBone.RightVector
  - GTA.EntityBone.Rotation
  - GTA.EntityBone.Tag
  - GTA.EntityBone.UpVector
  - GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.Bone)
  - GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.EntityBone)
  - GTA.EntityBone.op_Implicit(GTA.EntityBone)~GTA.Native.InputArgument
  - GTA.EntityBone.op_Implicit(GTA.EntityBone)~System.Int32
  - GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.Bone)
  - GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.EntityBone)
  langs:
  - csharp
  - vb
  name: EntityBone
  nameWithType: EntityBone
  fullName: GTA.EntityBone
  type: Class
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public class EntityBone
    content.vb: Public Class EntityBone
  inheritance:
  - System.Object
  derivedClasses:
  - GTA.PedBone
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: GTA.EntityBone.GetOffsetPosition(GTA.Math.Vector3)
  commentId: M:GTA.EntityBone.GetOffsetPosition(GTA.Math.Vector3)
  id: GetOffsetPosition(GTA.Math.Vector3)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: GetOffsetPosition(Vector3)
  nameWithType: EntityBone.GetOffsetPosition(Vector3)
  fullName: GTA.EntityBone.GetOffsetPosition(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetOffsetPosition(Vector3 offset)
    parameters:
    - id: offset
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetOffsetPosition(offset As Vector3) As Vector3
  overload: GTA.EntityBone.GetOffsetPosition*
- uid: GTA.EntityBone.GetRelativeOffsetPosition(GTA.Math.Vector3)
  commentId: M:GTA.EntityBone.GetRelativeOffsetPosition(GTA.Math.Vector3)
  id: GetRelativeOffsetPosition(GTA.Math.Vector3)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: GetRelativeOffsetPosition(Vector3)
  nameWithType: EntityBone.GetRelativeOffsetPosition(Vector3)
  fullName: GTA.EntityBone.GetRelativeOffsetPosition(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetRelativeOffsetPosition(Vector3 offset)
    parameters:
    - id: offset
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetRelativeOffsetPosition(offset As Vector3) As Vector3
  overload: GTA.EntityBone.GetRelativeOffsetPosition*
- uid: GTA.EntityBone.GetPositionOffset(GTA.Math.Vector3)
  commentId: M:GTA.EntityBone.GetPositionOffset(GTA.Math.Vector3)
  id: GetPositionOffset(GTA.Math.Vector3)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: GetPositionOffset(Vector3)
  nameWithType: EntityBone.GetPositionOffset(Vector3)
  fullName: GTA.EntityBone.GetPositionOffset(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetPositionOffset(Vector3 worldCoords)
    parameters:
    - id: worldCoords
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetPositionOffset(worldCoords As Vector3) As Vector3
  overload: GTA.EntityBone.GetPositionOffset*
- uid: GTA.EntityBone.GetRelativePositionOffset(GTA.Math.Vector3)
  commentId: M:GTA.EntityBone.GetRelativePositionOffset(GTA.Math.Vector3)
  id: GetRelativePositionOffset(GTA.Math.Vector3)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: GetRelativePositionOffset(Vector3)
  nameWithType: EntityBone.GetRelativePositionOffset(Vector3)
  fullName: GTA.EntityBone.GetRelativePositionOffset(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 GetRelativePositionOffset(Vector3 entityOffset)
    parameters:
    - id: entityOffset
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Function GetRelativePositionOffset(entityOffset As Vector3) As Vector3
  overload: GTA.EntityBone.GetRelativePositionOffset*
- uid: GTA.EntityBone.AttachToBone(GTA.EntityBone,System.Boolean,System.Boolean)
  commentId: M:GTA.EntityBone.AttachToBone(GTA.EntityBone,System.Boolean,System.Boolean)
  id: AttachToBone(GTA.EntityBone,System.Boolean,System.Boolean)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: AttachToBone(EntityBone, bool, bool)
  nameWithType: EntityBone.AttachToBone(EntityBone, bool, bool)
  fullName: GTA.EntityBone.AttachToBone(GTA.EntityBone, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToBone(EntityBone boneOfSecondEntity, bool activeCollisions = true, bool useBasicAttachIfPed = false)
    parameters:
    - id: boneOfSecondEntity
      type: GTA.EntityBone
    - id: activeCollisions
      type: System.Boolean
    - id: useBasicAttachIfPed
      type: System.Boolean
    content.vb: Public Sub AttachToBone(boneOfSecondEntity As EntityBone, activeCollisions As Boolean = True, useBasicAttachIfPed As Boolean = False)
  overload: GTA.EntityBone.AttachToBone*
  nameWithType.vb: EntityBone.AttachToBone(EntityBone, Boolean, Boolean)
  fullName.vb: GTA.EntityBone.AttachToBone(GTA.EntityBone, Boolean, Boolean)
  name.vb: AttachToBone(EntityBone, Boolean, Boolean)
- uid: GTA.EntityBone.AttachToBoneYForward(GTA.EntityBone,System.Boolean,System.Boolean)
  commentId: M:GTA.EntityBone.AttachToBoneYForward(GTA.EntityBone,System.Boolean,System.Boolean)
  id: AttachToBoneYForward(GTA.EntityBone,System.Boolean,System.Boolean)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: AttachToBoneYForward(EntityBone, bool, bool)
  nameWithType: EntityBone.AttachToBoneYForward(EntityBone, bool, bool)
  fullName: GTA.EntityBone.AttachToBoneYForward(GTA.EntityBone, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToBoneYForward(EntityBone boneOfSecondEntity, bool activeCollisions = true, bool useBasicAttachIfPed = false)
    parameters:
    - id: boneOfSecondEntity
      type: GTA.EntityBone
    - id: activeCollisions
      type: System.Boolean
    - id: useBasicAttachIfPed
      type: System.Boolean
    content.vb: Public Sub AttachToBoneYForward(boneOfSecondEntity As EntityBone, activeCollisions As Boolean = True, useBasicAttachIfPed As Boolean = False)
  overload: GTA.EntityBone.AttachToBoneYForward*
  nameWithType.vb: EntityBone.AttachToBoneYForward(EntityBone, Boolean, Boolean)
  fullName.vb: GTA.EntityBone.AttachToBoneYForward(GTA.EntityBone, Boolean, Boolean)
  name.vb: AttachToBoneYForward(EntityBone, Boolean, Boolean)
- uid: GTA.EntityBone.AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  commentId: M:GTA.EntityBone.AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  id: AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: AttachToEntityPhysically(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  nameWithType: EntityBone.AttachToEntityPhysically(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  fullName: GTA.EntityBone.AttachToEntityPhysically(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToEntityPhysically(Entity secondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ)
    parameters:
    - id: secondEntity
      type: GTA.Entity
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    content.vb: Public Sub AttachToEntityPhysically(secondEntity As Entity, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ)
  overload: GTA.EntityBone.AttachToEntityPhysically*
  nameWithType.vb: EntityBone.AttachToEntityPhysically(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
  fullName.vb: GTA.EntityBone.AttachToEntityPhysically(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder)
  name.vb: AttachToEntityPhysically(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
- uid: GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  commentId: M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  id: AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  nameWithType: EntityBone.AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder)
  fullName: GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToBonePhysically(EntityBone boneOfSecondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ)
    parameters:
    - id: boneOfSecondEntity
      type: GTA.EntityBone
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    content.vb: Public Sub AttachToBonePhysically(boneOfSecondEntity As EntityBone, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ)
  overload: GTA.EntityBone.AttachToBonePhysically*
  nameWithType.vb: EntityBone.AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
  fullName.vb: GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder)
  name.vb: AttachToBonePhysically(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder)
- uid: GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  commentId: M:GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  id: AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: AttachToEntityPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  nameWithType: EntityBone.AttachToEntityPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  fullName: GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToEntityPhysicallyOverrideInverseMass(Entity secondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ, float invMassScaleA = 1, float invMassScaleB = 1)
    parameters:
    - id: secondEntity
      type: GTA.Entity
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    - id: invMassScaleA
      type: System.Single
    - id: invMassScaleB
      type: System.Single
    content.vb: Public Sub AttachToEntityPhysicallyOverrideInverseMass(secondEntity As Entity, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ, invMassScaleA As Single = 1, invMassScaleB As Single = 1)
  overload: GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass*
  nameWithType.vb: EntityBone.AttachToEntityPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
  fullName.vb: GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder, Single, Single)
  name.vb: AttachToEntityPhysicallyOverrideInverseMass(Entity, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
- uid: GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  commentId: M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  id: AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  nameWithType: EntityBone.AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, float, bool, bool, bool, bool, EulerRotationOrder, float, float)
  fullName: GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, GTA.EulerRotationOrder, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AttachToBonePhysicallyOverrideInverseMass(EntityBone boneOfSecondEntity, Vector3 secondEntityOffset, Vector3 thisEntityOffset, Vector3 rotation, float physicalStrength, bool constrainRotation, bool doInitialWarp = true, bool collideWithEntity = false, bool addInitialSeparation = true, EulerRotationOrder rotationOrder = EulerRotationOrder.YXZ, float invMassScaleA = 1, float invMassScaleB = 1)
    parameters:
    - id: boneOfSecondEntity
      type: GTA.EntityBone
    - id: secondEntityOffset
      type: GTA.Math.Vector3
    - id: thisEntityOffset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: physicalStrength
      type: System.Single
    - id: constrainRotation
      type: System.Boolean
    - id: doInitialWarp
      type: System.Boolean
    - id: collideWithEntity
      type: System.Boolean
    - id: addInitialSeparation
      type: System.Boolean
    - id: rotationOrder
      type: GTA.EulerRotationOrder
    - id: invMassScaleA
      type: System.Single
    - id: invMassScaleB
      type: System.Single
    content.vb: Public Sub AttachToBonePhysicallyOverrideInverseMass(boneOfSecondEntity As EntityBone, secondEntityOffset As Vector3, thisEntityOffset As Vector3, rotation As Vector3, physicalStrength As Single, constrainRotation As Boolean, doInitialWarp As Boolean = True, collideWithEntity As Boolean = False, addInitialSeparation As Boolean = True, rotationOrder As EulerRotationOrder = EulerRotationOrder.YXZ, invMassScaleA As Single = 1, invMassScaleB As Single = 1)
  overload: GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass*
  nameWithType.vb: EntityBone.AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
  fullName.vb: GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, GTA.EulerRotationOrder, Single, Single)
  name.vb: AttachToBonePhysicallyOverrideInverseMass(EntityBone, Vector3, Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, EulerRotationOrder, Single, Single)
- uid: GTA.EntityBone.Equals(System.Object)
  commentId: M:GTA.EntityBone.Equals(System.Object)
  id: Equals(System.Object)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: EntityBone.Equals(object)
  fullName: GTA.EntityBone.Equals(object)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: GTA.EntityBone.Equals*
  nameWithType.vb: EntityBone.Equals(Object)
  fullName.vb: GTA.EntityBone.Equals(Object)
  name.vb: Equals(Object)
- uid: GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.EntityBone)
  commentId: M:GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.EntityBone)
  id: op_Equality(GTA.EntityBone,GTA.EntityBone)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: operator ==(EntityBone, EntityBone)
  nameWithType: EntityBone.operator ==(EntityBone, EntityBone)
  fullName: GTA.EntityBone.operator ==(GTA.EntityBone, GTA.EntityBone)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool operator ==(EntityBone left, EntityBone right)
    parameters:
    - id: left
      type: GTA.EntityBone
    - id: right
      type: GTA.EntityBone
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As EntityBone, right As EntityBone) As Boolean
  overload: GTA.EntityBone.op_Equality*
  nameWithType.vb: EntityBone.=(EntityBone, EntityBone)
  fullName.vb: GTA.EntityBone.=(GTA.EntityBone, GTA.EntityBone)
  name.vb: =(EntityBone, EntityBone)
- uid: GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.EntityBone)
  commentId: M:GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.EntityBone)
  id: op_Inequality(GTA.EntityBone,GTA.EntityBone)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: operator !=(EntityBone, EntityBone)
  nameWithType: EntityBone.operator !=(EntityBone, EntityBone)
  fullName: GTA.EntityBone.operator !=(GTA.EntityBone, GTA.EntityBone)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool operator !=(EntityBone left, EntityBone right)
    parameters:
    - id: left
      type: GTA.EntityBone
    - id: right
      type: GTA.EntityBone
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As EntityBone, right As EntityBone) As Boolean
  overload: GTA.EntityBone.op_Inequality*
  nameWithType.vb: EntityBone.<>(EntityBone, EntityBone)
  fullName.vb: GTA.EntityBone.<>(GTA.EntityBone, GTA.EntityBone)
  name.vb: <>(EntityBone, EntityBone)
- uid: GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.Bone)
  commentId: M:GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.Bone)
  id: op_Equality(GTA.EntityBone,GTA.Bone)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: operator ==(EntityBone, Bone)
  nameWithType: EntityBone.operator ==(EntityBone, Bone)
  fullName: GTA.EntityBone.operator ==(GTA.EntityBone, GTA.Bone)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool operator ==(EntityBone entityBone, Bone boneId)
    parameters:
    - id: entityBone
      type: GTA.EntityBone
    - id: boneId
      type: GTA.Bone
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(entityBone As EntityBone, boneId As Bone) As Boolean
  overload: GTA.EntityBone.op_Equality*
  nameWithType.vb: EntityBone.=(EntityBone, Bone)
  fullName.vb: GTA.EntityBone.=(GTA.EntityBone, GTA.Bone)
  name.vb: =(EntityBone, Bone)
- uid: GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.Bone)
  commentId: M:GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.Bone)
  id: op_Inequality(GTA.EntityBone,GTA.Bone)
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: operator !=(EntityBone, Bone)
  nameWithType: EntityBone.operator !=(EntityBone, Bone)
  fullName: GTA.EntityBone.operator !=(GTA.EntityBone, GTA.Bone)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool operator !=(EntityBone entityBone, Bone boneId)
    parameters:
    - id: entityBone
      type: GTA.EntityBone
    - id: boneId
      type: GTA.Bone
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(entityBone As EntityBone, boneId As Bone) As Boolean
  overload: GTA.EntityBone.op_Inequality*
  nameWithType.vb: EntityBone.<>(EntityBone, Bone)
  fullName.vb: GTA.EntityBone.<>(GTA.EntityBone, GTA.Bone)
  name.vb: <>(EntityBone, Bone)
- uid: GTA.EntityBone.op_Implicit(GTA.EntityBone)~System.Int32
  commentId: M:GTA.EntityBone.op_Implicit(GTA.EntityBone)~System.Int32
  id: op_Implicit(GTA.EntityBone)~System.Int32
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: implicit operator int(EntityBone)
  nameWithType: EntityBone.implicit operator int(EntityBone)
  fullName: GTA.EntityBone.implicit operator int(GTA.EntityBone)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static implicit operator int(EntityBone entityBone)
    parameters:
    - id: entityBone
      type: GTA.EntityBone
    return:
      type: System.Int32
    content.vb: Public Shared Widening Operator CType(entityBone As EntityBone) As Integer
  overload: GTA.EntityBone.op_Implicit*
  nameWithType.vb: EntityBone.CType(EntityBone)
  fullName.vb: GTA.EntityBone.CType(GTA.EntityBone)
  name.vb: CType(EntityBone)
- uid: GTA.EntityBone.op_Implicit(GTA.EntityBone)~GTA.Native.InputArgument
  commentId: M:GTA.EntityBone.op_Implicit(GTA.EntityBone)~GTA.Native.InputArgument
  id: op_Implicit(GTA.EntityBone)~GTA.Native.InputArgument
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: implicit operator InputArgument(EntityBone)
  nameWithType: EntityBone.implicit operator InputArgument(EntityBone)
  fullName: GTA.EntityBone.implicit operator GTA.Native.InputArgument(GTA.EntityBone)
  type: Operator
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static implicit operator InputArgument(EntityBone entityBone)
    parameters:
    - id: entityBone
      type: GTA.EntityBone
    return:
      type: GTA.Native.InputArgument
    content.vb: Public Shared Widening Operator CType(entityBone As EntityBone) As InputArgument
  overload: GTA.EntityBone.op_Implicit*
  nameWithType.vb: EntityBone.CType(EntityBone)
  fullName.vb: GTA.EntityBone.CType(GTA.EntityBone)
  name.vb: CType(EntityBone)
- uid: GTA.EntityBone.GetHashCode
  commentId: M:GTA.EntityBone.GetHashCode
  id: GetHashCode
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: EntityBone.GetHashCode()
  fullName: GTA.EntityBone.GetHashCode()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: GTA.EntityBone.GetHashCode*
- uid: GTA.EntityBone.Index
  commentId: P:GTA.EntityBone.Index
  id: Index
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: EntityBone.Index
  fullName: GTA.EntityBone.Index
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int Index { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Index As Integer
  overload: GTA.EntityBone.Index*
- uid: GTA.EntityBone.Tag
  commentId: P:GTA.EntityBone.Tag
  id: Tag
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Tag
  nameWithType: EntityBone.Tag
  fullName: GTA.EntityBone.Tag
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int Tag { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Tag As Integer
  overload: GTA.EntityBone.Tag*
- uid: GTA.EntityBone.Owner
  commentId: P:GTA.EntityBone.Owner
  id: Owner
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: EntityBone.Owner
  fullName: GTA.EntityBone.Owner
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Entity Owner { get; }
    parameters: []
    return:
      type: GTA.Entity
    content.vb: Public ReadOnly Property Owner As Entity
  overload: GTA.EntityBone.Owner*
- uid: GTA.EntityBone.NextSibling
  commentId: P:GTA.EntityBone.NextSibling
  id: NextSibling
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: NextSibling
  nameWithType: EntityBone.NextSibling
  fullName: GTA.EntityBone.NextSibling
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public EntityBone NextSibling { get; }
    parameters: []
    return:
      type: GTA.EntityBone
    content.vb: Public ReadOnly Property NextSibling As EntityBone
  overload: GTA.EntityBone.NextSibling*
- uid: GTA.EntityBone.Parent
  commentId: P:GTA.EntityBone.Parent
  id: Parent
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: EntityBone.Parent
  fullName: GTA.EntityBone.Parent
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public EntityBone Parent { get; }
    parameters: []
    return:
      type: GTA.EntityBone
    content.vb: Public ReadOnly Property Parent As EntityBone
  overload: GTA.EntityBone.Parent*
- uid: GTA.EntityBone.Name
  commentId: P:GTA.EntityBone.Name
  id: Name
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EntityBone.Name
  fullName: GTA.EntityBone.Name
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: GTA.EntityBone.Name*
- uid: GTA.EntityBone.IsValid
  commentId: P:GTA.EntityBone.IsValid
  id: IsValid
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: EntityBone.IsValid
  fullName: GTA.EntityBone.IsValid
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: GTA.EntityBone.IsValid*
- uid: GTA.EntityBone.PoseMatrix
  commentId: P:GTA.EntityBone.PoseMatrix
  id: PoseMatrix
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: PoseMatrix
  nameWithType: EntityBone.PoseMatrix
  fullName: GTA.EntityBone.PoseMatrix
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Matrix PoseMatrix { get; set; }
    parameters: []
    return:
      type: GTA.Math.Matrix
    content.vb: Public Property PoseMatrix As Matrix
  overload: GTA.EntityBone.PoseMatrix*
- uid: GTA.EntityBone.RelativeMatrix
  commentId: P:GTA.EntityBone.RelativeMatrix
  id: RelativeMatrix
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativeMatrix
  nameWithType: EntityBone.RelativeMatrix
  fullName: GTA.EntityBone.RelativeMatrix
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Matrix RelativeMatrix { get; set; }
    parameters: []
    return:
      type: GTA.Math.Matrix
    content.vb: Public Property RelativeMatrix As Matrix
  overload: GTA.EntityBone.RelativeMatrix*
- uid: GTA.EntityBone.Pose
  commentId: P:GTA.EntityBone.Pose
  id: Pose
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Pose
  nameWithType: EntityBone.Pose
  fullName: GTA.EntityBone.Pose
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 Pose { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property Pose As Vector3
  overload: GTA.EntityBone.Pose*
- uid: GTA.EntityBone.PoseQuaternion
  commentId: P:GTA.EntityBone.PoseQuaternion
  id: PoseQuaternion
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: PoseQuaternion
  nameWithType: EntityBone.PoseQuaternion
  fullName: GTA.EntityBone.PoseQuaternion
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Quaternion PoseQuaternion { get; set; }
    parameters: []
    return:
      type: GTA.Math.Quaternion
    content.vb: Public Property PoseQuaternion As Quaternion
  overload: GTA.EntityBone.PoseQuaternion*
- uid: GTA.EntityBone.PoseRotation
  commentId: P:GTA.EntityBone.PoseRotation
  id: PoseRotation
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: PoseRotation
  nameWithType: EntityBone.PoseRotation
  fullName: GTA.EntityBone.PoseRotation
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 PoseRotation { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property PoseRotation As Vector3
  overload: GTA.EntityBone.PoseRotation*
- uid: GTA.EntityBone.Position
  commentId: P:GTA.EntityBone.Position
  id: Position
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: EntityBone.Position
  fullName: GTA.EntityBone.Position
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 Position { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property Position As Vector3
  overload: GTA.EntityBone.Position*
- uid: GTA.EntityBone.Quaternion
  commentId: P:GTA.EntityBone.Quaternion
  id: Quaternion
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Quaternion
  nameWithType: EntityBone.Quaternion
  fullName: GTA.EntityBone.Quaternion
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Quaternion Quaternion { get; }
    parameters: []
    return:
      type: GTA.Math.Quaternion
    content.vb: Public ReadOnly Property Quaternion As Quaternion
  overload: GTA.EntityBone.Quaternion*
- uid: GTA.EntityBone.Rotation
  commentId: P:GTA.EntityBone.Rotation
  id: Rotation
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: Rotation
  nameWithType: EntityBone.Rotation
  fullName: GTA.EntityBone.Rotation
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 Rotation { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property Rotation As Vector3
  overload: GTA.EntityBone.Rotation*
- uid: GTA.EntityBone.RelativePosition
  commentId: P:GTA.EntityBone.RelativePosition
  id: RelativePosition
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativePosition
  nameWithType: EntityBone.RelativePosition
  fullName: GTA.EntityBone.RelativePosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RelativePosition { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property RelativePosition As Vector3
  overload: GTA.EntityBone.RelativePosition*
- uid: GTA.EntityBone.RelativeQuaternion
  commentId: P:GTA.EntityBone.RelativeQuaternion
  id: RelativeQuaternion
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativeQuaternion
  nameWithType: EntityBone.RelativeQuaternion
  fullName: GTA.EntityBone.RelativeQuaternion
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Quaternion RelativeQuaternion { get; set; }
    parameters: []
    return:
      type: GTA.Math.Quaternion
    content.vb: Public Property RelativeQuaternion As Quaternion
  overload: GTA.EntityBone.RelativeQuaternion*
- uid: GTA.EntityBone.RelativeRotation
  commentId: P:GTA.EntityBone.RelativeRotation
  id: RelativeRotation
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativeRotation
  nameWithType: EntityBone.RelativeRotation
  fullName: GTA.EntityBone.RelativeRotation
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RelativeRotation { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Property RelativeRotation As Vector3
  overload: GTA.EntityBone.RelativeRotation*
- uid: GTA.EntityBone.UpVector
  commentId: P:GTA.EntityBone.UpVector
  id: UpVector
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: UpVector
  nameWithType: EntityBone.UpVector
  fullName: GTA.EntityBone.UpVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 UpVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property UpVector As Vector3
  overload: GTA.EntityBone.UpVector*
- uid: GTA.EntityBone.RightVector
  commentId: P:GTA.EntityBone.RightVector
  id: RightVector
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RightVector
  nameWithType: EntityBone.RightVector
  fullName: GTA.EntityBone.RightVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RightVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RightVector As Vector3
  overload: GTA.EntityBone.RightVector*
- uid: GTA.EntityBone.ForwardVector
  commentId: P:GTA.EntityBone.ForwardVector
  id: ForwardVector
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: ForwardVector
  nameWithType: EntityBone.ForwardVector
  fullName: GTA.EntityBone.ForwardVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 ForwardVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property ForwardVector As Vector3
  overload: GTA.EntityBone.ForwardVector*
- uid: GTA.EntityBone.RelativeUpVector
  commentId: P:GTA.EntityBone.RelativeUpVector
  id: RelativeUpVector
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativeUpVector
  nameWithType: EntityBone.RelativeUpVector
  fullName: GTA.EntityBone.RelativeUpVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RelativeUpVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RelativeUpVector As Vector3
  overload: GTA.EntityBone.RelativeUpVector*
- uid: GTA.EntityBone.RelativeRightVector
  commentId: P:GTA.EntityBone.RelativeRightVector
  id: RelativeRightVector
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativeRightVector
  nameWithType: EntityBone.RelativeRightVector
  fullName: GTA.EntityBone.RelativeRightVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RelativeRightVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RelativeRightVector As Vector3
  overload: GTA.EntityBone.RelativeRightVector*
- uid: GTA.EntityBone.RelativeForwardVector
  commentId: P:GTA.EntityBone.RelativeForwardVector
  id: RelativeForwardVector
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: RelativeForwardVector
  nameWithType: EntityBone.RelativeForwardVector
  fullName: GTA.EntityBone.RelativeForwardVector
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public Vector3 RelativeForwardVector { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public ReadOnly Property RelativeForwardVector As Vector3
  overload: GTA.EntityBone.RelativeForwardVector*
- uid: GTA.EntityBone.FragmentGroupIndex
  commentId: P:GTA.EntityBone.FragmentGroupIndex
  id: FragmentGroupIndex
  parent: GTA.EntityBone
  langs:
  - csharp
  - vb
  name: FragmentGroupIndex
  nameWithType: EntityBone.FragmentGroupIndex
  fullName: GTA.EntityBone.FragmentGroupIndex
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public int FragmentGroupIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FragmentGroupIndex As Integer
  overload: GTA.EntityBone.FragmentGroupIndex*
references:
- uid: GTA
  commentId: N:GTA
  isExternal: true
  href: GTA.html
  name: GTA
  nameWithType: GTA
  fullName: GTA
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: GTA.EntityBone.GetOffsetPosition*
  commentId: Overload:GTA.EntityBone.GetOffsetPosition
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_GetOffsetPosition_GTA_Math_Vector3_
  name: GetOffsetPosition
  nameWithType: EntityBone.GetOffsetPosition
  fullName: GTA.EntityBone.GetOffsetPosition
- uid: GTA.Math.Vector3
  commentId: T:GTA.Math.Vector3
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Vector3.html
  name: Vector3
  nameWithType: Vector3
  fullName: GTA.Math.Vector3
- uid: GTA.Math
  commentId: N:GTA.Math
  isExternal: true
  href: GTA.html
  name: GTA.Math
  nameWithType: GTA.Math
  fullName: GTA.Math
  spec.csharp:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
  spec.vb:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
- uid: GTA.EntityBone.GetRelativeOffsetPosition*
  commentId: Overload:GTA.EntityBone.GetRelativeOffsetPosition
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_GetRelativeOffsetPosition_GTA_Math_Vector3_
  name: GetRelativeOffsetPosition
  nameWithType: EntityBone.GetRelativeOffsetPosition
  fullName: GTA.EntityBone.GetRelativeOffsetPosition
- uid: GTA.EntityBone.GetPositionOffset*
  commentId: Overload:GTA.EntityBone.GetPositionOffset
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_GetPositionOffset_GTA_Math_Vector3_
  name: GetPositionOffset
  nameWithType: EntityBone.GetPositionOffset
  fullName: GTA.EntityBone.GetPositionOffset
- uid: GTA.EntityBone.GetRelativePositionOffset*
  commentId: Overload:GTA.EntityBone.GetRelativePositionOffset
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_GetRelativePositionOffset_GTA_Math_Vector3_
  name: GetRelativePositionOffset
  nameWithType: EntityBone.GetRelativePositionOffset
  fullName: GTA.EntityBone.GetRelativePositionOffset
- uid: GTA.EntityBone.AttachToBone*
  commentId: Overload:GTA.EntityBone.AttachToBone
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_AttachToBone_GTA_EntityBone_System_Boolean_System_Boolean_
  name: AttachToBone
  nameWithType: EntityBone.AttachToBone
  fullName: GTA.EntityBone.AttachToBone
- uid: GTA.EntityBone
  commentId: T:GTA.EntityBone
  parent: GTA
  isExternal: true
  href: GTA.EntityBone.html
  name: EntityBone
  nameWithType: EntityBone
  fullName: GTA.EntityBone
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: GTA.EntityBone.AttachToBoneYForward*
  commentId: Overload:GTA.EntityBone.AttachToBoneYForward
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_AttachToBoneYForward_GTA_EntityBone_System_Boolean_System_Boolean_
  name: AttachToBoneYForward
  nameWithType: EntityBone.AttachToBoneYForward
  fullName: GTA.EntityBone.AttachToBoneYForward
- uid: GTA.EntityBone.AttachToEntityPhysically*
  commentId: Overload:GTA.EntityBone.AttachToEntityPhysically
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_AttachToEntityPhysically_GTA_Entity_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_
  name: AttachToEntityPhysically
  nameWithType: EntityBone.AttachToEntityPhysically
  fullName: GTA.EntityBone.AttachToEntityPhysically
- uid: GTA.Entity
  commentId: T:GTA.Entity
  parent: GTA
  isExternal: true
  href: GTA.Entity.html
  name: Entity
  nameWithType: Entity
  fullName: GTA.Entity
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: GTA.EulerRotationOrder
  commentId: T:GTA.EulerRotationOrder
  parent: GTA
  isExternal: true
  href: GTA.EulerRotationOrder.html
  name: EulerRotationOrder
  nameWithType: EulerRotationOrder
  fullName: GTA.EulerRotationOrder
- uid: GTA.EntityBone.AttachToBonePhysically*
  commentId: Overload:GTA.EntityBone.AttachToBonePhysically
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_AttachToBonePhysically_GTA_EntityBone_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_
  name: AttachToBonePhysically
  nameWithType: EntityBone.AttachToBonePhysically
  fullName: GTA.EntityBone.AttachToBonePhysically
- uid: GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass*
  commentId: Overload:GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_AttachToEntityPhysicallyOverrideInverseMass_GTA_Entity_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_System_Single_System_Single_
  name: AttachToEntityPhysicallyOverrideInverseMass
  nameWithType: EntityBone.AttachToEntityPhysicallyOverrideInverseMass
  fullName: GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass
- uid: GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass*
  commentId: Overload:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_AttachToBonePhysicallyOverrideInverseMass_GTA_EntityBone_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_GTA_EulerRotationOrder_System_Single_System_Single_
  name: AttachToBonePhysicallyOverrideInverseMass
  nameWithType: EntityBone.AttachToBonePhysicallyOverrideInverseMass
  fullName: GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: GTA.EntityBone.Equals*
  commentId: Overload:GTA.EntityBone.Equals
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Equals_System_Object_
  name: Equals
  nameWithType: EntityBone.Equals
  fullName: GTA.EntityBone.Equals
- uid: GTA.EntityBone.op_Equality*
  commentId: Overload:GTA.EntityBone.op_Equality
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_op_Equality_GTA_EntityBone_GTA_EntityBone_
  name: operator ==
  nameWithType: EntityBone.operator ==
  fullName: GTA.EntityBone.operator ==
  nameWithType.vb: EntityBone.=
  fullName.vb: GTA.EntityBone.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: GTA.EntityBone.op_Equality*
    name: ==
    isExternal: true
    href: GTA.EntityBone.html#GTA_EntityBone_op_Equality_GTA_EntityBone_GTA_EntityBone_
- uid: GTA.EntityBone.op_Inequality*
  commentId: Overload:GTA.EntityBone.op_Inequality
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_op_Inequality_GTA_EntityBone_GTA_EntityBone_
  name: operator !=
  nameWithType: EntityBone.operator !=
  fullName: GTA.EntityBone.operator !=
  nameWithType.vb: EntityBone.<>
  fullName.vb: GTA.EntityBone.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: GTA.EntityBone.op_Inequality*
    name: '!='
    isExternal: true
    href: GTA.EntityBone.html#GTA_EntityBone_op_Inequality_GTA_EntityBone_GTA_EntityBone_
- uid: GTA.Bone
  commentId: T:GTA.Bone
  parent: GTA
  isExternal: true
  href: GTA.Bone.html
  name: Bone
  nameWithType: Bone
  fullName: GTA.Bone
- uid: GTA.EntityBone.op_Implicit*
  commentId: Overload:GTA.EntityBone.op_Implicit
  name: implicit operator
  nameWithType: EntityBone.implicit operator
  fullName: GTA.EntityBone.implicit operator
  nameWithType.vb: EntityBone.CType
  fullName.vb: GTA.EntityBone.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: GTA.Native.InputArgument
  commentId: T:GTA.Native.InputArgument
  parent: GTA.Native
  isExternal: true
  href: GTA.Native.InputArgument.html
  name: InputArgument
  nameWithType: InputArgument
  fullName: GTA.Native.InputArgument
- uid: GTA.Native
  commentId: N:GTA.Native
  isExternal: true
  href: GTA.html
  name: GTA.Native
  nameWithType: GTA.Native
  fullName: GTA.Native
  spec.csharp:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Native
    name: Native
    isExternal: true
    href: GTA.Native.html
  spec.vb:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Native
    name: Native
    isExternal: true
    href: GTA.Native.html
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: GTA.EntityBone.GetHashCode*
  commentId: Overload:GTA.EntityBone.GetHashCode
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_GetHashCode
  name: GetHashCode
  nameWithType: EntityBone.GetHashCode
  fullName: GTA.EntityBone.GetHashCode
- uid: GTA.EntityBone.Index*
  commentId: Overload:GTA.EntityBone.Index
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Index
  name: Index
  nameWithType: EntityBone.Index
  fullName: GTA.EntityBone.Index
- uid: GTA.EntityBone.Tag*
  commentId: Overload:GTA.EntityBone.Tag
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Tag
  name: Tag
  nameWithType: EntityBone.Tag
  fullName: GTA.EntityBone.Tag
- uid: GTA.EntityBone.Owner*
  commentId: Overload:GTA.EntityBone.Owner
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Owner
  name: Owner
  nameWithType: EntityBone.Owner
  fullName: GTA.EntityBone.Owner
- uid: GTA.EntityBone.NextSibling*
  commentId: Overload:GTA.EntityBone.NextSibling
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_NextSibling
  name: NextSibling
  nameWithType: EntityBone.NextSibling
  fullName: GTA.EntityBone.NextSibling
- uid: GTA.EntityBone.Parent*
  commentId: Overload:GTA.EntityBone.Parent
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Parent
  name: Parent
  nameWithType: EntityBone.Parent
  fullName: GTA.EntityBone.Parent
- uid: GTA.EntityBone.Name*
  commentId: Overload:GTA.EntityBone.Name
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Name
  name: Name
  nameWithType: EntityBone.Name
  fullName: GTA.EntityBone.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: GTA.EntityBone.IsValid*
  commentId: Overload:GTA.EntityBone.IsValid
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_IsValid
  name: IsValid
  nameWithType: EntityBone.IsValid
  fullName: GTA.EntityBone.IsValid
- uid: GTA.EntityBone.PoseMatrix*
  commentId: Overload:GTA.EntityBone.PoseMatrix
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_PoseMatrix
  name: PoseMatrix
  nameWithType: EntityBone.PoseMatrix
  fullName: GTA.EntityBone.PoseMatrix
- uid: GTA.Math.Matrix
  commentId: T:GTA.Math.Matrix
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Matrix.html
  name: Matrix
  nameWithType: Matrix
  fullName: GTA.Math.Matrix
- uid: GTA.EntityBone.RelativeMatrix*
  commentId: Overload:GTA.EntityBone.RelativeMatrix
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativeMatrix
  name: RelativeMatrix
  nameWithType: EntityBone.RelativeMatrix
  fullName: GTA.EntityBone.RelativeMatrix
- uid: GTA.EntityBone.Pose*
  commentId: Overload:GTA.EntityBone.Pose
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Pose
  name: Pose
  nameWithType: EntityBone.Pose
  fullName: GTA.EntityBone.Pose
- uid: GTA.EntityBone.PoseQuaternion*
  commentId: Overload:GTA.EntityBone.PoseQuaternion
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_PoseQuaternion
  name: PoseQuaternion
  nameWithType: EntityBone.PoseQuaternion
  fullName: GTA.EntityBone.PoseQuaternion
- uid: GTA.Math.Quaternion
  commentId: T:GTA.Math.Quaternion
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Quaternion.html
  name: Quaternion
  nameWithType: Quaternion
  fullName: GTA.Math.Quaternion
- uid: GTA.EntityBone.PoseRotation*
  commentId: Overload:GTA.EntityBone.PoseRotation
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_PoseRotation
  name: PoseRotation
  nameWithType: EntityBone.PoseRotation
  fullName: GTA.EntityBone.PoseRotation
- uid: GTA.EntityBone.Position*
  commentId: Overload:GTA.EntityBone.Position
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Position
  name: Position
  nameWithType: EntityBone.Position
  fullName: GTA.EntityBone.Position
- uid: GTA.EntityBone.Quaternion*
  commentId: Overload:GTA.EntityBone.Quaternion
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Quaternion
  name: Quaternion
  nameWithType: EntityBone.Quaternion
  fullName: GTA.EntityBone.Quaternion
- uid: GTA.EntityBone.Rotation*
  commentId: Overload:GTA.EntityBone.Rotation
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_Rotation
  name: Rotation
  nameWithType: EntityBone.Rotation
  fullName: GTA.EntityBone.Rotation
- uid: GTA.EntityBone.RelativePosition*
  commentId: Overload:GTA.EntityBone.RelativePosition
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativePosition
  name: RelativePosition
  nameWithType: EntityBone.RelativePosition
  fullName: GTA.EntityBone.RelativePosition
- uid: GTA.EntityBone.RelativeQuaternion*
  commentId: Overload:GTA.EntityBone.RelativeQuaternion
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativeQuaternion
  name: RelativeQuaternion
  nameWithType: EntityBone.RelativeQuaternion
  fullName: GTA.EntityBone.RelativeQuaternion
- uid: GTA.EntityBone.RelativeRotation*
  commentId: Overload:GTA.EntityBone.RelativeRotation
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativeRotation
  name: RelativeRotation
  nameWithType: EntityBone.RelativeRotation
  fullName: GTA.EntityBone.RelativeRotation
- uid: GTA.EntityBone.UpVector*
  commentId: Overload:GTA.EntityBone.UpVector
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_UpVector
  name: UpVector
  nameWithType: EntityBone.UpVector
  fullName: GTA.EntityBone.UpVector
- uid: GTA.EntityBone.RightVector*
  commentId: Overload:GTA.EntityBone.RightVector
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RightVector
  name: RightVector
  nameWithType: EntityBone.RightVector
  fullName: GTA.EntityBone.RightVector
- uid: GTA.EntityBone.ForwardVector*
  commentId: Overload:GTA.EntityBone.ForwardVector
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_ForwardVector
  name: ForwardVector
  nameWithType: EntityBone.ForwardVector
  fullName: GTA.EntityBone.ForwardVector
- uid: GTA.EntityBone.RelativeUpVector*
  commentId: Overload:GTA.EntityBone.RelativeUpVector
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativeUpVector
  name: RelativeUpVector
  nameWithType: EntityBone.RelativeUpVector
  fullName: GTA.EntityBone.RelativeUpVector
- uid: GTA.EntityBone.RelativeRightVector*
  commentId: Overload:GTA.EntityBone.RelativeRightVector
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativeRightVector
  name: RelativeRightVector
  nameWithType: EntityBone.RelativeRightVector
  fullName: GTA.EntityBone.RelativeRightVector
- uid: GTA.EntityBone.RelativeForwardVector*
  commentId: Overload:GTA.EntityBone.RelativeForwardVector
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_RelativeForwardVector
  name: RelativeForwardVector
  nameWithType: EntityBone.RelativeForwardVector
  fullName: GTA.EntityBone.RelativeForwardVector
- uid: GTA.EntityBone.FragmentGroupIndex*
  commentId: Overload:GTA.EntityBone.FragmentGroupIndex
  isExternal: true
  href: GTA.EntityBone.html#GTA_EntityBone_FragmentGroupIndex
  name: FragmentGroupIndex
  nameWithType: EntityBone.FragmentGroupIndex
  fullName: GTA.EntityBone.FragmentGroupIndex
