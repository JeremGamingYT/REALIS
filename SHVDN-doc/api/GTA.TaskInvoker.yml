### YamlMime:ManagedReference
items:
- uid: GTA.TaskInvoker
  commentId: T:GTA.TaskInvoker
  id: TaskInvoker
  parent: GTA
  children:
  - GTA.TaskInvoker.AchieveHeading(System.Single,System.Int32)
  - GTA.TaskInvoker.AimAt(GTA.Entity,System.Int32)
  - GTA.TaskInvoker.AimAt(GTA.Math.Vector3,System.Int32)
  - GTA.TaskInvoker.AimGunAtEntity(GTA.Entity,System.Int32,System.Boolean)
  - GTA.TaskInvoker.AimGunAtPosition(GTA.Math.Vector3,System.Int32,System.Boolean,System.Boolean)
  - GTA.TaskInvoker.Arrest(GTA.Ped)
  - GTA.TaskInvoker.ChaseWithGroundVehicle(GTA.Ped)
  - GTA.TaskInvoker.ChaseWithHelicopter(GTA.Ped,GTA.Math.Vector3)
  - GTA.TaskInvoker.ChaseWithPlane(GTA.Ped,GTA.Math.Vector3)
  - GTA.TaskInvoker.ChatTo(GTA.Ped)
  - GTA.TaskInvoker.ClearAll
  - GTA.TaskInvoker.ClearAllImmediately
  - GTA.TaskInvoker.ClearAnimation(System.String,System.String)
  - GTA.TaskInvoker.ClearLookAt
  - GTA.TaskInvoker.ClearSecondary
  - GTA.TaskInvoker.Climb
  - GTA.TaskInvoker.ClimbLadder
  - GTA.TaskInvoker.ClimbLadder(System.Boolean)
  - GTA.TaskInvoker.Combat(GTA.Ped,GTA.TaskCombatFlags,GTA.TaskThreatResponseFlags)
  - GTA.TaskInvoker.CombatHatedTargetsAroundPed(System.Single,GTA.TaskCombatFlags)
  - GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed(System.Single,System.Int32,GTA.TaskCombatFlags)
  - GTA.TaskInvoker.CombatHatedTargetsInArea(GTA.Math.Vector3,System.Single,GTA.TaskCombatFlags)
  - GTA.TaskInvoker.CombatTimed(GTA.Ped,System.Int32,GTA.TaskCombatFlags)
  - GTA.TaskInvoker.Cower(System.Int32)
  - GTA.TaskInvoker.CruiseWithVehicle(GTA.Vehicle,System.Single,GTA.VehicleDrivingFlags)
  - GTA.TaskInvoker.DriveTo(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.VehicleDrivingFlags,System.Single)
  - GTA.TaskInvoker.EnterAnyVehicle(GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  - GTA.TaskInvoker.EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio},GTA.EnterVehicleFlags,System.String)
  - GTA.TaskInvoker.EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  - GTA.TaskInvoker.EveryoneLeaveVehicle(GTA.Vehicle)
  - GTA.TaskInvoker.FightAgainst(GTA.Ped)
  - GTA.TaskInvoker.FightAgainst(GTA.Ped,System.Int32)
  - GTA.TaskInvoker.FightAgainstHatedTargets(System.Single)
  - GTA.TaskInvoker.FightAgainstHatedTargets(System.Single,System.Int32)
  - GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3,System.Int32)
  - GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3,System.Single,System.Int32,System.Boolean)
  - GTA.TaskInvoker.FleeFrom(GTA.Ped,System.Int32)
  - GTA.TaskInvoker.FleeFrom(GTA.Ped,System.Single,System.Int32)
  - GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)
  - GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,System.Nullable{GTA.PedMoveBlendRatio},System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single)
  - GTA.TaskInvoker.FollowPointRoute(GTA.Math.Vector3[])
  - GTA.TaskInvoker.FollowPointRoute(System.Single,GTA.Math.Vector3[])
  - GTA.TaskInvoker.FollowToOffsetFromEntity(GTA.Entity,GTA.Math.Vector3,System.Single,System.Int32,System.Single,System.Boolean)
  - GTA.TaskInvoker.ForceMotionState(GTA.PedMotionState,System.Boolean)
  - GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,GTA.PedMoveBlendRatio,System.Single,System.Single)
  - GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,System.Single,System.Single)
  - GTA.TaskInvoker.GoTo(GTA.Entity,GTA.Math.Vector3,System.Int32)
  - GTA.TaskInvoker.GoToPlanePreciseVtol(GTA.Vehicle,GTA.Math.Vector3,System.Int32,System.Int32,System.Nullable{System.Single},System.Boolean)
  - GTA.TaskInvoker.GoToPointAnyMeans(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single)
  - GTA.TaskInvoker.GoToPointAnyMeansExtraParams(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single)
  - GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)
  - GTA.TaskInvoker.GoToSubmarineAndStop(GTA.Vehicle,GTA.Math.Vector3,System.Boolean)
  - GTA.TaskInvoker.GuardCurrentPosition
  - GTA.TaskInvoker.HandsUp(System.Int32)
  - GTA.TaskInvoker.HeliChase(GTA.Entity,GTA.Math.Vector3)
  - GTA.TaskInvoker.HeliEscortHeli(GTA.Vehicle,GTA.Vehicle,GTA.Math.Vector3)
  - GTA.TaskInvoker.Jump
  - GTA.TaskInvoker.Jump(System.Boolean,System.Boolean)
  - GTA.TaskInvoker.LandPlane(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Vehicle)
  - GTA.TaskInvoker.LeaveVehicle(GTA.LeaveVehicleFlags)
  - GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle,GTA.LeaveVehicleFlags)
  - GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle,System.Boolean)
  - GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32)
  - GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  - GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32)
  - GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  - GTA.TaskInvoker.OpenVehicleDoor(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio})
  - GTA.TaskInvoker.ParachuteTo(GTA.Math.Vector3)
  - GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.ParkType,System.Single,System.Boolean)
  - GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  - GTA.TaskInvoker.Pause(System.Int32)
  - GTA.TaskInvoker.PerformSequence(GTA.TaskSequence)
  - GTA.TaskInvoker.PlaneChase(GTA.Entity,GTA.Math.Vector3)
  - GTA.TaskInvoker.PlaneChase(GTA.Vehicle,GTA.Math.Vector3,GTA.Math.Vector3)
  - GTA.TaskInvoker.PlaneTaxi(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single)
  - GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)
  - GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single)
  - GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single,System.Boolean,GTA.AnimationIKControlFlags)
  - GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Int32,System.Single)
  - GTA.TaskInvoker.PlayAnimation(System.String,System.String)
  - GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Int32,GTA.AnimationFlags)
  - GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Int32,System.Single)
  - GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Single,System.Int32,GTA.AnimationFlags,System.Single)
  - GTA.TaskInvoker.PlayAnimationAdvanced(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,System.Nullable{GTA.AnimationBlendDelta},System.Nullable{GTA.AnimationBlendDelta},System.Int32,GTA.AnimationFlags,System.Single,GTA.EulerRotationOrder,GTA.AnimationIKControlFlags)
  - GTA.TaskInvoker.PlaySynchronizedScene(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,GTA.SyncedSceneFlags,GTA.RagdollBlockingFlags,System.Nullable{GTA.AnimationBlendDelta},GTA.AnimationIKControlFlags)
  - GTA.TaskInvoker.PutAwayMobilePhone
  - GTA.TaskInvoker.PutAwayParachute
  - GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)
  - GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,GTA.TaskCombatFlags)
  - GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,System.Single)
  - GTA.TaskInvoker.RappelFromHelicopter
  - GTA.TaskInvoker.ReactAndFlee(GTA.Ped)
  - GTA.TaskInvoker.ReloadWeapon
  - GTA.TaskInvoker.RunTo(GTA.Math.Vector3,System.Boolean,System.Int32)
  - GTA.TaskInvoker.ShootAt(GTA.Math.Vector3,System.Int32,GTA.FiringPattern)
  - GTA.TaskInvoker.ShootAt(GTA.Ped,System.Int32,GTA.FiringPattern)
  - GTA.TaskInvoker.ShuffleToNextVehicleSeat(GTA.Vehicle)
  - GTA.TaskInvoker.Skydive
  - GTA.TaskInvoker.SlideTo(GTA.Math.Vector3,System.Single)
  - GTA.TaskInvoker.StandStill(System.Int32)
  - GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  - GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  - GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  - GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  - GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  - GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  - GTA.TaskInvoker.StartMoveNetworkAdvancedByName(System.String,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  - GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  - GTA.TaskInvoker.StartMoveNetworkByName(System.String,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  - GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  - GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  - GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  - GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  - GTA.TaskInvoker.StartScenario(System.String,GTA.Math.Vector3,System.Single)
  - GTA.TaskInvoker.StartScenario(System.String,System.Single)
  - GTA.TaskInvoker.StartScenarioAtPosition(System.String,GTA.Math.Vector3,System.Single,System.Int32,System.Boolean,System.Boolean)
  - GTA.TaskInvoker.StartScenarioInPlace(System.String,System.Int32,System.Boolean)
  - GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  - GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  - GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  - GTA.TaskInvoker.StopScriptedAnimationTask(GTA.CrClipAsset,System.Nullable{GTA.AnimationBlendDelta})
  - GTA.TaskInvoker.SwapWeapon
  - GTA.TaskInvoker.SwapWeapon(System.Boolean)
  - GTA.TaskInvoker.TurnTo(GTA.Entity,System.Int32)
  - GTA.TaskInvoker.TurnTo(GTA.Math.Vector3,System.Int32)
  - GTA.TaskInvoker.UpdateParachuteTarget(GTA.Ped,GTA.Math.Vector3)
  - GTA.TaskInvoker.UseMobilePhone
  - GTA.TaskInvoker.UseMobilePhone(System.Int32)
  - GTA.TaskInvoker.UseParachute
  - GTA.TaskInvoker.VehicleChase(GTA.Ped)
  - GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)
  - GTA.TaskInvoker.VehicleFollow(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Int32)
  - GTA.TaskInvoker.VehicleHeliProtect(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,GTA.HeliMissionFlags)
  - GTA.TaskInvoker.VehicleShootAtPed(GTA.Ped)
  - GTA.TaskInvoker.Wait(System.Int32)
  - GTA.TaskInvoker.Wander(System.Single,System.Boolean)
  - GTA.TaskInvoker.WanderAround
  - GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single)
  - GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single,System.Single,System.Single)
  - GTA.TaskInvoker.WarpIntoVehicle(GTA.Vehicle,GTA.VehicleSeat)
  - GTA.TaskInvoker.WarpOutOfVehicle(GTA.Vehicle)
  langs:
  - csharp
  - vb
  name: TaskInvoker
  nameWithType: TaskInvoker
  fullName: GTA.TaskInvoker
  type: Class
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public sealed class TaskInvoker
    content.vb: Public NotInheritable Class TaskInvoker
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
- uid: GTA.TaskInvoker.AchieveHeading(System.Single,System.Int32)
  commentId: M:GTA.TaskInvoker.AchieveHeading(System.Single,System.Int32)
  id: AchieveHeading(System.Single,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: AchieveHeading(float, int)
  nameWithType: TaskInvoker.AchieveHeading(float, int)
  fullName: GTA.TaskInvoker.AchieveHeading(float, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AchieveHeading(float heading, int timeout = 0)
    parameters:
    - id: heading
      type: System.Single
    - id: timeout
      type: System.Int32
    content.vb: Public Sub AchieveHeading(heading As Single, timeout As Integer = 0)
  overload: GTA.TaskInvoker.AchieveHeading*
  nameWithType.vb: TaskInvoker.AchieveHeading(Single, Integer)
  fullName.vb: GTA.TaskInvoker.AchieveHeading(Single, Integer)
  name.vb: AchieveHeading(Single, Integer)
- uid: GTA.TaskInvoker.AimAt(GTA.Entity,System.Int32)
  commentId: M:GTA.TaskInvoker.AimAt(GTA.Entity,System.Int32)
  id: AimAt(GTA.Entity,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: AimAt(Entity, int)
  nameWithType: TaskInvoker.AimAt(Entity, int)
  fullName: GTA.TaskInvoker.AimAt(GTA.Entity, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use TaskInvoker.AimGunAtEntity for entity targets instead.")]

      public void AimAt(Entity target, int duration)
    parameters:
    - id: target
      type: GTA.Entity
    - id: duration
      type: System.Int32
    content.vb: >-
      <Obsolete("Use TaskInvoker.AimGunAtEntity for entity targets instead.")>

      Public Sub AimAt(target As Entity, duration As Integer)
  overload: GTA.TaskInvoker.AimAt*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TaskInvoker.AimGunAtEntity for entity targets instead.
  nameWithType.vb: TaskInvoker.AimAt(Entity, Integer)
  fullName.vb: GTA.TaskInvoker.AimAt(GTA.Entity, Integer)
  name.vb: AimAt(Entity, Integer)
- uid: GTA.TaskInvoker.AimAt(GTA.Math.Vector3,System.Int32)
  commentId: M:GTA.TaskInvoker.AimAt(GTA.Math.Vector3,System.Int32)
  id: AimAt(GTA.Math.Vector3,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: AimAt(Vector3, int)
  nameWithType: TaskInvoker.AimAt(Vector3, int)
  fullName: GTA.TaskInvoker.AimAt(GTA.Math.Vector3, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use TaskInvoker.AimGunAtPosition for coordinate targets instead.")]

      public void AimAt(Vector3 target, int duration)
    parameters:
    - id: target
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    content.vb: >-
      <Obsolete("Use TaskInvoker.AimGunAtPosition for coordinate targets instead.")>

      Public Sub AimAt(target As Vector3, duration As Integer)
  overload: GTA.TaskInvoker.AimAt*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TaskInvoker.AimGunAtPosition for coordinate targets instead.
  nameWithType.vb: TaskInvoker.AimAt(Vector3, Integer)
  fullName.vb: GTA.TaskInvoker.AimAt(GTA.Math.Vector3, Integer)
  name.vb: AimAt(Vector3, Integer)
- uid: GTA.TaskInvoker.AimGunAtEntity(GTA.Entity,System.Int32,System.Boolean)
  commentId: M:GTA.TaskInvoker.AimGunAtEntity(GTA.Entity,System.Int32,System.Boolean)
  id: AimGunAtEntity(GTA.Entity,System.Int32,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: AimGunAtEntity(Entity, int, bool)
  nameWithType: TaskInvoker.AimGunAtEntity(Entity, int, bool)
  fullName: GTA.TaskInvoker.AimGunAtEntity(GTA.Entity, int, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AimGunAtEntity(Entity target, int duration, bool instantBlendToAim = false)
    parameters:
    - id: target
      type: GTA.Entity
    - id: duration
      type: System.Int32
    - id: instantBlendToAim
      type: System.Boolean
    content.vb: Public Sub AimGunAtEntity(target As Entity, duration As Integer, instantBlendToAim As Boolean = False)
  overload: GTA.TaskInvoker.AimGunAtEntity*
  nameWithType.vb: TaskInvoker.AimGunAtEntity(Entity, Integer, Boolean)
  fullName.vb: GTA.TaskInvoker.AimGunAtEntity(GTA.Entity, Integer, Boolean)
  name.vb: AimGunAtEntity(Entity, Integer, Boolean)
- uid: GTA.TaskInvoker.AimGunAtPosition(GTA.Math.Vector3,System.Int32,System.Boolean,System.Boolean)
  commentId: M:GTA.TaskInvoker.AimGunAtPosition(GTA.Math.Vector3,System.Int32,System.Boolean,System.Boolean)
  id: AimGunAtPosition(GTA.Math.Vector3,System.Int32,System.Boolean,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: AimGunAtPosition(Vector3, int, bool, bool)
  nameWithType: TaskInvoker.AimGunAtPosition(Vector3, int, bool, bool)
  fullName: GTA.TaskInvoker.AimGunAtPosition(GTA.Math.Vector3, int, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void AimGunAtPosition(Vector3 target, int duration, bool instantBlendToAim = false, bool playAimIntro = false)
    parameters:
    - id: target
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    - id: instantBlendToAim
      type: System.Boolean
    - id: playAimIntro
      type: System.Boolean
    content.vb: Public Sub AimGunAtPosition(target As Vector3, duration As Integer, instantBlendToAim As Boolean = False, playAimIntro As Boolean = False)
  overload: GTA.TaskInvoker.AimGunAtPosition*
  nameWithType.vb: TaskInvoker.AimGunAtPosition(Vector3, Integer, Boolean, Boolean)
  fullName.vb: GTA.TaskInvoker.AimGunAtPosition(GTA.Math.Vector3, Integer, Boolean, Boolean)
  name.vb: AimGunAtPosition(Vector3, Integer, Boolean, Boolean)
- uid: GTA.TaskInvoker.Arrest(GTA.Ped)
  commentId: M:GTA.TaskInvoker.Arrest(GTA.Ped)
  id: Arrest(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Arrest(Ped)
  nameWithType: TaskInvoker.Arrest(Ped)
  fullName: GTA.TaskInvoker.Arrest(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Arrest(Ped ped)
    parameters:
    - id: ped
      type: GTA.Ped
    content.vb: Public Sub Arrest(ped As Ped)
  overload: GTA.TaskInvoker.Arrest*
- uid: GTA.TaskInvoker.ChatTo(GTA.Ped)
  commentId: M:GTA.TaskInvoker.ChatTo(GTA.Ped)
  id: ChatTo(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ChatTo(Ped)
  nameWithType: TaskInvoker.ChatTo(Ped)
  fullName: GTA.TaskInvoker.ChatTo(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ChatTo(Ped ped)
    parameters:
    - id: ped
      type: GTA.Ped
    content.vb: Public Sub ChatTo(ped As Ped)
  overload: GTA.TaskInvoker.ChatTo*
- uid: GTA.TaskInvoker.Jump
  commentId: M:GTA.TaskInvoker.Jump
  id: Jump
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Jump()
  nameWithType: TaskInvoker.Jump()
  fullName: GTA.TaskInvoker.Jump()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Jump()
    content.vb: Public Sub Jump()
  overload: GTA.TaskInvoker.Jump*
- uid: GTA.TaskInvoker.Jump(System.Boolean,System.Boolean)
  commentId: M:GTA.TaskInvoker.Jump(System.Boolean,System.Boolean)
  id: Jump(System.Boolean,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Jump(bool, bool)
  nameWithType: TaskInvoker.Jump(bool, bool)
  fullName: GTA.TaskInvoker.Jump(bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Jump(bool doSuperJump, bool useFullSuperJumpForce)
    parameters:
    - id: doSuperJump
      type: System.Boolean
    - id: useFullSuperJumpForce
      type: System.Boolean
    content.vb: Public Sub Jump(doSuperJump As Boolean, useFullSuperJumpForce As Boolean)
  overload: GTA.TaskInvoker.Jump*
  nameWithType.vb: TaskInvoker.Jump(Boolean, Boolean)
  fullName.vb: GTA.TaskInvoker.Jump(Boolean, Boolean)
  name.vb: Jump(Boolean, Boolean)
- uid: GTA.TaskInvoker.Climb
  commentId: M:GTA.TaskInvoker.Climb
  id: Climb
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Climb()
  nameWithType: TaskInvoker.Climb()
  fullName: GTA.TaskInvoker.Climb()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Climb()
    content.vb: Public Sub Climb()
  overload: GTA.TaskInvoker.Climb*
- uid: GTA.TaskInvoker.ClimbLadder
  commentId: M:GTA.TaskInvoker.ClimbLadder
  id: ClimbLadder
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClimbLadder()
  nameWithType: TaskInvoker.ClimbLadder()
  fullName: GTA.TaskInvoker.ClimbLadder()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClimbLadder()
    content.vb: Public Sub ClimbLadder()
  overload: GTA.TaskInvoker.ClimbLadder*
- uid: GTA.TaskInvoker.ClimbLadder(System.Boolean)
  commentId: M:GTA.TaskInvoker.ClimbLadder(System.Boolean)
  id: ClimbLadder(System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClimbLadder(bool)
  nameWithType: TaskInvoker.ClimbLadder(bool)
  fullName: GTA.TaskInvoker.ClimbLadder(bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClimbLadder(bool fast)
    parameters:
    - id: fast
      type: System.Boolean
    content.vb: Public Sub ClimbLadder(fast As Boolean)
  overload: GTA.TaskInvoker.ClimbLadder*
  nameWithType.vb: TaskInvoker.ClimbLadder(Boolean)
  fullName.vb: GTA.TaskInvoker.ClimbLadder(Boolean)
  name.vb: ClimbLadder(Boolean)
- uid: GTA.TaskInvoker.Cower(System.Int32)
  commentId: M:GTA.TaskInvoker.Cower(System.Int32)
  id: Cower(System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Cower(int)
  nameWithType: TaskInvoker.Cower(int)
  fullName: GTA.TaskInvoker.Cower(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Cower(int duration)
    parameters:
    - id: duration
      type: System.Int32
    content.vb: Public Sub Cower(duration As Integer)
  overload: GTA.TaskInvoker.Cower*
  nameWithType.vb: TaskInvoker.Cower(Integer)
  fullName.vb: GTA.TaskInvoker.Cower(Integer)
  name.vb: Cower(Integer)
- uid: GTA.TaskInvoker.ChaseWithGroundVehicle(GTA.Ped)
  commentId: M:GTA.TaskInvoker.ChaseWithGroundVehicle(GTA.Ped)
  id: ChaseWithGroundVehicle(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ChaseWithGroundVehicle(Ped)
  nameWithType: TaskInvoker.ChaseWithGroundVehicle(Ped)
  fullName: GTA.TaskInvoker.ChaseWithGroundVehicle(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ChaseWithGroundVehicle(Ped target)
    parameters:
    - id: target
      type: GTA.Ped
    content.vb: Public Sub ChaseWithGroundVehicle(target As Ped)
  overload: GTA.TaskInvoker.ChaseWithGroundVehicle*
- uid: GTA.TaskInvoker.ChaseWithHelicopter(GTA.Ped,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.ChaseWithHelicopter(GTA.Ped,GTA.Math.Vector3)
  id: ChaseWithHelicopter(GTA.Ped,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ChaseWithHelicopter(Ped, Vector3)
  nameWithType: TaskInvoker.ChaseWithHelicopter(Ped, Vector3)
  fullName: GTA.TaskInvoker.ChaseWithHelicopter(GTA.Ped, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ChaseWithHelicopter(Ped target, Vector3 offset)
    parameters:
    - id: target
      type: GTA.Ped
    - id: offset
      type: GTA.Math.Vector3
    content.vb: Public Sub ChaseWithHelicopter(target As Ped, offset As Vector3)
  overload: GTA.TaskInvoker.ChaseWithHelicopter*
- uid: GTA.TaskInvoker.ChaseWithPlane(GTA.Ped,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.ChaseWithPlane(GTA.Ped,GTA.Math.Vector3)
  id: ChaseWithPlane(GTA.Ped,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ChaseWithPlane(Ped, Vector3)
  nameWithType: TaskInvoker.ChaseWithPlane(Ped, Vector3)
  fullName: GTA.TaskInvoker.ChaseWithPlane(GTA.Ped, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ChaseWithPlane(Ped target, Vector3 offset)
    parameters:
    - id: target
      type: GTA.Ped
    - id: offset
      type: GTA.Math.Vector3
    content.vb: Public Sub ChaseWithPlane(target As Ped, offset As Vector3)
  overload: GTA.TaskInvoker.ChaseWithPlane*
- uid: GTA.TaskInvoker.CruiseWithVehicle(GTA.Vehicle,System.Single,GTA.VehicleDrivingFlags)
  commentId: M:GTA.TaskInvoker.CruiseWithVehicle(GTA.Vehicle,System.Single,GTA.VehicleDrivingFlags)
  id: CruiseWithVehicle(GTA.Vehicle,System.Single,GTA.VehicleDrivingFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: CruiseWithVehicle(Vehicle, float, VehicleDrivingFlags)
  nameWithType: TaskInvoker.CruiseWithVehicle(Vehicle, float, VehicleDrivingFlags)
  fullName: GTA.TaskInvoker.CruiseWithVehicle(GTA.Vehicle, float, GTA.VehicleDrivingFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void CruiseWithVehicle(Vehicle vehicle, float speed, VehicleDrivingFlags drivingFlags)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: speed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    content.vb: Public Sub CruiseWithVehicle(vehicle As Vehicle, speed As Single, drivingFlags As VehicleDrivingFlags)
  overload: GTA.TaskInvoker.CruiseWithVehicle*
  nameWithType.vb: TaskInvoker.CruiseWithVehicle(Vehicle, Single, VehicleDrivingFlags)
  fullName.vb: GTA.TaskInvoker.CruiseWithVehicle(GTA.Vehicle, Single, GTA.VehicleDrivingFlags)
  name.vb: CruiseWithVehicle(Vehicle, Single, VehicleDrivingFlags)
- uid: GTA.TaskInvoker.DriveTo(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.VehicleDrivingFlags,System.Single)
  commentId: M:GTA.TaskInvoker.DriveTo(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.VehicleDrivingFlags,System.Single)
  id: DriveTo(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.VehicleDrivingFlags,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: DriveTo(Vehicle, Vector3, float, VehicleDrivingFlags, float)
  nameWithType: TaskInvoker.DriveTo(Vehicle, Vector3, float, VehicleDrivingFlags, float)
  fullName: GTA.TaskInvoker.DriveTo(GTA.Vehicle, GTA.Math.Vector3, float, GTA.VehicleDrivingFlags, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void DriveTo(Vehicle vehicle, Vector3 target, float speed, VehicleDrivingFlags drivingFlags, float radius)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: target
      type: GTA.Math.Vector3
    - id: speed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: radius
      type: System.Single
    content.vb: Public Sub DriveTo(vehicle As Vehicle, target As Vector3, speed As Single, drivingFlags As VehicleDrivingFlags, radius As Single)
  overload: GTA.TaskInvoker.DriveTo*
  nameWithType.vb: TaskInvoker.DriveTo(Vehicle, Vector3, Single, VehicleDrivingFlags, Single)
  fullName.vb: GTA.TaskInvoker.DriveTo(GTA.Vehicle, GTA.Math.Vector3, Single, GTA.VehicleDrivingFlags, Single)
  name.vb: DriveTo(Vehicle, Vector3, Single, VehicleDrivingFlags, Single)
- uid: GTA.TaskInvoker.EnterAnyVehicle(GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  commentId: M:GTA.TaskInvoker.EnterAnyVehicle(GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  id: EnterAnyVehicle(GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: EnterAnyVehicle(VehicleSeat, int, float, EnterVehicleFlags)
  nameWithType: TaskInvoker.EnterAnyVehicle(VehicleSeat, int, float, EnterVehicleFlags)
  fullName: GTA.TaskInvoker.EnterAnyVehicle(GTA.VehicleSeat, int, float, GTA.EnterVehicleFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void EnterAnyVehicle(VehicleSeat seat = VehicleSeat.Any, int timeout = -1, float speed = 1, EnterVehicleFlags flag = EnterVehicleFlags.None)
    parameters:
    - id: seat
      type: GTA.VehicleSeat
    - id: timeout
      type: System.Int32
    - id: speed
      type: System.Single
    - id: flag
      type: GTA.EnterVehicleFlags
    content.vb: Public Sub EnterAnyVehicle(seat As VehicleSeat = VehicleSeat.Any, timeout As Integer = -1, speed As Single = 1, flag As EnterVehicleFlags = EnterVehicleFlags.None)
  overload: GTA.TaskInvoker.EnterAnyVehicle*
  nameWithType.vb: TaskInvoker.EnterAnyVehicle(VehicleSeat, Integer, Single, EnterVehicleFlags)
  fullName.vb: GTA.TaskInvoker.EnterAnyVehicle(GTA.VehicleSeat, Integer, Single, GTA.EnterVehicleFlags)
  name.vb: EnterAnyVehicle(VehicleSeat, Integer, Single, EnterVehicleFlags)
- uid: GTA.TaskInvoker.EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  commentId: M:GTA.TaskInvoker.EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  id: EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Single,GTA.EnterVehicleFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: EnterVehicle(Vehicle, VehicleSeat, int, float, EnterVehicleFlags)
  nameWithType: TaskInvoker.EnterVehicle(Vehicle, VehicleSeat, int, float, EnterVehicleFlags)
  fullName: GTA.TaskInvoker.EnterVehicle(GTA.Vehicle, GTA.VehicleSeat, int, float, GTA.EnterVehicleFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void EnterVehicle(Vehicle vehicle, VehicleSeat seat = VehicleSeat.Any, int timeout = -1, float speed = 1, EnterVehicleFlags flag = EnterVehicleFlags.None)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: seat
      type: GTA.VehicleSeat
    - id: timeout
      type: System.Int32
    - id: speed
      type: System.Single
    - id: flag
      type: GTA.EnterVehicleFlags
    content.vb: Public Sub EnterVehicle(vehicle As Vehicle, seat As VehicleSeat = VehicleSeat.Any, timeout As Integer = -1, speed As Single = 1, flag As EnterVehicleFlags = EnterVehicleFlags.None)
  overload: GTA.TaskInvoker.EnterVehicle*
  nameWithType.vb: TaskInvoker.EnterVehicle(Vehicle, VehicleSeat, Integer, Single, EnterVehicleFlags)
  fullName.vb: GTA.TaskInvoker.EnterVehicle(GTA.Vehicle, GTA.VehicleSeat, Integer, Single, GTA.EnterVehicleFlags)
  name.vb: EnterVehicle(Vehicle, VehicleSeat, Integer, Single, EnterVehicleFlags)
- uid: GTA.TaskInvoker.EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio},GTA.EnterVehicleFlags,System.String)
  commentId: M:GTA.TaskInvoker.EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio},GTA.EnterVehicleFlags,System.String)
  id: EnterVehicle(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio},GTA.EnterVehicleFlags,System.String)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: EnterVehicle(Vehicle, VehicleSeat, int, PedMoveBlendRatio?, EnterVehicleFlags, string)
  nameWithType: TaskInvoker.EnterVehicle(Vehicle, VehicleSeat, int, PedMoveBlendRatio?, EnterVehicleFlags, string)
  fullName: GTA.TaskInvoker.EnterVehicle(GTA.Vehicle, GTA.VehicleSeat, int, GTA.PedMoveBlendRatio?, GTA.EnterVehicleFlags, string)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void EnterVehicle(Vehicle vehicle, VehicleSeat seat, int timeout, PedMoveBlendRatio? moveBlendRatio = null, EnterVehicleFlags flag = EnterVehicleFlags.None, string overriddenClipSet = null)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: seat
      type: GTA.VehicleSeat
    - id: timeout
      type: System.Int32
    - id: moveBlendRatio
      type: System.Nullable{GTA.PedMoveBlendRatio}
    - id: flag
      type: GTA.EnterVehicleFlags
    - id: overriddenClipSet
      type: System.String
    content.vb: Public Sub EnterVehicle(vehicle As Vehicle, seat As VehicleSeat, timeout As Integer, moveBlendRatio As PedMoveBlendRatio? = Nothing, flag As EnterVehicleFlags = EnterVehicleFlags.None, overriddenClipSet As String = Nothing)
  overload: GTA.TaskInvoker.EnterVehicle*
  nameWithType.vb: TaskInvoker.EnterVehicle(Vehicle, VehicleSeat, Integer, PedMoveBlendRatio?, EnterVehicleFlags, String)
  fullName.vb: GTA.TaskInvoker.EnterVehicle(GTA.Vehicle, GTA.VehicleSeat, Integer, GTA.PedMoveBlendRatio?, GTA.EnterVehicleFlags, String)
  name.vb: EnterVehicle(Vehicle, VehicleSeat, Integer, PedMoveBlendRatio?, EnterVehicleFlags, String)
- uid: GTA.TaskInvoker.OpenVehicleDoor(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio})
  commentId: M:GTA.TaskInvoker.OpenVehicleDoor(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio})
  id: OpenVehicleDoor(GTA.Vehicle,GTA.VehicleSeat,System.Int32,System.Nullable{GTA.PedMoveBlendRatio})
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: OpenVehicleDoor(Vehicle, VehicleSeat, int, PedMoveBlendRatio?)
  nameWithType: TaskInvoker.OpenVehicleDoor(Vehicle, VehicleSeat, int, PedMoveBlendRatio?)
  fullName: GTA.TaskInvoker.OpenVehicleDoor(GTA.Vehicle, GTA.VehicleSeat, int, GTA.PedMoveBlendRatio?)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void OpenVehicleDoor(Vehicle vehicle, VehicleSeat seat = VehicleSeat.Any, int timeout = -1, PedMoveBlendRatio? moveBlendRatio = null)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: seat
      type: GTA.VehicleSeat
    - id: timeout
      type: System.Int32
    - id: moveBlendRatio
      type: System.Nullable{GTA.PedMoveBlendRatio}
    content.vb: Public Sub OpenVehicleDoor(vehicle As Vehicle, seat As VehicleSeat = VehicleSeat.Any, timeout As Integer = -1, moveBlendRatio As PedMoveBlendRatio? = Nothing)
  overload: GTA.TaskInvoker.OpenVehicleDoor*
  nameWithType.vb: TaskInvoker.OpenVehicleDoor(Vehicle, VehicleSeat, Integer, PedMoveBlendRatio?)
  fullName.vb: GTA.TaskInvoker.OpenVehicleDoor(GTA.Vehicle, GTA.VehicleSeat, Integer, GTA.PedMoveBlendRatio?)
  name.vb: OpenVehicleDoor(Vehicle, VehicleSeat, Integer, PedMoveBlendRatio?)
- uid: GTA.TaskInvoker.EveryoneLeaveVehicle(GTA.Vehicle)
  commentId: M:GTA.TaskInvoker.EveryoneLeaveVehicle(GTA.Vehicle)
  id: EveryoneLeaveVehicle(GTA.Vehicle)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: EveryoneLeaveVehicle(Vehicle)
  nameWithType: TaskInvoker.EveryoneLeaveVehicle(Vehicle)
  fullName: GTA.TaskInvoker.EveryoneLeaveVehicle(GTA.Vehicle)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void EveryoneLeaveVehicle(Vehicle vehicle)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    content.vb: Public Shared Sub EveryoneLeaveVehicle(vehicle As Vehicle)
  overload: GTA.TaskInvoker.EveryoneLeaveVehicle*
- uid: GTA.TaskInvoker.Combat(GTA.Ped,GTA.TaskCombatFlags,GTA.TaskThreatResponseFlags)
  commentId: M:GTA.TaskInvoker.Combat(GTA.Ped,GTA.TaskCombatFlags,GTA.TaskThreatResponseFlags)
  id: Combat(GTA.Ped,GTA.TaskCombatFlags,GTA.TaskThreatResponseFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Combat(Ped, TaskCombatFlags, TaskThreatResponseFlags)
  nameWithType: TaskInvoker.Combat(Ped, TaskCombatFlags, TaskThreatResponseFlags)
  fullName: GTA.TaskInvoker.Combat(GTA.Ped, GTA.TaskCombatFlags, GTA.TaskThreatResponseFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Combat(Ped target, TaskCombatFlags combatFlags = TaskCombatFlags.None, TaskThreatResponseFlags taskThreatResponseFlags = TaskThreatResponseFlags.CanFightArmedPedsWhenNotArmed)
    parameters:
    - id: target
      type: GTA.Ped
    - id: combatFlags
      type: GTA.TaskCombatFlags
    - id: taskThreatResponseFlags
      type: GTA.TaskThreatResponseFlags
    content.vb: Public Sub Combat(target As Ped, combatFlags As TaskCombatFlags = TaskCombatFlags.None, taskThreatResponseFlags As TaskThreatResponseFlags = TaskThreatResponseFlags.CanFightArmedPedsWhenNotArmed)
  overload: GTA.TaskInvoker.Combat*
- uid: GTA.TaskInvoker.CombatTimed(GTA.Ped,System.Int32,GTA.TaskCombatFlags)
  commentId: M:GTA.TaskInvoker.CombatTimed(GTA.Ped,System.Int32,GTA.TaskCombatFlags)
  id: CombatTimed(GTA.Ped,System.Int32,GTA.TaskCombatFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: CombatTimed(Ped, int, TaskCombatFlags)
  nameWithType: TaskInvoker.CombatTimed(Ped, int, TaskCombatFlags)
  fullName: GTA.TaskInvoker.CombatTimed(GTA.Ped, int, GTA.TaskCombatFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void CombatTimed(Ped target, int time, TaskCombatFlags combatFlags = TaskCombatFlags.None)
    parameters:
    - id: target
      type: GTA.Ped
    - id: time
      type: System.Int32
    - id: combatFlags
      type: GTA.TaskCombatFlags
    content.vb: Public Sub CombatTimed(target As Ped, time As Integer, combatFlags As TaskCombatFlags = TaskCombatFlags.None)
  overload: GTA.TaskInvoker.CombatTimed*
  nameWithType.vb: TaskInvoker.CombatTimed(Ped, Integer, TaskCombatFlags)
  fullName.vb: GTA.TaskInvoker.CombatTimed(GTA.Ped, Integer, GTA.TaskCombatFlags)
  name.vb: CombatTimed(Ped, Integer, TaskCombatFlags)
- uid: GTA.TaskInvoker.CombatHatedTargetsInArea(GTA.Math.Vector3,System.Single,GTA.TaskCombatFlags)
  commentId: M:GTA.TaskInvoker.CombatHatedTargetsInArea(GTA.Math.Vector3,System.Single,GTA.TaskCombatFlags)
  id: CombatHatedTargetsInArea(GTA.Math.Vector3,System.Single,GTA.TaskCombatFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: CombatHatedTargetsInArea(Vector3, float, TaskCombatFlags)
  nameWithType: TaskInvoker.CombatHatedTargetsInArea(Vector3, float, TaskCombatFlags)
  fullName: GTA.TaskInvoker.CombatHatedTargetsInArea(GTA.Math.Vector3, float, GTA.TaskCombatFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void CombatHatedTargetsInArea(Vector3 position, float radius, TaskCombatFlags combatFlags = TaskCombatFlags.None)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: combatFlags
      type: GTA.TaskCombatFlags
    content.vb: Public Sub CombatHatedTargetsInArea(position As Vector3, radius As Single, combatFlags As TaskCombatFlags = TaskCombatFlags.None)
  overload: GTA.TaskInvoker.CombatHatedTargetsInArea*
  nameWithType.vb: TaskInvoker.CombatHatedTargetsInArea(Vector3, Single, TaskCombatFlags)
  fullName.vb: GTA.TaskInvoker.CombatHatedTargetsInArea(GTA.Math.Vector3, Single, GTA.TaskCombatFlags)
  name.vb: CombatHatedTargetsInArea(Vector3, Single, TaskCombatFlags)
- uid: GTA.TaskInvoker.CombatHatedTargetsAroundPed(System.Single,GTA.TaskCombatFlags)
  commentId: M:GTA.TaskInvoker.CombatHatedTargetsAroundPed(System.Single,GTA.TaskCombatFlags)
  id: CombatHatedTargetsAroundPed(System.Single,GTA.TaskCombatFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: CombatHatedTargetsAroundPed(float, TaskCombatFlags)
  nameWithType: TaskInvoker.CombatHatedTargetsAroundPed(float, TaskCombatFlags)
  fullName: GTA.TaskInvoker.CombatHatedTargetsAroundPed(float, GTA.TaskCombatFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void CombatHatedTargetsAroundPed(float radius, TaskCombatFlags combatFlags = TaskCombatFlags.None)
    parameters:
    - id: radius
      type: System.Single
    - id: combatFlags
      type: GTA.TaskCombatFlags
    content.vb: Public Sub CombatHatedTargetsAroundPed(radius As Single, combatFlags As TaskCombatFlags = TaskCombatFlags.None)
  overload: GTA.TaskInvoker.CombatHatedTargetsAroundPed*
  nameWithType.vb: TaskInvoker.CombatHatedTargetsAroundPed(Single, TaskCombatFlags)
  fullName.vb: GTA.TaskInvoker.CombatHatedTargetsAroundPed(Single, GTA.TaskCombatFlags)
  name.vb: CombatHatedTargetsAroundPed(Single, TaskCombatFlags)
- uid: GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed(System.Single,System.Int32,GTA.TaskCombatFlags)
  commentId: M:GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed(System.Single,System.Int32,GTA.TaskCombatFlags)
  id: CombatHatedTargetsAroundPedTimed(System.Single,System.Int32,GTA.TaskCombatFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: CombatHatedTargetsAroundPedTimed(float, int, TaskCombatFlags)
  nameWithType: TaskInvoker.CombatHatedTargetsAroundPedTimed(float, int, TaskCombatFlags)
  fullName: GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed(float, int, GTA.TaskCombatFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void CombatHatedTargetsAroundPedTimed(float radius, int time, TaskCombatFlags combatFlags = TaskCombatFlags.None)
    parameters:
    - id: radius
      type: System.Single
    - id: time
      type: System.Int32
    - id: combatFlags
      type: GTA.TaskCombatFlags
    content.vb: Public Sub CombatHatedTargetsAroundPedTimed(radius As Single, time As Integer, combatFlags As TaskCombatFlags = TaskCombatFlags.None)
  overload: GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed*
  nameWithType.vb: TaskInvoker.CombatHatedTargetsAroundPedTimed(Single, Integer, TaskCombatFlags)
  fullName.vb: GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed(Single, Integer, GTA.TaskCombatFlags)
  name.vb: CombatHatedTargetsAroundPedTimed(Single, Integer, TaskCombatFlags)
- uid: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)
  commentId: M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)
  id: PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PutDirectlyIntoMelee(Ped, AnimationBlendDuration, float)
  nameWithType: TaskInvoker.PutDirectlyIntoMelee(Ped, AnimationBlendDuration, float)
  fullName: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped, GTA.AnimationBlendDuration, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PutDirectlyIntoMelee(Ped target, AnimationBlendDuration blendIn, float strafePhaseSync)
    parameters:
    - id: target
      type: GTA.Ped
    - id: blendIn
      type: GTA.AnimationBlendDuration
    - id: strafePhaseSync
      type: System.Single
    content.vb: Public Sub PutDirectlyIntoMelee(target As Ped, blendIn As AnimationBlendDuration, strafePhaseSync As Single)
  overload: GTA.TaskInvoker.PutDirectlyIntoMelee*
  nameWithType.vb: TaskInvoker.PutDirectlyIntoMelee(Ped, AnimationBlendDuration, Single)
  fullName.vb: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped, GTA.AnimationBlendDuration, Single)
  name.vb: PutDirectlyIntoMelee(Ped, AnimationBlendDuration, Single)
- uid: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,System.Single)
  id: PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PutDirectlyIntoMelee(Ped, AnimationBlendDuration, float, float)
  nameWithType: TaskInvoker.PutDirectlyIntoMelee(Ped, AnimationBlendDuration, float, float)
  fullName: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped, GTA.AnimationBlendDuration, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PutDirectlyIntoMelee(Ped target, AnimationBlendDuration blendIn, float strafePhaseSync, float timeInTask)
    parameters:
    - id: target
      type: GTA.Ped
    - id: blendIn
      type: GTA.AnimationBlendDuration
    - id: strafePhaseSync
      type: System.Single
    - id: timeInTask
      type: System.Single
    content.vb: Public Sub PutDirectlyIntoMelee(target As Ped, blendIn As AnimationBlendDuration, strafePhaseSync As Single, timeInTask As Single)
  overload: GTA.TaskInvoker.PutDirectlyIntoMelee*
  nameWithType.vb: TaskInvoker.PutDirectlyIntoMelee(Ped, AnimationBlendDuration, Single, Single)
  fullName.vb: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped, GTA.AnimationBlendDuration, Single, Single)
  name.vb: PutDirectlyIntoMelee(Ped, AnimationBlendDuration, Single, Single)
- uid: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,GTA.TaskCombatFlags)
  commentId: M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,GTA.TaskCombatFlags)
  id: PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,GTA.TaskCombatFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PutDirectlyIntoMelee(Ped, AnimationBlendDuration, float, TaskCombatFlags)
  nameWithType: TaskInvoker.PutDirectlyIntoMelee(Ped, AnimationBlendDuration, float, TaskCombatFlags)
  fullName: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped, GTA.AnimationBlendDuration, float, GTA.TaskCombatFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PutDirectlyIntoMelee(Ped target, AnimationBlendDuration blendIn, float strafePhaseSync, TaskCombatFlags aiCombatFlags)
    parameters:
    - id: target
      type: GTA.Ped
    - id: blendIn
      type: GTA.AnimationBlendDuration
    - id: strafePhaseSync
      type: System.Single
    - id: aiCombatFlags
      type: GTA.TaskCombatFlags
    content.vb: Public Sub PutDirectlyIntoMelee(target As Ped, blendIn As AnimationBlendDuration, strafePhaseSync As Single, aiCombatFlags As TaskCombatFlags)
  overload: GTA.TaskInvoker.PutDirectlyIntoMelee*
  nameWithType.vb: TaskInvoker.PutDirectlyIntoMelee(Ped, AnimationBlendDuration, Single, TaskCombatFlags)
  fullName.vb: GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped, GTA.AnimationBlendDuration, Single, GTA.TaskCombatFlags)
  name.vb: PutDirectlyIntoMelee(Ped, AnimationBlendDuration, Single, TaskCombatFlags)
- uid: GTA.TaskInvoker.FightAgainst(GTA.Ped)
  commentId: M:GTA.TaskInvoker.FightAgainst(GTA.Ped)
  id: FightAgainst(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FightAgainst(Ped)
  nameWithType: TaskInvoker.FightAgainst(Ped)
  fullName: GTA.TaskInvoker.FightAgainst(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use TaskInvoker.Combat instead.")]

      public void FightAgainst(Ped target)
    parameters:
    - id: target
      type: GTA.Ped
    content.vb: >-
      <Obsolete("Use TaskInvoker.Combat instead.")>

      Public Sub FightAgainst(target As Ped)
  overload: GTA.TaskInvoker.FightAgainst*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TaskInvoker.Combat instead.
- uid: GTA.TaskInvoker.FightAgainst(GTA.Ped,System.Int32)
  commentId: M:GTA.TaskInvoker.FightAgainst(GTA.Ped,System.Int32)
  id: FightAgainst(GTA.Ped,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FightAgainst(Ped, int)
  nameWithType: TaskInvoker.FightAgainst(Ped, int)
  fullName: GTA.TaskInvoker.FightAgainst(GTA.Ped, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use TaskInvoker.CombatTimed instead.")]

      public void FightAgainst(Ped target, int duration)
    parameters:
    - id: target
      type: GTA.Ped
    - id: duration
      type: System.Int32
    content.vb: >-
      <Obsolete("Use TaskInvoker.CombatTimed instead.")>

      Public Sub FightAgainst(target As Ped, duration As Integer)
  overload: GTA.TaskInvoker.FightAgainst*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TaskInvoker.CombatTimed instead.
  nameWithType.vb: TaskInvoker.FightAgainst(Ped, Integer)
  fullName.vb: GTA.TaskInvoker.FightAgainst(GTA.Ped, Integer)
  name.vb: FightAgainst(Ped, Integer)
- uid: GTA.TaskInvoker.FightAgainstHatedTargets(System.Single)
  commentId: M:GTA.TaskInvoker.FightAgainstHatedTargets(System.Single)
  id: FightAgainstHatedTargets(System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FightAgainstHatedTargets(float)
  nameWithType: TaskInvoker.FightAgainstHatedTargets(float)
  fullName: GTA.TaskInvoker.FightAgainstHatedTargets(float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use TaskInvoker.CombatHatedTargetsAroundPed instead.")]

      public void FightAgainstHatedTargets(float radius)
    parameters:
    - id: radius
      type: System.Single
    content.vb: >-
      <Obsolete("Use TaskInvoker.CombatHatedTargetsAroundPed instead.")>

      Public Sub FightAgainstHatedTargets(radius As Single)
  overload: GTA.TaskInvoker.FightAgainstHatedTargets*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TaskInvoker.CombatHatedTargetsAroundPed instead.
  nameWithType.vb: TaskInvoker.FightAgainstHatedTargets(Single)
  fullName.vb: GTA.TaskInvoker.FightAgainstHatedTargets(Single)
  name.vb: FightAgainstHatedTargets(Single)
- uid: GTA.TaskInvoker.FightAgainstHatedTargets(System.Single,System.Int32)
  commentId: M:GTA.TaskInvoker.FightAgainstHatedTargets(System.Single,System.Int32)
  id: FightAgainstHatedTargets(System.Single,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FightAgainstHatedTargets(float, int)
  nameWithType: TaskInvoker.FightAgainstHatedTargets(float, int)
  fullName: GTA.TaskInvoker.FightAgainstHatedTargets(float, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use TaskInvoker.CombatHatedTargetsAroundPedTimed instead.")]

      public void FightAgainstHatedTargets(float radius, int duration)
    parameters:
    - id: radius
      type: System.Single
    - id: duration
      type: System.Int32
    content.vb: >-
      <Obsolete("Use TaskInvoker.CombatHatedTargetsAroundPedTimed instead.")>

      Public Sub FightAgainstHatedTargets(radius As Single, duration As Integer)
  overload: GTA.TaskInvoker.FightAgainstHatedTargets*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TaskInvoker.CombatHatedTargetsAroundPedTimed instead.
  nameWithType.vb: TaskInvoker.FightAgainstHatedTargets(Single, Integer)
  fullName.vb: GTA.TaskInvoker.FightAgainstHatedTargets(Single, Integer)
  name.vb: FightAgainstHatedTargets(Single, Integer)
- uid: GTA.TaskInvoker.FleeFrom(GTA.Ped,System.Int32)
  commentId: M:GTA.TaskInvoker.FleeFrom(GTA.Ped,System.Int32)
  id: FleeFrom(GTA.Ped,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FleeFrom(Ped, int)
  nameWithType: TaskInvoker.FleeFrom(Ped, int)
  fullName: GTA.TaskInvoker.FleeFrom(GTA.Ped, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FleeFrom(Ped ped, int duration = -1)
    parameters:
    - id: ped
      type: GTA.Ped
    - id: duration
      type: System.Int32
    content.vb: Public Sub FleeFrom(ped As Ped, duration As Integer = -1)
  overload: GTA.TaskInvoker.FleeFrom*
  nameWithType.vb: TaskInvoker.FleeFrom(Ped, Integer)
  fullName.vb: GTA.TaskInvoker.FleeFrom(GTA.Ped, Integer)
  name.vb: FleeFrom(Ped, Integer)
- uid: GTA.TaskInvoker.FleeFrom(GTA.Ped,System.Single,System.Int32)
  commentId: M:GTA.TaskInvoker.FleeFrom(GTA.Ped,System.Single,System.Int32)
  id: FleeFrom(GTA.Ped,System.Single,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FleeFrom(Ped, float, int)
  nameWithType: TaskInvoker.FleeFrom(Ped, float, int)
  fullName: GTA.TaskInvoker.FleeFrom(GTA.Ped, float, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FleeFrom(Ped otherPed, float safeDistance, int duration)
    parameters:
    - id: otherPed
      type: GTA.Ped
    - id: safeDistance
      type: System.Single
    - id: duration
      type: System.Int32
    content.vb: Public Sub FleeFrom(otherPed As Ped, safeDistance As Single, duration As Integer)
  overload: GTA.TaskInvoker.FleeFrom*
  nameWithType.vb: TaskInvoker.FleeFrom(Ped, Single, Integer)
  fullName.vb: GTA.TaskInvoker.FleeFrom(GTA.Ped, Single, Integer)
  name.vb: FleeFrom(Ped, Single, Integer)
- uid: GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3,System.Int32)
  commentId: M:GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3,System.Int32)
  id: FleeFrom(GTA.Math.Vector3,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FleeFrom(Vector3, int)
  nameWithType: TaskInvoker.FleeFrom(Vector3, int)
  fullName: GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FleeFrom(Vector3 position, int duration = -1)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    content.vb: Public Sub FleeFrom(position As Vector3, duration As Integer = -1)
  overload: GTA.TaskInvoker.FleeFrom*
  nameWithType.vb: TaskInvoker.FleeFrom(Vector3, Integer)
  fullName.vb: GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3, Integer)
  name.vb: FleeFrom(Vector3, Integer)
- uid: GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3,System.Single,System.Int32,System.Boolean)
  commentId: M:GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3,System.Single,System.Int32,System.Boolean)
  id: FleeFrom(GTA.Math.Vector3,System.Single,System.Int32,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FleeFrom(Vector3, float, int, bool)
  nameWithType: TaskInvoker.FleeFrom(Vector3, float, int, bool)
  fullName: GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3, float, int, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FleeFrom(Vector3 position, float safeDistance, int duration, bool quitIfOutOfRange = false)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: safeDistance
      type: System.Single
    - id: duration
      type: System.Int32
    - id: quitIfOutOfRange
      type: System.Boolean
    content.vb: Public Sub FleeFrom(position As Vector3, safeDistance As Single, duration As Integer, quitIfOutOfRange As Boolean = False)
  overload: GTA.TaskInvoker.FleeFrom*
  nameWithType.vb: TaskInvoker.FleeFrom(Vector3, Single, Integer, Boolean)
  fullName.vb: GTA.TaskInvoker.FleeFrom(GTA.Math.Vector3, Single, Integer, Boolean)
  name.vb: FleeFrom(Vector3, Single, Integer, Boolean)
- uid: GTA.TaskInvoker.FollowPointRoute(GTA.Math.Vector3[])
  commentId: M:GTA.TaskInvoker.FollowPointRoute(GTA.Math.Vector3[])
  id: FollowPointRoute(GTA.Math.Vector3[])
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FollowPointRoute(params Vector3[])
  nameWithType: TaskInvoker.FollowPointRoute(params Vector3[])
  fullName: GTA.TaskInvoker.FollowPointRoute(params GTA.Math.Vector3[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FollowPointRoute(params Vector3[] points)
    parameters:
    - id: points
      type: GTA.Math.Vector3[]
    content.vb: Public Sub FollowPointRoute(ParamArray points As Vector3())
  overload: GTA.TaskInvoker.FollowPointRoute*
  nameWithType.vb: TaskInvoker.FollowPointRoute(ParamArray Vector3())
  fullName.vb: GTA.TaskInvoker.FollowPointRoute(ParamArray GTA.Math.Vector3())
  name.vb: FollowPointRoute(ParamArray Vector3())
- uid: GTA.TaskInvoker.FollowPointRoute(System.Single,GTA.Math.Vector3[])
  commentId: M:GTA.TaskInvoker.FollowPointRoute(System.Single,GTA.Math.Vector3[])
  id: FollowPointRoute(System.Single,GTA.Math.Vector3[])
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FollowPointRoute(float, params Vector3[])
  nameWithType: TaskInvoker.FollowPointRoute(float, params Vector3[])
  fullName: GTA.TaskInvoker.FollowPointRoute(float, params GTA.Math.Vector3[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FollowPointRoute(float movementSpeed, params Vector3[] points)
    parameters:
    - id: movementSpeed
      type: System.Single
    - id: points
      type: GTA.Math.Vector3[]
    content.vb: Public Sub FollowPointRoute(movementSpeed As Single, ParamArray points As Vector3())
  overload: GTA.TaskInvoker.FollowPointRoute*
  nameWithType.vb: TaskInvoker.FollowPointRoute(Single, ParamArray Vector3())
  fullName.vb: GTA.TaskInvoker.FollowPointRoute(Single, ParamArray GTA.Math.Vector3())
  name.vb: FollowPointRoute(Single, ParamArray Vector3())
- uid: GTA.TaskInvoker.FollowToOffsetFromEntity(GTA.Entity,GTA.Math.Vector3,System.Single,System.Int32,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.FollowToOffsetFromEntity(GTA.Entity,GTA.Math.Vector3,System.Single,System.Int32,System.Single,System.Boolean)
  id: FollowToOffsetFromEntity(GTA.Entity,GTA.Math.Vector3,System.Single,System.Int32,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FollowToOffsetFromEntity(Entity, Vector3, float, int, float, bool)
  nameWithType: TaskInvoker.FollowToOffsetFromEntity(Entity, Vector3, float, int, float, bool)
  fullName: GTA.TaskInvoker.FollowToOffsetFromEntity(GTA.Entity, GTA.Math.Vector3, float, int, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FollowToOffsetFromEntity(Entity target, Vector3 offset, float movementSpeed, int timeout = -1, float distanceToFollow = 10, bool persistFollowing = true)
    parameters:
    - id: target
      type: GTA.Entity
    - id: offset
      type: GTA.Math.Vector3
    - id: movementSpeed
      type: System.Single
    - id: timeout
      type: System.Int32
    - id: distanceToFollow
      type: System.Single
    - id: persistFollowing
      type: System.Boolean
    content.vb: Public Sub FollowToOffsetFromEntity(target As Entity, offset As Vector3, movementSpeed As Single, timeout As Integer = -1, distanceToFollow As Single = 10, persistFollowing As Boolean = True)
  overload: GTA.TaskInvoker.FollowToOffsetFromEntity*
  nameWithType.vb: TaskInvoker.FollowToOffsetFromEntity(Entity, Vector3, Single, Integer, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.FollowToOffsetFromEntity(GTA.Entity, GTA.Math.Vector3, Single, Integer, Single, Boolean)
  name.vb: FollowToOffsetFromEntity(Entity, Vector3, Single, Integer, Single, Boolean)
- uid: GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,System.Nullable{GTA.PedMoveBlendRatio},System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single)
  commentId: M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,System.Nullable{GTA.PedMoveBlendRatio},System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single)
  id: FollowNavMeshTo(GTA.Math.Vector3,System.Nullable{GTA.PedMoveBlendRatio},System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FollowNavMeshTo(Vector3, PedMoveBlendRatio?, int, float, FollowNavMeshFlags, float)
  nameWithType: TaskInvoker.FollowNavMeshTo(Vector3, PedMoveBlendRatio?, int, float, FollowNavMeshFlags, float)
  fullName: GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3, GTA.PedMoveBlendRatio?, int, float, GTA.FollowNavMeshFlags, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FollowNavMeshTo(Vector3 position, PedMoveBlendRatio? moveBlendRatio = null, int timeBeforeWarp = -1, float radius = 0.25, FollowNavMeshFlags navigationFlags = FollowNavMeshFlags.Default, float finalHeading = 40000)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: moveBlendRatio
      type: System.Nullable{GTA.PedMoveBlendRatio}
    - id: timeBeforeWarp
      type: System.Int32
    - id: radius
      type: System.Single
    - id: navigationFlags
      type: GTA.FollowNavMeshFlags
    - id: finalHeading
      type: System.Single
    content.vb: Public Sub FollowNavMeshTo(position As Vector3, moveBlendRatio As PedMoveBlendRatio? = Nothing, timeBeforeWarp As Integer = -1, radius As Single = 0.25, navigationFlags As FollowNavMeshFlags = FollowNavMeshFlags.Default, finalHeading As Single = 40000)
  overload: GTA.TaskInvoker.FollowNavMeshTo*
  nameWithType.vb: TaskInvoker.FollowNavMeshTo(Vector3, PedMoveBlendRatio?, Integer, Single, FollowNavMeshFlags, Single)
  fullName.vb: GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3, GTA.PedMoveBlendRatio?, Integer, Single, GTA.FollowNavMeshFlags, Single)
  name.vb: FollowNavMeshTo(Vector3, PedMoveBlendRatio?, Integer, Single, FollowNavMeshFlags, Single)
- uid: GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)
  id: FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: FollowNavMeshTo(Vector3, PedMoveBlendRatio, int, float, FollowNavMeshFlags, float, float, float, float)
  nameWithType: TaskInvoker.FollowNavMeshTo(Vector3, PedMoveBlendRatio, int, float, FollowNavMeshFlags, float, float, float, float)
  fullName: GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3, GTA.PedMoveBlendRatio, int, float, GTA.FollowNavMeshFlags, float, float, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void FollowNavMeshTo(Vector3 position, PedMoveBlendRatio moveBlendRatio, int timeBeforeWarp, float radius, FollowNavMeshFlags navigationFlags, float slideToCoordHeading, float maxSlopeNavigable, float clampMaxSearchDistance, float finalHeading = 40000)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: moveBlendRatio
      type: GTA.PedMoveBlendRatio
    - id: timeBeforeWarp
      type: System.Int32
    - id: radius
      type: System.Single
    - id: navigationFlags
      type: GTA.FollowNavMeshFlags
    - id: slideToCoordHeading
      type: System.Single
    - id: maxSlopeNavigable
      type: System.Single
    - id: clampMaxSearchDistance
      type: System.Single
    - id: finalHeading
      type: System.Single
    content.vb: Public Sub FollowNavMeshTo(position As Vector3, moveBlendRatio As PedMoveBlendRatio, timeBeforeWarp As Integer, radius As Single, navigationFlags As FollowNavMeshFlags, slideToCoordHeading As Single, maxSlopeNavigable As Single, clampMaxSearchDistance As Single, finalHeading As Single = 40000)
  overload: GTA.TaskInvoker.FollowNavMeshTo*
  nameWithType.vb: TaskInvoker.FollowNavMeshTo(Vector3, PedMoveBlendRatio, Integer, Single, FollowNavMeshFlags, Single, Single, Single, Single)
  fullName.vb: GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3, GTA.PedMoveBlendRatio, Integer, Single, GTA.FollowNavMeshFlags, Single, Single, Single, Single)
  name.vb: FollowNavMeshTo(Vector3, PedMoveBlendRatio, Integer, Single, FollowNavMeshFlags, Single, Single, Single, Single)
- uid: GTA.TaskInvoker.GoTo(GTA.Entity,GTA.Math.Vector3,System.Int32)
  commentId: M:GTA.TaskInvoker.GoTo(GTA.Entity,GTA.Math.Vector3,System.Int32)
  id: GoTo(GTA.Entity,GTA.Math.Vector3,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoTo(Entity, Vector3, int)
  nameWithType: TaskInvoker.GoTo(Entity, Vector3, int)
  fullName: GTA.TaskInvoker.GoTo(GTA.Entity, GTA.Math.Vector3, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoTo(Entity target, Vector3 offset = default, int timeout = -1)
    parameters:
    - id: target
      type: GTA.Entity
    - id: offset
      type: GTA.Math.Vector3
    - id: timeout
      type: System.Int32
    content.vb: Public Sub [GoTo](target As Entity, offset As Vector3 = Nothing, timeout As Integer = -1)
  overload: GTA.TaskInvoker.GoTo*
  nameWithType.vb: TaskInvoker.GoTo(Entity, Vector3, Integer)
  fullName.vb: GTA.TaskInvoker.GoTo(GTA.Entity, GTA.Math.Vector3, Integer)
  name.vb: GoTo(Entity, Vector3, Integer)
- uid: GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,System.Single,System.Single)
  id: GoStraightTo(GTA.Math.Vector3,System.Int32,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoStraightTo(Vector3, int, float, float)
  nameWithType: TaskInvoker.GoStraightTo(Vector3, int, float, float)
  fullName: GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3, int, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoStraightTo(Vector3 position, int timeout = -1, float targetHeading = 0, float distanceToSlide = 0)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: timeout
      type: System.Int32
    - id: targetHeading
      type: System.Single
    - id: distanceToSlide
      type: System.Single
    content.vb: Public Sub GoStraightTo(position As Vector3, timeout As Integer = -1, targetHeading As Single = 0, distanceToSlide As Single = 0)
  overload: GTA.TaskInvoker.GoStraightTo*
  nameWithType.vb: TaskInvoker.GoStraightTo(Vector3, Integer, Single, Single)
  fullName.vb: GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3, Integer, Single, Single)
  name.vb: GoStraightTo(Vector3, Integer, Single, Single)
- uid: GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,GTA.PedMoveBlendRatio,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,GTA.PedMoveBlendRatio,System.Single,System.Single)
  id: GoStraightTo(GTA.Math.Vector3,System.Int32,GTA.PedMoveBlendRatio,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoStraightTo(Vector3, int, PedMoveBlendRatio, float, float)
  nameWithType: TaskInvoker.GoStraightTo(Vector3, int, PedMoveBlendRatio, float, float)
  fullName: GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3, int, GTA.PedMoveBlendRatio, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoStraightTo(Vector3 position, int timeBeforeWarp, PedMoveBlendRatio moveBlendRatio, float finalHeading, float targetRadius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: timeBeforeWarp
      type: System.Int32
    - id: moveBlendRatio
      type: GTA.PedMoveBlendRatio
    - id: finalHeading
      type: System.Single
    - id: targetRadius
      type: System.Single
    content.vb: Public Sub GoStraightTo(position As Vector3, timeBeforeWarp As Integer, moveBlendRatio As PedMoveBlendRatio, finalHeading As Single, targetRadius As Single)
  overload: GTA.TaskInvoker.GoStraightTo*
  nameWithType.vb: TaskInvoker.GoStraightTo(Vector3, Integer, PedMoveBlendRatio, Single, Single)
  fullName.vb: GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3, Integer, GTA.PedMoveBlendRatio, Single, Single)
  name.vb: GoStraightTo(Vector3, Integer, PedMoveBlendRatio, Single, Single)
- uid: GTA.TaskInvoker.GoToPointAnyMeans(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single)
  commentId: M:GTA.TaskInvoker.GoToPointAnyMeans(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single)
  id: GoToPointAnyMeans(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoToPointAnyMeans(Vector3, PedMoveBlendRatio, Vehicle, bool, VehicleDrivingFlags, float)
  nameWithType: TaskInvoker.GoToPointAnyMeans(Vector3, PedMoveBlendRatio, Vehicle, bool, VehicleDrivingFlags, float)
  fullName: GTA.TaskInvoker.GoToPointAnyMeans(GTA.Math.Vector3, GTA.PedMoveBlendRatio, GTA.Vehicle, bool, GTA.VehicleDrivingFlags, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoToPointAnyMeans(Vector3 target, PedMoveBlendRatio moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing = false, VehicleDrivingFlags drivingFlags = VehicleDrivingFlags.DrivingModeStopForVehicles, float maxRangeToShootTargets = -1)
    parameters:
    - id: target
      type: GTA.Math.Vector3
    - id: moveBlendRatio
      type: GTA.PedMoveBlendRatio
    - id: vehicle
      type: GTA.Vehicle
    - id: useLongRangeVehiclePathing
      type: System.Boolean
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: maxRangeToShootTargets
      type: System.Single
    content.vb: Public Sub GoToPointAnyMeans(target As Vector3, moveBlendRatio As PedMoveBlendRatio, vehicle As Vehicle, useLongRangeVehiclePathing As Boolean = False, drivingFlags As VehicleDrivingFlags = VehicleDrivingFlags.DrivingModeStopForVehicles, maxRangeToShootTargets As Single = -1)
  overload: GTA.TaskInvoker.GoToPointAnyMeans*
  nameWithType.vb: TaskInvoker.GoToPointAnyMeans(Vector3, PedMoveBlendRatio, Vehicle, Boolean, VehicleDrivingFlags, Single)
  fullName.vb: GTA.TaskInvoker.GoToPointAnyMeans(GTA.Math.Vector3, GTA.PedMoveBlendRatio, GTA.Vehicle, Boolean, GTA.VehicleDrivingFlags, Single)
  name.vb: GoToPointAnyMeans(Vector3, PedMoveBlendRatio, Vehicle, Boolean, VehicleDrivingFlags, Single)
- uid: GTA.TaskInvoker.GoToPointAnyMeansExtraParams(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single)
  commentId: M:GTA.TaskInvoker.GoToPointAnyMeansExtraParams(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single)
  id: GoToPointAnyMeansExtraParams(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoToPointAnyMeansExtraParams(Vector3, PedMoveBlendRatio, Vehicle, bool, VehicleDrivingFlags, float, float, float, TaskGoToPointAnyMeansFlags, float)
  nameWithType: TaskInvoker.GoToPointAnyMeansExtraParams(Vector3, PedMoveBlendRatio, Vehicle, bool, VehicleDrivingFlags, float, float, float, TaskGoToPointAnyMeansFlags, float)
  fullName: GTA.TaskInvoker.GoToPointAnyMeansExtraParams(GTA.Math.Vector3, GTA.PedMoveBlendRatio, GTA.Vehicle, bool, GTA.VehicleDrivingFlags, float, float, float, GTA.TaskGoToPointAnyMeansFlags, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoToPointAnyMeansExtraParams(Vector3 target, PedMoveBlendRatio moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing = false, VehicleDrivingFlags drivingFlags = VehicleDrivingFlags.DrivingModeStopForVehicles, float maxRangeToShootTargets = -1, float extraVehToTargetDistToPreferVeh = 0, float driveStraightLineDistance = 20, TaskGoToPointAnyMeansFlags extraFlags = TaskGoToPointAnyMeansFlags.Default, float warpTimerMs = -1)
    parameters:
    - id: target
      type: GTA.Math.Vector3
    - id: moveBlendRatio
      type: GTA.PedMoveBlendRatio
    - id: vehicle
      type: GTA.Vehicle
    - id: useLongRangeVehiclePathing
      type: System.Boolean
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: maxRangeToShootTargets
      type: System.Single
    - id: extraVehToTargetDistToPreferVeh
      type: System.Single
    - id: driveStraightLineDistance
      type: System.Single
    - id: extraFlags
      type: GTA.TaskGoToPointAnyMeansFlags
    - id: warpTimerMs
      type: System.Single
    content.vb: Public Sub GoToPointAnyMeansExtraParams(target As Vector3, moveBlendRatio As PedMoveBlendRatio, vehicle As Vehicle, useLongRangeVehiclePathing As Boolean = False, drivingFlags As VehicleDrivingFlags = VehicleDrivingFlags.DrivingModeStopForVehicles, maxRangeToShootTargets As Single = -1, extraVehToTargetDistToPreferVeh As Single = 0, driveStraightLineDistance As Single = 20, extraFlags As TaskGoToPointAnyMeansFlags = TaskGoToPointAnyMeansFlags.Default, warpTimerMs As Single = -1)
  overload: GTA.TaskInvoker.GoToPointAnyMeansExtraParams*
  nameWithType.vb: TaskInvoker.GoToPointAnyMeansExtraParams(Vector3, PedMoveBlendRatio, Vehicle, Boolean, VehicleDrivingFlags, Single, Single, Single, TaskGoToPointAnyMeansFlags, Single)
  fullName.vb: GTA.TaskInvoker.GoToPointAnyMeansExtraParams(GTA.Math.Vector3, GTA.PedMoveBlendRatio, GTA.Vehicle, Boolean, GTA.VehicleDrivingFlags, Single, Single, Single, GTA.TaskGoToPointAnyMeansFlags, Single)
  name.vb: GoToPointAnyMeansExtraParams(Vector3, PedMoveBlendRatio, Vehicle, Boolean, VehicleDrivingFlags, Single, Single, Single, TaskGoToPointAnyMeansFlags, Single)
- uid: GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)
  id: GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoToPointAnyMeansExtraParamsWithCruiseSpeed(Vector3, PedMoveBlendRatio, Vehicle, bool, VehicleDrivingFlags, float, float, float, TaskGoToPointAnyMeansFlags, float, float)
  nameWithType: TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(Vector3, PedMoveBlendRatio, Vehicle, bool, VehicleDrivingFlags, float, float, float, TaskGoToPointAnyMeansFlags, float, float)
  fullName: GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3, GTA.PedMoveBlendRatio, GTA.Vehicle, bool, GTA.VehicleDrivingFlags, float, float, float, GTA.TaskGoToPointAnyMeansFlags, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoToPointAnyMeansExtraParamsWithCruiseSpeed(Vector3 target, PedMoveBlendRatio moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing = false, VehicleDrivingFlags drivingFlags = VehicleDrivingFlags.DrivingModeStopForVehicles, float maxRangeToShootTargets = -1, float extraVehToTargetDistToPreferVeh = 0, float driveStraightLineDistance = 20, TaskGoToPointAnyMeansFlags extraFlags = TaskGoToPointAnyMeansFlags.Default, float cruiseSpeed = -1, float targetArriveDist = 4)
    parameters:
    - id: target
      type: GTA.Math.Vector3
    - id: moveBlendRatio
      type: GTA.PedMoveBlendRatio
    - id: vehicle
      type: GTA.Vehicle
    - id: useLongRangeVehiclePathing
      type: System.Boolean
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: maxRangeToShootTargets
      type: System.Single
    - id: extraVehToTargetDistToPreferVeh
      type: System.Single
    - id: driveStraightLineDistance
      type: System.Single
    - id: extraFlags
      type: GTA.TaskGoToPointAnyMeansFlags
    - id: cruiseSpeed
      type: System.Single
    - id: targetArriveDist
      type: System.Single
    content.vb: Public Sub GoToPointAnyMeansExtraParamsWithCruiseSpeed(target As Vector3, moveBlendRatio As PedMoveBlendRatio, vehicle As Vehicle, useLongRangeVehiclePathing As Boolean = False, drivingFlags As VehicleDrivingFlags = VehicleDrivingFlags.DrivingModeStopForVehicles, maxRangeToShootTargets As Single = -1, extraVehToTargetDistToPreferVeh As Single = 0, driveStraightLineDistance As Single = 20, extraFlags As TaskGoToPointAnyMeansFlags = TaskGoToPointAnyMeansFlags.Default, cruiseSpeed As Single = -1, targetArriveDist As Single = 4)
  overload: GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed*
  nameWithType.vb: TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(Vector3, PedMoveBlendRatio, Vehicle, Boolean, VehicleDrivingFlags, Single, Single, Single, TaskGoToPointAnyMeansFlags, Single, Single)
  fullName.vb: GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3, GTA.PedMoveBlendRatio, GTA.Vehicle, Boolean, GTA.VehicleDrivingFlags, Single, Single, Single, GTA.TaskGoToPointAnyMeansFlags, Single, Single)
  name.vb: GoToPointAnyMeansExtraParamsWithCruiseSpeed(Vector3, PedMoveBlendRatio, Vehicle, Boolean, VehicleDrivingFlags, Single, Single, Single, TaskGoToPointAnyMeansFlags, Single, Single)
- uid: GTA.TaskInvoker.GuardCurrentPosition
  commentId: M:GTA.TaskInvoker.GuardCurrentPosition
  id: GuardCurrentPosition
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GuardCurrentPosition()
  nameWithType: TaskInvoker.GuardCurrentPosition()
  fullName: GTA.TaskInvoker.GuardCurrentPosition()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GuardCurrentPosition()
    content.vb: Public Sub GuardCurrentPosition()
  overload: GTA.TaskInvoker.GuardCurrentPosition*
- uid: GTA.TaskInvoker.HandsUp(System.Int32)
  commentId: M:GTA.TaskInvoker.HandsUp(System.Int32)
  id: HandsUp(System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: HandsUp(int)
  nameWithType: TaskInvoker.HandsUp(int)
  fullName: GTA.TaskInvoker.HandsUp(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void HandsUp(int duration)
    parameters:
    - id: duration
      type: System.Int32
    content.vb: Public Sub HandsUp(duration As Integer)
  overload: GTA.TaskInvoker.HandsUp*
  nameWithType.vb: TaskInvoker.HandsUp(Integer)
  fullName.vb: GTA.TaskInvoker.HandsUp(Integer)
  name.vb: HandsUp(Integer)
- uid: GTA.TaskInvoker.LandPlane(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Vehicle)
  commentId: M:GTA.TaskInvoker.LandPlane(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Vehicle)
  id: LandPlane(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Vehicle)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LandPlane(Vector3, Vector3, Vehicle)
  nameWithType: TaskInvoker.LandPlane(Vector3, Vector3, Vehicle)
  fullName: GTA.TaskInvoker.LandPlane(GTA.Math.Vector3, GTA.Math.Vector3, GTA.Vehicle)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LandPlane(Vector3 startPosition, Vector3 touchdownPosition, Vehicle plane = null)
    parameters:
    - id: startPosition
      type: GTA.Math.Vector3
    - id: touchdownPosition
      type: GTA.Math.Vector3
    - id: plane
      type: GTA.Vehicle
    content.vb: Public Sub LandPlane(startPosition As Vector3, touchdownPosition As Vector3, plane As Vehicle = Nothing)
  overload: GTA.TaskInvoker.LandPlane*
- uid: GTA.TaskInvoker.LeaveVehicle(GTA.LeaveVehicleFlags)
  commentId: M:GTA.TaskInvoker.LeaveVehicle(GTA.LeaveVehicleFlags)
  id: LeaveVehicle(GTA.LeaveVehicleFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LeaveVehicle(LeaveVehicleFlags)
  nameWithType: TaskInvoker.LeaveVehicle(LeaveVehicleFlags)
  fullName: GTA.TaskInvoker.LeaveVehicle(GTA.LeaveVehicleFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LeaveVehicle(LeaveVehicleFlags flags = LeaveVehicleFlags.None)
    parameters:
    - id: flags
      type: GTA.LeaveVehicleFlags
    content.vb: Public Sub LeaveVehicle(flags As LeaveVehicleFlags = LeaveVehicleFlags.None)
  overload: GTA.TaskInvoker.LeaveVehicle*
- uid: GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle,System.Boolean)
  commentId: M:GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle,System.Boolean)
  id: LeaveVehicle(GTA.Vehicle,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LeaveVehicle(Vehicle, bool)
  nameWithType: TaskInvoker.LeaveVehicle(Vehicle, bool)
  fullName: GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LeaveVehicle(Vehicle vehicle, bool closeDoor)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: closeDoor
      type: System.Boolean
    content.vb: Public Sub LeaveVehicle(vehicle As Vehicle, closeDoor As Boolean)
  overload: GTA.TaskInvoker.LeaveVehicle*
  nameWithType.vb: TaskInvoker.LeaveVehicle(Vehicle, Boolean)
  fullName.vb: GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle, Boolean)
  name.vb: LeaveVehicle(Vehicle, Boolean)
- uid: GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle,GTA.LeaveVehicleFlags)
  commentId: M:GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle,GTA.LeaveVehicleFlags)
  id: LeaveVehicle(GTA.Vehicle,GTA.LeaveVehicleFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LeaveVehicle(Vehicle, LeaveVehicleFlags)
  nameWithType: TaskInvoker.LeaveVehicle(Vehicle, LeaveVehicleFlags)
  fullName: GTA.TaskInvoker.LeaveVehicle(GTA.Vehicle, GTA.LeaveVehicleFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LeaveVehicle(Vehicle vehicle, LeaveVehicleFlags flags)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: flags
      type: GTA.LeaveVehicleFlags
    content.vb: Public Sub LeaveVehicle(vehicle As Vehicle, flags As LeaveVehicleFlags)
  overload: GTA.TaskInvoker.LeaveVehicle*
- uid: GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32)
  commentId: M:GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32)
  id: LookAt(GTA.Entity,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LookAt(Entity, int)
  nameWithType: TaskInvoker.LookAt(Entity, int)
  fullName: GTA.TaskInvoker.LookAt(GTA.Entity, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LookAt(Entity target, int duration = -1)
    parameters:
    - id: target
      type: GTA.Entity
    - id: duration
      type: System.Int32
    content.vb: Public Sub LookAt(target As Entity, duration As Integer = -1)
  overload: GTA.TaskInvoker.LookAt*
  nameWithType.vb: TaskInvoker.LookAt(Entity, Integer)
  fullName.vb: GTA.TaskInvoker.LookAt(GTA.Entity, Integer)
  name.vb: LookAt(Entity, Integer)
- uid: GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  commentId: M:GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  id: LookAt(GTA.Entity,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LookAt(Entity, int, LookAtFlags, LookAtPriority)
  nameWithType: TaskInvoker.LookAt(Entity, int, LookAtFlags, LookAtPriority)
  fullName: GTA.TaskInvoker.LookAt(GTA.Entity, int, GTA.LookAtFlags, GTA.LookAtPriority)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LookAt(Entity target, int duration, LookAtFlags lookFlags = LookAtFlags.Default, LookAtPriority priority = LookAtPriority.Medium)
    parameters:
    - id: target
      type: GTA.Entity
    - id: duration
      type: System.Int32
    - id: lookFlags
      type: GTA.LookAtFlags
    - id: priority
      type: GTA.LookAtPriority
    content.vb: Public Sub LookAt(target As Entity, duration As Integer, lookFlags As LookAtFlags = LookAtFlags.Default, priority As LookAtPriority = LookAtPriority.Medium)
  overload: GTA.TaskInvoker.LookAt*
  nameWithType.vb: TaskInvoker.LookAt(Entity, Integer, LookAtFlags, LookAtPriority)
  fullName.vb: GTA.TaskInvoker.LookAt(GTA.Entity, Integer, GTA.LookAtFlags, GTA.LookAtPriority)
  name.vb: LookAt(Entity, Integer, LookAtFlags, LookAtPriority)
- uid: GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32)
  commentId: M:GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32)
  id: LookAt(GTA.Math.Vector3,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LookAt(Vector3, int)
  nameWithType: TaskInvoker.LookAt(Vector3, int)
  fullName: GTA.TaskInvoker.LookAt(GTA.Math.Vector3, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LookAt(Vector3 position, int duration = -1)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    content.vb: Public Sub LookAt(position As Vector3, duration As Integer = -1)
  overload: GTA.TaskInvoker.LookAt*
  nameWithType.vb: TaskInvoker.LookAt(Vector3, Integer)
  fullName.vb: GTA.TaskInvoker.LookAt(GTA.Math.Vector3, Integer)
  name.vb: LookAt(Vector3, Integer)
- uid: GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  commentId: M:GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  id: LookAt(GTA.Math.Vector3,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: LookAt(Vector3, int, LookAtFlags, LookAtPriority)
  nameWithType: TaskInvoker.LookAt(Vector3, int, LookAtFlags, LookAtPriority)
  fullName: GTA.TaskInvoker.LookAt(GTA.Math.Vector3, int, GTA.LookAtFlags, GTA.LookAtPriority)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void LookAt(Vector3 position, int duration, LookAtFlags lookFlags = LookAtFlags.Default, LookAtPriority priority = LookAtPriority.Medium)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    - id: lookFlags
      type: GTA.LookAtFlags
    - id: priority
      type: GTA.LookAtPriority
    content.vb: Public Sub LookAt(position As Vector3, duration As Integer, lookFlags As LookAtFlags = LookAtFlags.Default, priority As LookAtPriority = LookAtPriority.Medium)
  overload: GTA.TaskInvoker.LookAt*
  nameWithType.vb: TaskInvoker.LookAt(Vector3, Integer, LookAtFlags, LookAtPriority)
  fullName.vb: GTA.TaskInvoker.LookAt(GTA.Math.Vector3, Integer, GTA.LookAtFlags, GTA.LookAtPriority)
  name.vb: LookAt(Vector3, Integer, LookAtFlags, LookAtPriority)
- uid: GTA.TaskInvoker.ParachuteTo(GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.ParachuteTo(GTA.Math.Vector3)
  id: ParachuteTo(GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ParachuteTo(Vector3)
  nameWithType: TaskInvoker.ParachuteTo(Vector3)
  fullName: GTA.TaskInvoker.ParachuteTo(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ParachuteTo(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    content.vb: Public Sub ParachuteTo(position As Vector3)
  overload: GTA.TaskInvoker.ParachuteTo*
- uid: GTA.TaskInvoker.UpdateParachuteTarget(GTA.Ped,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.UpdateParachuteTarget(GTA.Ped,GTA.Math.Vector3)
  id: UpdateParachuteTarget(GTA.Ped,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: UpdateParachuteTarget(Ped, Vector3)
  nameWithType: TaskInvoker.UpdateParachuteTarget(Ped, Vector3)
  fullName: GTA.TaskInvoker.UpdateParachuteTarget(GTA.Ped, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void UpdateParachuteTarget(Ped ped, Vector3 position)
    parameters:
    - id: ped
      type: GTA.Ped
    - id: position
      type: GTA.Math.Vector3
    content.vb: Public Shared Sub UpdateParachuteTarget(ped As Ped, position As Vector3)
  overload: GTA.TaskInvoker.UpdateParachuteTarget*
- uid: GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  id: ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ParkVehicle(Vehicle, Vector3, float, float, bool)
  nameWithType: TaskInvoker.ParkVehicle(Vehicle, Vector3, float, float, bool)
  fullName: GTA.TaskInvoker.ParkVehicle(GTA.Vehicle, GTA.Math.Vector3, float, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ParkVehicle(Vehicle vehicle, Vector3 position, float heading, float radius = 20, bool keepEngineOn = false)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    - id: radius
      type: System.Single
    - id: keepEngineOn
      type: System.Boolean
    content.vb: Public Sub ParkVehicle(vehicle As Vehicle, position As Vector3, heading As Single, radius As Single = 20, keepEngineOn As Boolean = False)
  overload: GTA.TaskInvoker.ParkVehicle*
  nameWithType.vb: TaskInvoker.ParkVehicle(Vehicle, Vector3, Single, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.ParkVehicle(GTA.Vehicle, GTA.Math.Vector3, Single, Single, Boolean)
  name.vb: ParkVehicle(Vehicle, Vector3, Single, Single, Boolean)
- uid: GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.ParkType,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.ParkType,System.Single,System.Boolean)
  id: ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.ParkType,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ParkVehicle(Vehicle, Vector3, float, ParkType, float, bool)
  nameWithType: TaskInvoker.ParkVehicle(Vehicle, Vector3, float, ParkType, float, bool)
  fullName: GTA.TaskInvoker.ParkVehicle(GTA.Vehicle, GTA.Math.Vector3, float, GTA.ParkType, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ParkVehicle(Vehicle vehicle, Vector3 position, float directionDegrees, ParkType parkType, float toleranceDegrees = 20, bool keepEngineOn = false)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: position
      type: GTA.Math.Vector3
    - id: directionDegrees
      type: System.Single
    - id: parkType
      type: GTA.ParkType
    - id: toleranceDegrees
      type: System.Single
    - id: keepEngineOn
      type: System.Boolean
    content.vb: Public Sub ParkVehicle(vehicle As Vehicle, position As Vector3, directionDegrees As Single, parkType As ParkType, toleranceDegrees As Single = 20, keepEngineOn As Boolean = False)
  overload: GTA.TaskInvoker.ParkVehicle*
  nameWithType.vb: TaskInvoker.ParkVehicle(Vehicle, Vector3, Single, ParkType, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.ParkVehicle(GTA.Vehicle, GTA.Math.Vector3, Single, GTA.ParkType, Single, Boolean)
  name.vb: ParkVehicle(Vehicle, Vector3, Single, ParkType, Single, Boolean)
- uid: GTA.TaskInvoker.PerformSequence(GTA.TaskSequence)
  commentId: M:GTA.TaskInvoker.PerformSequence(GTA.TaskSequence)
  id: PerformSequence(GTA.TaskSequence)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PerformSequence(TaskSequence)
  nameWithType: TaskInvoker.PerformSequence(TaskSequence)
  fullName: GTA.TaskInvoker.PerformSequence(GTA.TaskSequence)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PerformSequence(TaskSequence sequence)
    parameters:
    - id: sequence
      type: GTA.TaskSequence
    content.vb: Public Sub PerformSequence(sequence As TaskSequence)
  overload: GTA.TaskInvoker.PerformSequence*
- uid: GTA.TaskInvoker.PlayAnimation(System.String,System.String)
  commentId: M:GTA.TaskInvoker.PlayAnimation(System.String,System.String)
  id: PlayAnimation(System.String,System.String)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(string, string)
  nameWithType: TaskInvoker.PlayAnimation(string, string)
  fullName: GTA.TaskInvoker.PlayAnimation(string, string)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(string animDict, string animName)
    parameters:
    - id: animDict
      type: System.String
    - id: animName
      type: System.String
    content.vb: Public Sub PlayAnimation(animDict As String, animName As String)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(String, String)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(String, String)
  name.vb: PlayAnimation(String, String)
- uid: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)
  commentId: M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)
  id: PlayAnimation(GTA.CrClipAsset)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(CrClipAsset)
  nameWithType: TaskInvoker.PlayAnimation(CrClipAsset)
  fullName: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(CrClipAsset crClipAsset)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    content.vb: Public Sub PlayAnimation(crClipAsset As CrClipAsset)
  overload: GTA.TaskInvoker.PlayAnimation*
- uid: GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Int32,System.Single)
  commentId: M:GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Int32,System.Single)
  id: PlayAnimation(System.String,System.String,System.Single,System.Int32,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(string, string, float, int, float)
  nameWithType: TaskInvoker.PlayAnimation(string, string, float, int, float)
  fullName: GTA.TaskInvoker.PlayAnimation(string, string, float, int, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(string animDict, string animName, float speed, int duration, float playbackRate)
    parameters:
    - id: animDict
      type: System.String
    - id: animName
      type: System.String
    - id: speed
      type: System.Single
    - id: duration
      type: System.Int32
    - id: playbackRate
      type: System.Single
    content.vb: Public Sub PlayAnimation(animDict As String, animName As String, speed As Single, duration As Integer, playbackRate As Single)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(String, String, Single, Integer, Single)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(String, String, Single, Integer, Single)
  name.vb: PlayAnimation(String, String, Single, Integer, Single)
- uid: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Int32,System.Single)
  commentId: M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Int32,System.Single)
  id: PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Int32,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(CrClipAsset, AnimationBlendDelta, int, float)
  nameWithType: TaskInvoker.PlayAnimation(CrClipAsset, AnimationBlendDelta, int, float)
  fullName: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, int, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(CrClipAsset crClipAsset, AnimationBlendDelta blendSpeed, int duration, float startPhase)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: blendSpeed
      type: GTA.AnimationBlendDelta
    - id: duration
      type: System.Int32
    - id: startPhase
      type: System.Single
    content.vb: Public Sub PlayAnimation(crClipAsset As CrClipAsset, blendSpeed As AnimationBlendDelta, duration As Integer, startPhase As Single)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(CrClipAsset, AnimationBlendDelta, Integer, Single)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, Integer, Single)
  name.vb: PlayAnimation(CrClipAsset, AnimationBlendDelta, Integer, Single)
- uid: GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Int32,GTA.AnimationFlags)
  commentId: M:GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Int32,GTA.AnimationFlags)
  id: PlayAnimation(System.String,System.String,System.Single,System.Int32,GTA.AnimationFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(string, string, float, int, AnimationFlags)
  nameWithType: TaskInvoker.PlayAnimation(string, string, float, int, AnimationFlags)
  fullName: GTA.TaskInvoker.PlayAnimation(string, string, float, int, GTA.AnimationFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(string animDict, string animName, float blendInSpeed, int duration, AnimationFlags flags)
    parameters:
    - id: animDict
      type: System.String
    - id: animName
      type: System.String
    - id: blendInSpeed
      type: System.Single
    - id: duration
      type: System.Int32
    - id: flags
      type: GTA.AnimationFlags
    content.vb: Public Sub PlayAnimation(animDict As String, animName As String, blendInSpeed As Single, duration As Integer, flags As AnimationFlags)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(String, String, Single, Integer, AnimationFlags)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(String, String, Single, Integer, GTA.AnimationFlags)
  name.vb: PlayAnimation(String, String, Single, Integer, AnimationFlags)
- uid: GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Single,System.Int32,GTA.AnimationFlags,System.Single)
  commentId: M:GTA.TaskInvoker.PlayAnimation(System.String,System.String,System.Single,System.Single,System.Int32,GTA.AnimationFlags,System.Single)
  id: PlayAnimation(System.String,System.String,System.Single,System.Single,System.Int32,GTA.AnimationFlags,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(string, string, float, float, int, AnimationFlags, float)
  nameWithType: TaskInvoker.PlayAnimation(string, string, float, float, int, AnimationFlags, float)
  fullName: GTA.TaskInvoker.PlayAnimation(string, string, float, float, int, GTA.AnimationFlags, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(string animDict, string animName, float blendInSpeed, float blendOutSpeed, int duration, AnimationFlags flags, float playbackRate)
    parameters:
    - id: animDict
      type: System.String
    - id: animName
      type: System.String
    - id: blendInSpeed
      type: System.Single
    - id: blendOutSpeed
      type: System.Single
    - id: duration
      type: System.Int32
    - id: flags
      type: GTA.AnimationFlags
    - id: playbackRate
      type: System.Single
    content.vb: Public Sub PlayAnimation(animDict As String, animName As String, blendInSpeed As Single, blendOutSpeed As Single, duration As Integer, flags As AnimationFlags, playbackRate As Single)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(String, String, Single, Single, Integer, AnimationFlags, Single)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(String, String, Single, Single, Integer, GTA.AnimationFlags, Single)
  name.vb: PlayAnimation(String, String, Single, Single, Integer, AnimationFlags, Single)
- uid: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single)
  commentId: M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single)
  id: PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, int, AnimationFlags, float)
  nameWithType: TaskInvoker.PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, int, AnimationFlags, float)
  fullName: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta, int, GTA.AnimationFlags, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(CrClipAsset crClipAsset, AnimationBlendDelta blendInSpeed, AnimationBlendDelta blendOutSpeed, int duration, AnimationFlags flags, float startPhase)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: blendInSpeed
      type: GTA.AnimationBlendDelta
    - id: blendOutSpeed
      type: GTA.AnimationBlendDelta
    - id: duration
      type: System.Int32
    - id: flags
      type: GTA.AnimationFlags
    - id: startPhase
      type: System.Single
    content.vb: Public Sub PlayAnimation(crClipAsset As CrClipAsset, blendInSpeed As AnimationBlendDelta, blendOutSpeed As AnimationBlendDelta, duration As Integer, flags As AnimationFlags, startPhase As Single)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, Integer, AnimationFlags, Single)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta, Integer, GTA.AnimationFlags, Single)
  name.vb: PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, Integer, AnimationFlags, Single)
- uid: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single,System.Boolean,GTA.AnimationIKControlFlags)
  commentId: M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single,System.Boolean,GTA.AnimationIKControlFlags)
  id: PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,System.Int32,GTA.AnimationFlags,System.Single,System.Boolean,GTA.AnimationIKControlFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, int, AnimationFlags, float, bool, AnimationIKControlFlags)
  nameWithType: TaskInvoker.PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, int, AnimationFlags, float, bool, AnimationIKControlFlags)
  fullName: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta, int, GTA.AnimationFlags, float, bool, GTA.AnimationIKControlFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimation(CrClipAsset crClipAsset, AnimationBlendDelta blendInSpeed, AnimationBlendDelta blendOutSpeed, int duration, AnimationFlags flags, float startPhase, bool phaseControlled, AnimationIKControlFlags ikFlags)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: blendInSpeed
      type: GTA.AnimationBlendDelta
    - id: blendOutSpeed
      type: GTA.AnimationBlendDelta
    - id: duration
      type: System.Int32
    - id: flags
      type: GTA.AnimationFlags
    - id: startPhase
      type: System.Single
    - id: phaseControlled
      type: System.Boolean
    - id: ikFlags
      type: GTA.AnimationIKControlFlags
    content.vb: Public Sub PlayAnimation(crClipAsset As CrClipAsset, blendInSpeed As AnimationBlendDelta, blendOutSpeed As AnimationBlendDelta, duration As Integer, flags As AnimationFlags, startPhase As Single, phaseControlled As Boolean, ikFlags As AnimationIKControlFlags)
  overload: GTA.TaskInvoker.PlayAnimation*
  nameWithType.vb: TaskInvoker.PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, Integer, AnimationFlags, Single, Boolean, AnimationIKControlFlags)
  fullName.vb: GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta, Integer, GTA.AnimationFlags, Single, Boolean, GTA.AnimationIKControlFlags)
  name.vb: PlayAnimation(CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, Integer, AnimationFlags, Single, Boolean, AnimationIKControlFlags)
- uid: GTA.TaskInvoker.PlayAnimationAdvanced(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,System.Nullable{GTA.AnimationBlendDelta},System.Nullable{GTA.AnimationBlendDelta},System.Int32,GTA.AnimationFlags,System.Single,GTA.EulerRotationOrder,GTA.AnimationIKControlFlags)
  commentId: M:GTA.TaskInvoker.PlayAnimationAdvanced(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,System.Nullable{GTA.AnimationBlendDelta},System.Nullable{GTA.AnimationBlendDelta},System.Int32,GTA.AnimationFlags,System.Single,GTA.EulerRotationOrder,GTA.AnimationIKControlFlags)
  id: PlayAnimationAdvanced(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,System.Nullable{GTA.AnimationBlendDelta},System.Nullable{GTA.AnimationBlendDelta},System.Int32,GTA.AnimationFlags,System.Single,GTA.EulerRotationOrder,GTA.AnimationIKControlFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlayAnimationAdvanced(CrClipAsset, Vector3, Vector3, AnimationBlendDelta?, AnimationBlendDelta?, int, AnimationFlags, float, EulerRotationOrder, AnimationIKControlFlags)
  nameWithType: TaskInvoker.PlayAnimationAdvanced(CrClipAsset, Vector3, Vector3, AnimationBlendDelta?, AnimationBlendDelta?, int, AnimationFlags, float, EulerRotationOrder, AnimationIKControlFlags)
  fullName: GTA.TaskInvoker.PlayAnimationAdvanced(GTA.CrClipAsset, GTA.Math.Vector3, GTA.Math.Vector3, GTA.AnimationBlendDelta?, GTA.AnimationBlendDelta?, int, GTA.AnimationFlags, float, GTA.EulerRotationOrder, GTA.AnimationIKControlFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlayAnimationAdvanced(CrClipAsset crClipAsset, Vector3 position, Vector3 rotation, AnimationBlendDelta? blendInDelta = null, AnimationBlendDelta? blendOutDelta = null, int timeToPlay = -1, AnimationFlags flags = AnimationFlags.None, float startPhase = 0, EulerRotationOrder rotOrder = EulerRotationOrder.YXZ, AnimationIKControlFlags ikFlags = AnimationIKControlFlags.None)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: blendInDelta
      type: System.Nullable{GTA.AnimationBlendDelta}
    - id: blendOutDelta
      type: System.Nullable{GTA.AnimationBlendDelta}
    - id: timeToPlay
      type: System.Int32
    - id: flags
      type: GTA.AnimationFlags
    - id: startPhase
      type: System.Single
    - id: rotOrder
      type: GTA.EulerRotationOrder
    - id: ikFlags
      type: GTA.AnimationIKControlFlags
    content.vb: Public Sub PlayAnimationAdvanced(crClipAsset As CrClipAsset, position As Vector3, rotation As Vector3, blendInDelta As AnimationBlendDelta? = Nothing, blendOutDelta As AnimationBlendDelta? = Nothing, timeToPlay As Integer = -1, flags As AnimationFlags = AnimationFlags.None, startPhase As Single = 0, rotOrder As EulerRotationOrder = EulerRotationOrder.YXZ, ikFlags As AnimationIKControlFlags = AnimationIKControlFlags.None)
  overload: GTA.TaskInvoker.PlayAnimationAdvanced*
  nameWithType.vb: TaskInvoker.PlayAnimationAdvanced(CrClipAsset, Vector3, Vector3, AnimationBlendDelta?, AnimationBlendDelta?, Integer, AnimationFlags, Single, EulerRotationOrder, AnimationIKControlFlags)
  fullName.vb: GTA.TaskInvoker.PlayAnimationAdvanced(GTA.CrClipAsset, GTA.Math.Vector3, GTA.Math.Vector3, GTA.AnimationBlendDelta?, GTA.AnimationBlendDelta?, Integer, GTA.AnimationFlags, Single, GTA.EulerRotationOrder, GTA.AnimationIKControlFlags)
  name.vb: PlayAnimationAdvanced(CrClipAsset, Vector3, Vector3, AnimationBlendDelta?, AnimationBlendDelta?, Integer, AnimationFlags, Single, EulerRotationOrder, AnimationIKControlFlags)
- uid: GTA.TaskInvoker.PlaySynchronizedScene(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,GTA.SyncedSceneFlags,GTA.RagdollBlockingFlags,System.Nullable{GTA.AnimationBlendDelta},GTA.AnimationIKControlFlags)
  commentId: M:GTA.TaskInvoker.PlaySynchronizedScene(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,GTA.SyncedSceneFlags,GTA.RagdollBlockingFlags,System.Nullable{GTA.AnimationBlendDelta},GTA.AnimationIKControlFlags)
  id: PlaySynchronizedScene(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,GTA.SyncedSceneFlags,GTA.RagdollBlockingFlags,System.Nullable{GTA.AnimationBlendDelta},GTA.AnimationIKControlFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlaySynchronizedScene(FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, SyncedSceneFlags, RagdollBlockingFlags, AnimationBlendDelta?, AnimationIKControlFlags)
  nameWithType: TaskInvoker.PlaySynchronizedScene(FwSyncedScene, CrClipAsset, AnimationBlendDelta, AnimationBlendDelta, SyncedSceneFlags, RagdollBlockingFlags, AnimationBlendDelta?, AnimationIKControlFlags)
  fullName: GTA.TaskInvoker.PlaySynchronizedScene(GTA.FwSyncedScene, GTA.CrClipAsset, GTA.AnimationBlendDelta, GTA.AnimationBlendDelta, GTA.SyncedSceneFlags, GTA.RagdollBlockingFlags, GTA.AnimationBlendDelta?, GTA.AnimationIKControlFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlaySynchronizedScene(FwSyncedScene scene, CrClipAsset anim, AnimationBlendDelta blendIn, AnimationBlendDelta blendOut, SyncedSceneFlags flags = SyncedSceneFlags.None, RagdollBlockingFlags ragdollFlags = RagdollBlockingFlags.None, AnimationBlendDelta? moverBlendIn = null, AnimationIKControlFlags ikFlags = AnimationIKControlFlags.None)
    parameters:
    - id: scene
      type: GTA.FwSyncedScene
    - id: anim
      type: GTA.CrClipAsset
    - id: blendIn
      type: GTA.AnimationBlendDelta
    - id: blendOut
      type: GTA.AnimationBlendDelta
    - id: flags
      type: GTA.SyncedSceneFlags
    - id: ragdollFlags
      type: GTA.RagdollBlockingFlags
    - id: moverBlendIn
      type: System.Nullable{GTA.AnimationBlendDelta}
    - id: ikFlags
      type: GTA.AnimationIKControlFlags
    content.vb: Public Sub PlaySynchronizedScene(scene As FwSyncedScene, anim As CrClipAsset, blendIn As AnimationBlendDelta, blendOut As AnimationBlendDelta, flags As SyncedSceneFlags = SyncedSceneFlags.None, ragdollFlags As RagdollBlockingFlags = RagdollBlockingFlags.None, moverBlendIn As AnimationBlendDelta? = Nothing, ikFlags As AnimationIKControlFlags = AnimationIKControlFlags.None)
  overload: GTA.TaskInvoker.PlaySynchronizedScene*
- uid: GTA.TaskInvoker.StartMoveNetworkByName(System.String,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  commentId: M:GTA.TaskInvoker.StartMoveNetworkByName(System.String,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  id: StartMoveNetworkByName(System.String,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartMoveNetworkByName(string, AnimationBlendDuration?, MoveNetworkFlags)
  nameWithType: TaskInvoker.StartMoveNetworkByName(string, AnimationBlendDuration?, MoveNetworkFlags)
  fullName: GTA.TaskInvoker.StartMoveNetworkByName(string, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartMoveNetworkByName(string networkName, AnimationBlendDuration? blendDuration = null, MoveNetworkFlags flags = MoveNetworkFlags.Default)
    parameters:
    - id: networkName
      type: System.String
    - id: blendDuration
      type: System.Nullable{GTA.AnimationBlendDuration}
    - id: flags
      type: GTA.MoveNetworkFlags
    content.vb: Public Sub StartMoveNetworkByName(networkName As String, blendDuration As AnimationBlendDuration? = Nothing, flags As MoveNetworkFlags = MoveNetworkFlags.Default)
  overload: GTA.TaskInvoker.StartMoveNetworkByName*
  nameWithType.vb: TaskInvoker.StartMoveNetworkByName(String, AnimationBlendDuration?, MoveNetworkFlags)
  fullName.vb: GTA.TaskInvoker.StartMoveNetworkByName(String, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  name.vb: StartMoveNetworkByName(String, AnimationBlendDuration?, MoveNetworkFlags)
- uid: GTA.TaskInvoker.StartMoveNetworkAdvancedByName(System.String,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  commentId: M:GTA.TaskInvoker.StartMoveNetworkAdvancedByName(System.String,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  id: StartMoveNetworkAdvancedByName(System.String,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartMoveNetworkAdvancedByName(string, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
  nameWithType: TaskInvoker.StartMoveNetworkAdvancedByName(string, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
  fullName: GTA.TaskInvoker.StartMoveNetworkAdvancedByName(string, GTA.Math.Vector3, GTA.Math.Vector3, GTA.EulerRotationOrder, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartMoveNetworkAdvancedByName(string networkName, Vector3 pos, Vector3 rot, EulerRotationOrder rotOrder = EulerRotationOrder.YXZ, AnimationBlendDuration? blendDuration = null, MoveNetworkFlags flags = MoveNetworkFlags.Default)
    parameters:
    - id: networkName
      type: System.String
    - id: pos
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: rotOrder
      type: GTA.EulerRotationOrder
    - id: blendDuration
      type: System.Nullable{GTA.AnimationBlendDuration}
    - id: flags
      type: GTA.MoveNetworkFlags
    content.vb: Public Sub StartMoveNetworkAdvancedByName(networkName As String, pos As Vector3, rot As Vector3, rotOrder As EulerRotationOrder = EulerRotationOrder.YXZ, blendDuration As AnimationBlendDuration? = Nothing, flags As MoveNetworkFlags = MoveNetworkFlags.Default)
  overload: GTA.TaskInvoker.StartMoveNetworkAdvancedByName*
  nameWithType.vb: TaskInvoker.StartMoveNetworkAdvancedByName(String, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
  fullName.vb: GTA.TaskInvoker.StartMoveNetworkAdvancedByName(String, GTA.Math.Vector3, GTA.Math.Vector3, GTA.EulerRotationOrder, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  name.vb: StartMoveNetworkAdvancedByName(String, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
- uid: GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  commentId: M:GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  id: StartMoveNetworkByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartMoveNetworkByNameWithInitParams(string, TaskMoVEScriptedInitialParameters, AnimationBlendDuration?, MoveNetworkFlags)
  nameWithType: TaskInvoker.StartMoveNetworkByNameWithInitParams(string, TaskMoVEScriptedInitialParameters, AnimationBlendDuration?, MoveNetworkFlags)
  fullName: GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams(string, GTA.TaskMoVEScriptedInitialParameters, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartMoveNetworkByNameWithInitParams(string networkName, TaskMoVEScriptedInitialParameters initParams, AnimationBlendDuration? blendDuration = null, MoveNetworkFlags flags = MoveNetworkFlags.Default)
    parameters:
    - id: networkName
      type: System.String
    - id: initParams
      type: GTA.TaskMoVEScriptedInitialParameters
    - id: blendDuration
      type: System.Nullable{GTA.AnimationBlendDuration}
    - id: flags
      type: GTA.MoveNetworkFlags
    content.vb: Public Sub StartMoveNetworkByNameWithInitParams(networkName As String, initParams As TaskMoVEScriptedInitialParameters, blendDuration As AnimationBlendDuration? = Nothing, flags As MoveNetworkFlags = MoveNetworkFlags.Default)
  overload: GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams*
  nameWithType.vb: TaskInvoker.StartMoveNetworkByNameWithInitParams(String, TaskMoVEScriptedInitialParameters, AnimationBlendDuration?, MoveNetworkFlags)
  fullName.vb: GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams(String, GTA.TaskMoVEScriptedInitialParameters, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  name.vb: StartMoveNetworkByNameWithInitParams(String, TaskMoVEScriptedInitialParameters, AnimationBlendDuration?, MoveNetworkFlags)
- uid: GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  commentId: M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  id: StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartMoveNetworkAdvancedByNameWithInitParams(string, TaskMoVEScriptedInitialParameters, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
  nameWithType: TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(string, TaskMoVEScriptedInitialParameters, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
  fullName: GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(string, GTA.TaskMoVEScriptedInitialParameters, GTA.Math.Vector3, GTA.Math.Vector3, GTA.EulerRotationOrder, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartMoveNetworkAdvancedByNameWithInitParams(string networkName, TaskMoVEScriptedInitialParameters initParams, Vector3 pos, Vector3 rot, EulerRotationOrder rotOrder = EulerRotationOrder.YXZ, AnimationBlendDuration? blendDuration = null, MoveNetworkFlags flags = MoveNetworkFlags.Default)
    parameters:
    - id: networkName
      type: System.String
    - id: initParams
      type: GTA.TaskMoVEScriptedInitialParameters
    - id: pos
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: rotOrder
      type: GTA.EulerRotationOrder
    - id: blendDuration
      type: System.Nullable{GTA.AnimationBlendDuration}
    - id: flags
      type: GTA.MoveNetworkFlags
    content.vb: Public Sub StartMoveNetworkAdvancedByNameWithInitParams(networkName As String, initParams As TaskMoVEScriptedInitialParameters, pos As Vector3, rot As Vector3, rotOrder As EulerRotationOrder = EulerRotationOrder.YXZ, blendDuration As AnimationBlendDuration? = Nothing, flags As MoveNetworkFlags = MoveNetworkFlags.Default)
  overload: GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams*
  nameWithType.vb: TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(String, TaskMoVEScriptedInitialParameters, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
  fullName.vb: GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(String, GTA.TaskMoVEScriptedInitialParameters, GTA.Math.Vector3, GTA.Math.Vector3, GTA.EulerRotationOrder, GTA.AnimationBlendDuration?, GTA.MoveNetworkFlags)
  name.vb: StartMoveNetworkAdvancedByNameWithInitParams(String, TaskMoVEScriptedInitialParameters, Vector3, Vector3, EulerRotationOrder, AnimationBlendDuration?, MoveNetworkFlags)
- uid: GTA.TaskInvoker.RappelFromHelicopter
  commentId: M:GTA.TaskInvoker.RappelFromHelicopter
  id: RappelFromHelicopter
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: RappelFromHelicopter()
  nameWithType: TaskInvoker.RappelFromHelicopter()
  fullName: GTA.TaskInvoker.RappelFromHelicopter()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void RappelFromHelicopter()
    content.vb: Public Sub RappelFromHelicopter()
  overload: GTA.TaskInvoker.RappelFromHelicopter*
- uid: GTA.TaskInvoker.ReactAndFlee(GTA.Ped)
  commentId: M:GTA.TaskInvoker.ReactAndFlee(GTA.Ped)
  id: ReactAndFlee(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ReactAndFlee(Ped)
  nameWithType: TaskInvoker.ReactAndFlee(Ped)
  fullName: GTA.TaskInvoker.ReactAndFlee(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ReactAndFlee(Ped ped)
    parameters:
    - id: ped
      type: GTA.Ped
    content.vb: Public Sub ReactAndFlee(ped As Ped)
  overload: GTA.TaskInvoker.ReactAndFlee*
- uid: GTA.TaskInvoker.ReloadWeapon
  commentId: M:GTA.TaskInvoker.ReloadWeapon
  id: ReloadWeapon
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ReloadWeapon()
  nameWithType: TaskInvoker.ReloadWeapon()
  fullName: GTA.TaskInvoker.ReloadWeapon()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ReloadWeapon()
    content.vb: Public Sub ReloadWeapon()
  overload: GTA.TaskInvoker.ReloadWeapon*
- uid: GTA.TaskInvoker.RunTo(GTA.Math.Vector3,System.Boolean,System.Int32)
  commentId: M:GTA.TaskInvoker.RunTo(GTA.Math.Vector3,System.Boolean,System.Int32)
  id: RunTo(GTA.Math.Vector3,System.Boolean,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: RunTo(Vector3, bool, int)
  nameWithType: TaskInvoker.RunTo(Vector3, bool, int)
  fullName: GTA.TaskInvoker.RunTo(GTA.Math.Vector3, bool, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void RunTo(Vector3 position, bool ignorePaths = false, int timeout = -1)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: ignorePaths
      type: System.Boolean
    - id: timeout
      type: System.Int32
    content.vb: Public Sub RunTo(position As Vector3, ignorePaths As Boolean = False, timeout As Integer = -1)
  overload: GTA.TaskInvoker.RunTo*
  nameWithType.vb: TaskInvoker.RunTo(Vector3, Boolean, Integer)
  fullName.vb: GTA.TaskInvoker.RunTo(GTA.Math.Vector3, Boolean, Integer)
  name.vb: RunTo(Vector3, Boolean, Integer)
- uid: GTA.TaskInvoker.ShootAt(GTA.Ped,System.Int32,GTA.FiringPattern)
  commentId: M:GTA.TaskInvoker.ShootAt(GTA.Ped,System.Int32,GTA.FiringPattern)
  id: ShootAt(GTA.Ped,System.Int32,GTA.FiringPattern)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ShootAt(Ped, int, FiringPattern)
  nameWithType: TaskInvoker.ShootAt(Ped, int, FiringPattern)
  fullName: GTA.TaskInvoker.ShootAt(GTA.Ped, int, GTA.FiringPattern)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ShootAt(Ped target, int duration = -1, FiringPattern pattern = FiringPattern.Default)
    parameters:
    - id: target
      type: GTA.Ped
    - id: duration
      type: System.Int32
    - id: pattern
      type: GTA.FiringPattern
    content.vb: Public Sub ShootAt(target As Ped, duration As Integer = -1, pattern As FiringPattern = FiringPattern.Default)
  overload: GTA.TaskInvoker.ShootAt*
  nameWithType.vb: TaskInvoker.ShootAt(Ped, Integer, FiringPattern)
  fullName.vb: GTA.TaskInvoker.ShootAt(GTA.Ped, Integer, GTA.FiringPattern)
  name.vb: ShootAt(Ped, Integer, FiringPattern)
- uid: GTA.TaskInvoker.ShootAt(GTA.Math.Vector3,System.Int32,GTA.FiringPattern)
  commentId: M:GTA.TaskInvoker.ShootAt(GTA.Math.Vector3,System.Int32,GTA.FiringPattern)
  id: ShootAt(GTA.Math.Vector3,System.Int32,GTA.FiringPattern)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ShootAt(Vector3, int, FiringPattern)
  nameWithType: TaskInvoker.ShootAt(Vector3, int, FiringPattern)
  fullName: GTA.TaskInvoker.ShootAt(GTA.Math.Vector3, int, GTA.FiringPattern)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ShootAt(Vector3 position, int duration = -1, FiringPattern pattern = FiringPattern.Default)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    - id: pattern
      type: GTA.FiringPattern
    content.vb: Public Sub ShootAt(position As Vector3, duration As Integer = -1, pattern As FiringPattern = FiringPattern.Default)
  overload: GTA.TaskInvoker.ShootAt*
  nameWithType.vb: TaskInvoker.ShootAt(Vector3, Integer, FiringPattern)
  fullName.vb: GTA.TaskInvoker.ShootAt(GTA.Math.Vector3, Integer, GTA.FiringPattern)
  name.vb: ShootAt(Vector3, Integer, FiringPattern)
- uid: GTA.TaskInvoker.ShuffleToNextVehicleSeat(GTA.Vehicle)
  commentId: M:GTA.TaskInvoker.ShuffleToNextVehicleSeat(GTA.Vehicle)
  id: ShuffleToNextVehicleSeat(GTA.Vehicle)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ShuffleToNextVehicleSeat(Vehicle)
  nameWithType: TaskInvoker.ShuffleToNextVehicleSeat(Vehicle)
  fullName: GTA.TaskInvoker.ShuffleToNextVehicleSeat(GTA.Vehicle)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ShuffleToNextVehicleSeat(Vehicle vehicle = null)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    content.vb: Public Sub ShuffleToNextVehicleSeat(vehicle As Vehicle = Nothing)
  overload: GTA.TaskInvoker.ShuffleToNextVehicleSeat*
- uid: GTA.TaskInvoker.Skydive
  commentId: M:GTA.TaskInvoker.Skydive
  id: Skydive
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Skydive()
  nameWithType: TaskInvoker.Skydive()
  fullName: GTA.TaskInvoker.Skydive()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Skydive()
    content.vb: Public Sub Skydive()
  overload: GTA.TaskInvoker.Skydive*
- uid: GTA.TaskInvoker.SlideTo(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.TaskInvoker.SlideTo(GTA.Math.Vector3,System.Single)
  id: SlideTo(GTA.Math.Vector3,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: SlideTo(Vector3, float)
  nameWithType: TaskInvoker.SlideTo(Vector3, float)
  fullName: GTA.TaskInvoker.SlideTo(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SlideTo(Vector3 position, float heading)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    content.vb: Public Sub SlideTo(position As Vector3, heading As Single)
  overload: GTA.TaskInvoker.SlideTo*
  nameWithType.vb: TaskInvoker.SlideTo(Vector3, Single)
  fullName.vb: GTA.TaskInvoker.SlideTo(GTA.Math.Vector3, Single)
  name.vb: SlideTo(Vector3, Single)
- uid: GTA.TaskInvoker.Pause(System.Int32)
  commentId: M:GTA.TaskInvoker.Pause(System.Int32)
  id: Pause(System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Pause(int)
  nameWithType: TaskInvoker.Pause(int)
  fullName: GTA.TaskInvoker.Pause(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Pause(int duration)
    parameters:
    - id: duration
      type: System.Int32
    content.vb: Public Sub Pause(duration As Integer)
  overload: GTA.TaskInvoker.Pause*
  nameWithType.vb: TaskInvoker.Pause(Integer)
  fullName.vb: GTA.TaskInvoker.Pause(Integer)
  name.vb: Pause(Integer)
- uid: GTA.TaskInvoker.StandStill(System.Int32)
  commentId: M:GTA.TaskInvoker.StandStill(System.Int32)
  id: StandStill(System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StandStill(int)
  nameWithType: TaskInvoker.StandStill(int)
  fullName: GTA.TaskInvoker.StandStill(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StandStill(int duration)
    parameters:
    - id: duration
      type: System.Int32
    content.vb: Public Sub StandStill(duration As Integer)
  overload: GTA.TaskInvoker.StandStill*
  nameWithType.vb: TaskInvoker.StandStill(Integer)
  fullName.vb: GTA.TaskInvoker.StandStill(Integer)
  name.vb: StandStill(Integer)
- uid: GTA.TaskInvoker.StartScenario(System.String,System.Single)
  commentId: M:GTA.TaskInvoker.StartScenario(System.String,System.Single)
  id: StartScenario(System.String,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartScenario(string, float)
  nameWithType: TaskInvoker.StartScenario(string, float)
  fullName: GTA.TaskInvoker.StartScenario(string, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("TaskInvoker.StartScenario is obsolete, use TaskInvoker.StartScenarioInPlace instead.")]

      public void StartScenario(string name, float heading)
    parameters:
    - id: name
      type: System.String
    - id: heading
      type: System.Single
    content.vb: >-
      <Obsolete("TaskInvoker.StartScenario is obsolete, use TaskInvoker.StartScenarioInPlace instead.")>

      Public Sub StartScenario(name As String, heading As Single)
  overload: GTA.TaskInvoker.StartScenario*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: TaskInvoker.StartScenario is obsolete, use TaskInvoker.StartScenarioInPlace instead.
  nameWithType.vb: TaskInvoker.StartScenario(String, Single)
  fullName.vb: GTA.TaskInvoker.StartScenario(String, Single)
  name.vb: StartScenario(String, Single)
- uid: GTA.TaskInvoker.StartScenario(System.String,GTA.Math.Vector3,System.Single)
  commentId: M:GTA.TaskInvoker.StartScenario(System.String,GTA.Math.Vector3,System.Single)
  id: StartScenario(System.String,GTA.Math.Vector3,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartScenario(string, Vector3, float)
  nameWithType: TaskInvoker.StartScenario(string, Vector3, float)
  fullName: GTA.TaskInvoker.StartScenario(string, GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("TaskInvoker.StartScenario is obsolete, use TaskInvoker.StartScenarioAtPosition instead.")]

      public void StartScenario(string name, Vector3 position, float heading)
    parameters:
    - id: name
      type: System.String
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    content.vb: >-
      <Obsolete("TaskInvoker.StartScenario is obsolete, use TaskInvoker.StartScenarioAtPosition instead.")>

      Public Sub StartScenario(name As String, position As Vector3, heading As Single)
  overload: GTA.TaskInvoker.StartScenario*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: TaskInvoker.StartScenario is obsolete, use TaskInvoker.StartScenarioAtPosition instead.
  nameWithType.vb: TaskInvoker.StartScenario(String, Vector3, Single)
  fullName.vb: GTA.TaskInvoker.StartScenario(String, GTA.Math.Vector3, Single)
  name.vb: StartScenario(String, Vector3, Single)
- uid: GTA.TaskInvoker.StartScenarioInPlace(System.String,System.Int32,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartScenarioInPlace(System.String,System.Int32,System.Boolean)
  id: StartScenarioInPlace(System.String,System.Int32,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartScenarioInPlace(string, int, bool)
  nameWithType: TaskInvoker.StartScenarioInPlace(string, int, bool)
  fullName: GTA.TaskInvoker.StartScenarioInPlace(string, int, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartScenarioInPlace(string scenarioName, int timeToLeave = 0, bool playIntroClip = true)
    parameters:
    - id: scenarioName
      type: System.String
    - id: timeToLeave
      type: System.Int32
    - id: playIntroClip
      type: System.Boolean
    content.vb: Public Sub StartScenarioInPlace(scenarioName As String, timeToLeave As Integer = 0, playIntroClip As Boolean = True)
  overload: GTA.TaskInvoker.StartScenarioInPlace*
  nameWithType.vb: TaskInvoker.StartScenarioInPlace(String, Integer, Boolean)
  fullName.vb: GTA.TaskInvoker.StartScenarioInPlace(String, Integer, Boolean)
  name.vb: StartScenarioInPlace(String, Integer, Boolean)
- uid: GTA.TaskInvoker.StartScenarioAtPosition(System.String,GTA.Math.Vector3,System.Single,System.Int32,System.Boolean,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartScenarioAtPosition(System.String,GTA.Math.Vector3,System.Single,System.Int32,System.Boolean,System.Boolean)
  id: StartScenarioAtPosition(System.String,GTA.Math.Vector3,System.Single,System.Int32,System.Boolean,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartScenarioAtPosition(string, Vector3, float, int, bool, bool)
  nameWithType: TaskInvoker.StartScenarioAtPosition(string, Vector3, float, int, bool, bool)
  fullName: GTA.TaskInvoker.StartScenarioAtPosition(string, GTA.Math.Vector3, float, int, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartScenarioAtPosition(string scenarioName, Vector3 position, float heading, int timeToLeave = 0, bool playIntroClip = true, bool warp = true)
    parameters:
    - id: scenarioName
      type: System.String
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    - id: timeToLeave
      type: System.Int32
    - id: playIntroClip
      type: System.Boolean
    - id: warp
      type: System.Boolean
    content.vb: Public Sub StartScenarioAtPosition(scenarioName As String, position As Vector3, heading As Single, timeToLeave As Integer = 0, playIntroClip As Boolean = True, warp As Boolean = True)
  overload: GTA.TaskInvoker.StartScenarioAtPosition*
  nameWithType.vb: TaskInvoker.StartScenarioAtPosition(String, Vector3, Single, Integer, Boolean, Boolean)
  fullName.vb: GTA.TaskInvoker.StartScenarioAtPosition(String, GTA.Math.Vector3, Single, Integer, Boolean, Boolean)
  name.vb: StartScenarioAtPosition(String, Vector3, Single, Integer, Boolean, Boolean)
- uid: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  id: StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartVehicleMission(Vehicle, Vehicle, VehicleMissionType, float, VehicleDrivingFlags, float, float, bool)
  nameWithType: TaskInvoker.StartVehicleMission(Vehicle, Vehicle, VehicleMissionType, float, VehicleDrivingFlags, float, float, bool)
  fullName: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, float, GTA.VehicleDrivingFlags, float, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartVehicleMission(Vehicle vehicle, Vehicle target, VehicleMissionType missionType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float targetReachedDist, float straightLineDist, bool driveAgainstTraffic = true)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: target
      type: GTA.Vehicle
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: targetReachedDist
      type: System.Single
    - id: straightLineDist
      type: System.Single
    - id: driveAgainstTraffic
      type: System.Boolean
    content.vb: Public Sub StartVehicleMission(vehicle As Vehicle, target As Vehicle, missionType As VehicleMissionType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, targetReachedDist As Single, straightLineDist As Single, driveAgainstTraffic As Boolean = True)
  overload: GTA.TaskInvoker.StartVehicleMission*
  nameWithType.vb: TaskInvoker.StartVehicleMission(Vehicle, Vehicle, VehicleMissionType, Single, VehicleDrivingFlags, Single, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, Single, GTA.VehicleDrivingFlags, Single, Single, Boolean)
  name.vb: StartVehicleMission(Vehicle, Vehicle, VehicleMissionType, Single, VehicleDrivingFlags, Single, Single, Boolean)
- uid: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  id: StartVehicleMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartVehicleMission(Vehicle, Ped, VehicleMissionType, float, VehicleDrivingFlags, float, float, bool)
  nameWithType: TaskInvoker.StartVehicleMission(Vehicle, Ped, VehicleMissionType, float, VehicleDrivingFlags, float, float, bool)
  fullName: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, float, GTA.VehicleDrivingFlags, float, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartVehicleMission(Vehicle vehicle, Ped target, VehicleMissionType missionType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float targetReachedDist, float straightLineDist, bool driveAgainstTraffic = true)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: target
      type: GTA.Ped
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: targetReachedDist
      type: System.Single
    - id: straightLineDist
      type: System.Single
    - id: driveAgainstTraffic
      type: System.Boolean
    content.vb: Public Sub StartVehicleMission(vehicle As Vehicle, target As Ped, missionType As VehicleMissionType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, targetReachedDist As Single, straightLineDist As Single, driveAgainstTraffic As Boolean = True)
  overload: GTA.TaskInvoker.StartVehicleMission*
  nameWithType.vb: TaskInvoker.StartVehicleMission(Vehicle, Ped, VehicleMissionType, Single, VehicleDrivingFlags, Single, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, Single, GTA.VehicleDrivingFlags, Single, Single, Boolean)
  name.vb: StartVehicleMission(Vehicle, Ped, VehicleMissionType, Single, VehicleDrivingFlags, Single, Single, Boolean)
- uid: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  id: StartVehicleMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartVehicleMission(Vehicle, Vector3, VehicleMissionType, float, VehicleDrivingFlags, float, float, bool)
  nameWithType: TaskInvoker.StartVehicleMission(Vehicle, Vector3, VehicleMissionType, float, VehicleDrivingFlags, float, float, bool)
  fullName: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, float, GTA.VehicleDrivingFlags, float, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartVehicleMission(Vehicle vehicle, Vector3 target, VehicleMissionType missionType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float targetReachedDist, float straightLineDist, bool driveAgainstTraffic = true)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: target
      type: GTA.Math.Vector3
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: targetReachedDist
      type: System.Single
    - id: straightLineDist
      type: System.Single
    - id: driveAgainstTraffic
      type: System.Boolean
    content.vb: Public Sub StartVehicleMission(vehicle As Vehicle, target As Vector3, missionType As VehicleMissionType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, targetReachedDist As Single, straightLineDist As Single, driveAgainstTraffic As Boolean = True)
  overload: GTA.TaskInvoker.StartVehicleMission*
  nameWithType.vb: TaskInvoker.StartVehicleMission(Vehicle, Vector3, VehicleMissionType, Single, VehicleDrivingFlags, Single, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, Single, GTA.VehicleDrivingFlags, Single, Single, Boolean)
  name.vb: StartVehicleMission(Vehicle, Vector3, VehicleMissionType, Single, VehicleDrivingFlags, Single, Single, Boolean)
- uid: GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)
  commentId: M:GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)
  id: VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: VehicleEscort(Vehicle, Entity, VehicleEscortType, float, VehicleDrivingFlags, float, int, float)
  nameWithType: TaskInvoker.VehicleEscort(Vehicle, Entity, VehicleEscortType, float, VehicleDrivingFlags, float, int, float)
  fullName: GTA.TaskInvoker.VehicleEscort(GTA.Vehicle, GTA.Entity, GTA.VehicleEscortType, float, GTA.VehicleDrivingFlags, float, int, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void VehicleEscort(Vehicle vehicle, Entity escortEntity, VehicleEscortType escortType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float customOffset = -1, int minHeightAboveTerrain = 20, float straightLineDistance = 20)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: escortEntity
      type: GTA.Entity
    - id: escortType
      type: GTA.VehicleEscortType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: customOffset
      type: System.Single
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: straightLineDistance
      type: System.Single
    content.vb: Public Sub VehicleEscort(vehicle As Vehicle, escortEntity As Entity, escortType As VehicleEscortType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, customOffset As Single = -1, minHeightAboveTerrain As Integer = 20, straightLineDistance As Single = 20)
  overload: GTA.TaskInvoker.VehicleEscort*
  nameWithType.vb: TaskInvoker.VehicleEscort(Vehicle, Entity, VehicleEscortType, Single, VehicleDrivingFlags, Single, Integer, Single)
  fullName.vb: GTA.TaskInvoker.VehicleEscort(GTA.Vehicle, GTA.Entity, GTA.VehicleEscortType, Single, GTA.VehicleDrivingFlags, Single, Integer, Single)
  name.vb: VehicleEscort(Vehicle, Entity, VehicleEscortType, Single, VehicleDrivingFlags, Single, Integer, Single)
- uid: GTA.TaskInvoker.VehicleFollow(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Int32)
  commentId: M:GTA.TaskInvoker.VehicleFollow(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Int32)
  id: VehicleFollow(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: VehicleFollow(Vehicle, Entity, float, VehicleDrivingFlags, int)
  nameWithType: TaskInvoker.VehicleFollow(Vehicle, Entity, float, VehicleDrivingFlags, int)
  fullName: GTA.TaskInvoker.VehicleFollow(GTA.Vehicle, GTA.Entity, float, GTA.VehicleDrivingFlags, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void VehicleFollow(Vehicle vehicle, Entity followEntity, float cruiseSpeed, VehicleDrivingFlags drivingFlags, int followDistance = 20)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: followEntity
      type: GTA.Entity
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: followDistance
      type: System.Int32
    content.vb: Public Sub VehicleFollow(vehicle As Vehicle, followEntity As Entity, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, followDistance As Integer = 20)
  overload: GTA.TaskInvoker.VehicleFollow*
  nameWithType.vb: TaskInvoker.VehicleFollow(Vehicle, Entity, Single, VehicleDrivingFlags, Integer)
  fullName.vb: GTA.TaskInvoker.VehicleFollow(GTA.Vehicle, GTA.Entity, Single, GTA.VehicleDrivingFlags, Integer)
  name.vb: VehicleFollow(Vehicle, Entity, Single, VehicleDrivingFlags, Integer)
- uid: GTA.TaskInvoker.VehicleHeliProtect(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,GTA.HeliMissionFlags)
  commentId: M:GTA.TaskInvoker.VehicleHeliProtect(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,GTA.HeliMissionFlags)
  id: VehicleHeliProtect(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,GTA.HeliMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: VehicleHeliProtect(Vehicle, Entity, float, VehicleDrivingFlags, float, int, HeliMissionFlags)
  nameWithType: TaskInvoker.VehicleHeliProtect(Vehicle, Entity, float, VehicleDrivingFlags, float, int, HeliMissionFlags)
  fullName: GTA.TaskInvoker.VehicleHeliProtect(GTA.Vehicle, GTA.Entity, float, GTA.VehicleDrivingFlags, float, int, GTA.HeliMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void VehicleHeliProtect(Vehicle heli, Entity protectEntity, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float customOffset = -1, int minHeightAboveTerrain = 20, HeliMissionFlags missionFlags = HeliMissionFlags.None)
    parameters:
    - id: heli
      type: GTA.Vehicle
    - id: protectEntity
      type: GTA.Entity
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: customOffset
      type: System.Single
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: missionFlags
      type: GTA.HeliMissionFlags
    content.vb: Public Sub VehicleHeliProtect(heli As Vehicle, protectEntity As Entity, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, customOffset As Single = -1, minHeightAboveTerrain As Integer = 20, missionFlags As HeliMissionFlags = HeliMissionFlags.None)
  overload: GTA.TaskInvoker.VehicleHeliProtect*
  nameWithType.vb: TaskInvoker.VehicleHeliProtect(Vehicle, Entity, Single, VehicleDrivingFlags, Single, Integer, HeliMissionFlags)
  fullName.vb: GTA.TaskInvoker.VehicleHeliProtect(GTA.Vehicle, GTA.Entity, Single, GTA.VehicleDrivingFlags, Single, Integer, GTA.HeliMissionFlags)
  name.vb: VehicleHeliProtect(Vehicle, Entity, Single, VehicleDrivingFlags, Single, Integer, HeliMissionFlags)
- uid: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  commentId: M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  id: StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartHeliMission(Vehicle, Vehicle, VehicleMissionType, float, float, int, int, float, float, HeliMissionFlags)
  nameWithType: TaskInvoker.StartHeliMission(Vehicle, Vehicle, VehicleMissionType, float, float, int, int, float, float, HeliMissionFlags)
  fullName: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, float, float, int, int, float, float, GTA.HeliMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartHeliMission(Vehicle heli, Vehicle target, VehicleMissionType missionType, float cruiseSpeed, float targetReachedDist, int flightHeight, int minHeightAboveTerrain, float heliOrientation = -1, float slowDownDistance = -1, HeliMissionFlags missionFlags = HeliMissionFlags.None)
    parameters:
    - id: heli
      type: GTA.Vehicle
    - id: target
      type: GTA.Vehicle
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: heliOrientation
      type: System.Single
    - id: slowDownDistance
      type: System.Single
    - id: missionFlags
      type: GTA.HeliMissionFlags
    content.vb: Public Sub StartHeliMission(heli As Vehicle, target As Vehicle, missionType As VehicleMissionType, cruiseSpeed As Single, targetReachedDist As Single, flightHeight As Integer, minHeightAboveTerrain As Integer, heliOrientation As Single = -1, slowDownDistance As Single = -1, missionFlags As HeliMissionFlags = HeliMissionFlags.None)
  overload: GTA.TaskInvoker.StartHeliMission*
  nameWithType.vb: TaskInvoker.StartHeliMission(Vehicle, Vehicle, VehicleMissionType, Single, Single, Integer, Integer, Single, Single, HeliMissionFlags)
  fullName.vb: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, Single, Single, Integer, Integer, Single, Single, GTA.HeliMissionFlags)
  name.vb: StartHeliMission(Vehicle, Vehicle, VehicleMissionType, Single, Single, Integer, Integer, Single, Single, HeliMissionFlags)
- uid: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  commentId: M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  id: StartHeliMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartHeliMission(Vehicle, Ped, VehicleMissionType, float, float, int, int, float, float, HeliMissionFlags)
  nameWithType: TaskInvoker.StartHeliMission(Vehicle, Ped, VehicleMissionType, float, float, int, int, float, float, HeliMissionFlags)
  fullName: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, float, float, int, int, float, float, GTA.HeliMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartHeliMission(Vehicle heli, Ped target, VehicleMissionType missionType, float cruiseSpeed, float targetReachedDist, int flightHeight, int minHeightAboveTerrain, float heliOrientation = -1, float slowDownDistance = -1, HeliMissionFlags missionFlags = HeliMissionFlags.None)
    parameters:
    - id: heli
      type: GTA.Vehicle
    - id: target
      type: GTA.Ped
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: heliOrientation
      type: System.Single
    - id: slowDownDistance
      type: System.Single
    - id: missionFlags
      type: GTA.HeliMissionFlags
    content.vb: Public Sub StartHeliMission(heli As Vehicle, target As Ped, missionType As VehicleMissionType, cruiseSpeed As Single, targetReachedDist As Single, flightHeight As Integer, minHeightAboveTerrain As Integer, heliOrientation As Single = -1, slowDownDistance As Single = -1, missionFlags As HeliMissionFlags = HeliMissionFlags.None)
  overload: GTA.TaskInvoker.StartHeliMission*
  nameWithType.vb: TaskInvoker.StartHeliMission(Vehicle, Ped, VehicleMissionType, Single, Single, Integer, Integer, Single, Single, HeliMissionFlags)
  fullName.vb: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, Single, Single, Integer, Integer, Single, Single, GTA.HeliMissionFlags)
  name.vb: StartHeliMission(Vehicle, Ped, VehicleMissionType, Single, Single, Integer, Integer, Single, Single, HeliMissionFlags)
- uid: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  commentId: M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  id: StartHeliMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartHeliMission(Vehicle, Vector3, VehicleMissionType, float, float, int, int, float, float, HeliMissionFlags)
  nameWithType: TaskInvoker.StartHeliMission(Vehicle, Vector3, VehicleMissionType, float, float, int, int, float, float, HeliMissionFlags)
  fullName: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, float, float, int, int, float, float, GTA.HeliMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartHeliMission(Vehicle heli, Vector3 target, VehicleMissionType missionType, float cruiseSpeed, float targetReachedDist, int flightHeight, int minHeightAboveTerrain, float heliOrientation = -1, float slowDownDistance = -1, HeliMissionFlags missionFlags = HeliMissionFlags.None)
    parameters:
    - id: heli
      type: GTA.Vehicle
    - id: target
      type: GTA.Math.Vector3
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: heliOrientation
      type: System.Single
    - id: slowDownDistance
      type: System.Single
    - id: missionFlags
      type: GTA.HeliMissionFlags
    content.vb: Public Sub StartHeliMission(heli As Vehicle, target As Vector3, missionType As VehicleMissionType, cruiseSpeed As Single, targetReachedDist As Single, flightHeight As Integer, minHeightAboveTerrain As Integer, heliOrientation As Single = -1, slowDownDistance As Single = -1, missionFlags As HeliMissionFlags = HeliMissionFlags.None)
  overload: GTA.TaskInvoker.StartHeliMission*
  nameWithType.vb: TaskInvoker.StartHeliMission(Vehicle, Vector3, VehicleMissionType, Single, Single, Integer, Integer, Single, Single, HeliMissionFlags)
  fullName.vb: GTA.TaskInvoker.StartHeliMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, Single, Single, Integer, Integer, Single, Single, GTA.HeliMissionFlags)
  name.vb: StartHeliMission(Vehicle, Vector3, VehicleMissionType, Single, Single, Integer, Integer, Single, Single, HeliMissionFlags)
- uid: GTA.TaskInvoker.HeliEscortHeli(GTA.Vehicle,GTA.Vehicle,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.HeliEscortHeli(GTA.Vehicle,GTA.Vehicle,GTA.Math.Vector3)
  id: HeliEscortHeli(GTA.Vehicle,GTA.Vehicle,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: HeliEscortHeli(Vehicle, Vehicle, Vector3)
  nameWithType: TaskInvoker.HeliEscortHeli(Vehicle, Vehicle, Vector3)
  fullName: GTA.TaskInvoker.HeliEscortHeli(GTA.Vehicle, GTA.Vehicle, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void HeliEscortHeli(Vehicle heli, Vehicle escortHeli, Vector3 offset)
    parameters:
    - id: heli
      type: GTA.Vehicle
    - id: escortHeli
      type: GTA.Vehicle
    - id: offset
      type: GTA.Math.Vector3
    content.vb: Public Sub HeliEscortHeli(heli As Vehicle, escortHeli As Vehicle, offset As Vector3)
  overload: GTA.TaskInvoker.HeliEscortHeli*
- uid: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  id: StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartPlaneMission(Vehicle, Vehicle, VehicleMissionType, float, float, int, int, float, bool)
  nameWithType: TaskInvoker.StartPlaneMission(Vehicle, Vehicle, VehicleMissionType, float, float, int, int, float, bool)
  fullName: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, float, float, int, int, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartPlaneMission(Vehicle plane, Vehicle target, VehicleMissionType missionType, float cruiseSpeed, float targetReachedDist, int flightHeight, int minHeightAboveTerrain, float planeOrientation = -1, bool precise = true)
    parameters:
    - id: plane
      type: GTA.Vehicle
    - id: target
      type: GTA.Vehicle
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: planeOrientation
      type: System.Single
    - id: precise
      type: System.Boolean
    content.vb: Public Sub StartPlaneMission(plane As Vehicle, target As Vehicle, missionType As VehicleMissionType, cruiseSpeed As Single, targetReachedDist As Single, flightHeight As Integer, minHeightAboveTerrain As Integer, planeOrientation As Single = -1, precise As Boolean = True)
  overload: GTA.TaskInvoker.StartPlaneMission*
  nameWithType.vb: TaskInvoker.StartPlaneMission(Vehicle, Vehicle, VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
  name.vb: StartPlaneMission(Vehicle, Vehicle, VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
- uid: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  id: StartPlaneMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartPlaneMission(Vehicle, Ped, VehicleMissionType, float, float, int, int, float, bool)
  nameWithType: TaskInvoker.StartPlaneMission(Vehicle, Ped, VehicleMissionType, float, float, int, int, float, bool)
  fullName: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, float, float, int, int, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartPlaneMission(Vehicle plane, Ped target, VehicleMissionType missionType, float cruiseSpeed, float targetReachedDist, int flightHeight, int minHeightAboveTerrain, float planeOrientation = -1, bool precise = true)
    parameters:
    - id: plane
      type: GTA.Vehicle
    - id: target
      type: GTA.Ped
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: planeOrientation
      type: System.Single
    - id: precise
      type: System.Boolean
    content.vb: Public Sub StartPlaneMission(plane As Vehicle, target As Ped, missionType As VehicleMissionType, cruiseSpeed As Single, targetReachedDist As Single, flightHeight As Integer, minHeightAboveTerrain As Integer, planeOrientation As Single = -1, precise As Boolean = True)
  overload: GTA.TaskInvoker.StartPlaneMission*
  nameWithType.vb: TaskInvoker.StartPlaneMission(Vehicle, Ped, VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
  name.vb: StartPlaneMission(Vehicle, Ped, VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
- uid: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  id: StartPlaneMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartPlaneMission(Vehicle, Vector3, VehicleMissionType, float, float, int, int, float, bool)
  nameWithType: TaskInvoker.StartPlaneMission(Vehicle, Vector3, VehicleMissionType, float, float, int, int, float, bool)
  fullName: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, float, float, int, int, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartPlaneMission(Vehicle plane, Vector3 target, VehicleMissionType missionType, float cruiseSpeed, float targetReachedDist, int flightHeight, int minHeightAboveTerrain, float planeOrientation = -1, bool precise = true)
    parameters:
    - id: plane
      type: GTA.Vehicle
    - id: target
      type: GTA.Math.Vector3
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: planeOrientation
      type: System.Single
    - id: precise
      type: System.Boolean
    content.vb: Public Sub StartPlaneMission(plane As Vehicle, target As Vector3, missionType As VehicleMissionType, cruiseSpeed As Single, targetReachedDist As Single, flightHeight As Integer, minHeightAboveTerrain As Integer, planeOrientation As Single = -1, precise As Boolean = True)
  overload: GTA.TaskInvoker.StartPlaneMission*
  nameWithType.vb: TaskInvoker.StartPlaneMission(Vehicle, Vector3, VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
  fullName.vb: GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
  name.vb: StartPlaneMission(Vehicle, Vector3, VehicleMissionType, Single, Single, Integer, Integer, Single, Boolean)
- uid: GTA.TaskInvoker.PlaneTaxi(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.PlaneTaxi(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single)
  id: PlaneTaxi(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlaneTaxi(Vehicle, Vector3, float, float)
  nameWithType: TaskInvoker.PlaneTaxi(Vehicle, Vector3, float, float)
  fullName: GTA.TaskInvoker.PlaneTaxi(GTA.Vehicle, GTA.Math.Vector3, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlaneTaxi(Vehicle plane, Vector3 position, float cruiseSpeed, float targetReachedDist)
    parameters:
    - id: plane
      type: GTA.Vehicle
    - id: position
      type: GTA.Math.Vector3
    - id: cruiseSpeed
      type: System.Single
    - id: targetReachedDist
      type: System.Single
    content.vb: Public Sub PlaneTaxi(plane As Vehicle, position As Vector3, cruiseSpeed As Single, targetReachedDist As Single)
  overload: GTA.TaskInvoker.PlaneTaxi*
  nameWithType.vb: TaskInvoker.PlaneTaxi(Vehicle, Vector3, Single, Single)
  fullName.vb: GTA.TaskInvoker.PlaneTaxi(GTA.Vehicle, GTA.Math.Vector3, Single, Single)
  name.vb: PlaneTaxi(Vehicle, Vector3, Single, Single)
- uid: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  commentId: M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  id: StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartBoatMission(Vehicle, Vehicle, VehicleMissionType, float, VehicleDrivingFlags, float, BoatMissionFlags)
  nameWithType: TaskInvoker.StartBoatMission(Vehicle, Vehicle, VehicleMissionType, float, VehicleDrivingFlags, float, BoatMissionFlags)
  fullName: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, float, GTA.VehicleDrivingFlags, float, GTA.BoatMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartBoatMission(Vehicle boat, Vehicle target, VehicleMissionType missionType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float targetReachedDist, BoatMissionFlags missionFlags)
    parameters:
    - id: boat
      type: GTA.Vehicle
    - id: target
      type: GTA.Vehicle
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: targetReachedDist
      type: System.Single
    - id: missionFlags
      type: GTA.BoatMissionFlags
    content.vb: Public Sub StartBoatMission(boat As Vehicle, target As Vehicle, missionType As VehicleMissionType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, targetReachedDist As Single, missionFlags As BoatMissionFlags)
  overload: GTA.TaskInvoker.StartBoatMission*
  nameWithType.vb: TaskInvoker.StartBoatMission(Vehicle, Vehicle, VehicleMissionType, Single, VehicleDrivingFlags, Single, BoatMissionFlags)
  fullName.vb: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle, GTA.Vehicle, GTA.VehicleMissionType, Single, GTA.VehicleDrivingFlags, Single, GTA.BoatMissionFlags)
  name.vb: StartBoatMission(Vehicle, Vehicle, VehicleMissionType, Single, VehicleDrivingFlags, Single, BoatMissionFlags)
- uid: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  commentId: M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  id: StartBoatMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartBoatMission(Vehicle, Ped, VehicleMissionType, float, VehicleDrivingFlags, float, BoatMissionFlags)
  nameWithType: TaskInvoker.StartBoatMission(Vehicle, Ped, VehicleMissionType, float, VehicleDrivingFlags, float, BoatMissionFlags)
  fullName: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, float, GTA.VehicleDrivingFlags, float, GTA.BoatMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartBoatMission(Vehicle boat, Ped target, VehicleMissionType missionType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float targetReachedDist, BoatMissionFlags missionFlags)
    parameters:
    - id: boat
      type: GTA.Vehicle
    - id: target
      type: GTA.Ped
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: targetReachedDist
      type: System.Single
    - id: missionFlags
      type: GTA.BoatMissionFlags
    content.vb: Public Sub StartBoatMission(boat As Vehicle, target As Ped, missionType As VehicleMissionType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, targetReachedDist As Single, missionFlags As BoatMissionFlags)
  overload: GTA.TaskInvoker.StartBoatMission*
  nameWithType.vb: TaskInvoker.StartBoatMission(Vehicle, Ped, VehicleMissionType, Single, VehicleDrivingFlags, Single, BoatMissionFlags)
  fullName.vb: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle, GTA.Ped, GTA.VehicleMissionType, Single, GTA.VehicleDrivingFlags, Single, GTA.BoatMissionFlags)
  name.vb: StartBoatMission(Vehicle, Ped, VehicleMissionType, Single, VehicleDrivingFlags, Single, BoatMissionFlags)
- uid: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  commentId: M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  id: StartBoatMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StartBoatMission(Vehicle, Vector3, VehicleMissionType, float, VehicleDrivingFlags, float, BoatMissionFlags)
  nameWithType: TaskInvoker.StartBoatMission(Vehicle, Vector3, VehicleMissionType, float, VehicleDrivingFlags, float, BoatMissionFlags)
  fullName: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, float, GTA.VehicleDrivingFlags, float, GTA.BoatMissionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StartBoatMission(Vehicle boat, Vector3 target, VehicleMissionType missionType, float cruiseSpeed, VehicleDrivingFlags drivingFlags, float targetReachedDist, BoatMissionFlags missionFlags)
    parameters:
    - id: boat
      type: GTA.Vehicle
    - id: target
      type: GTA.Math.Vector3
    - id: missionType
      type: GTA.VehicleMissionType
    - id: cruiseSpeed
      type: System.Single
    - id: drivingFlags
      type: GTA.VehicleDrivingFlags
    - id: targetReachedDist
      type: System.Single
    - id: missionFlags
      type: GTA.BoatMissionFlags
    content.vb: Public Sub StartBoatMission(boat As Vehicle, target As Vector3, missionType As VehicleMissionType, cruiseSpeed As Single, drivingFlags As VehicleDrivingFlags, targetReachedDist As Single, missionFlags As BoatMissionFlags)
  overload: GTA.TaskInvoker.StartBoatMission*
  nameWithType.vb: TaskInvoker.StartBoatMission(Vehicle, Vector3, VehicleMissionType, Single, VehicleDrivingFlags, Single, BoatMissionFlags)
  fullName.vb: GTA.TaskInvoker.StartBoatMission(GTA.Vehicle, GTA.Math.Vector3, GTA.VehicleMissionType, Single, GTA.VehicleDrivingFlags, Single, GTA.BoatMissionFlags)
  name.vb: StartBoatMission(Vehicle, Vector3, VehicleMissionType, Single, VehicleDrivingFlags, Single, BoatMissionFlags)
- uid: GTA.TaskInvoker.GoToPlanePreciseVtol(GTA.Vehicle,GTA.Math.Vector3,System.Int32,System.Int32,System.Nullable{System.Single},System.Boolean)
  commentId: M:GTA.TaskInvoker.GoToPlanePreciseVtol(GTA.Vehicle,GTA.Math.Vector3,System.Int32,System.Int32,System.Nullable{System.Single},System.Boolean)
  id: GoToPlanePreciseVtol(GTA.Vehicle,GTA.Math.Vector3,System.Int32,System.Int32,System.Nullable{System.Single},System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoToPlanePreciseVtol(Vehicle, Vector3, int, int, float?, bool)
  nameWithType: TaskInvoker.GoToPlanePreciseVtol(Vehicle, Vector3, int, int, float?, bool)
  fullName: GTA.TaskInvoker.GoToPlanePreciseVtol(GTA.Vehicle, GTA.Math.Vector3, int, int, float?, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoToPlanePreciseVtol(Vehicle plane, Vector3 target, int flightHeight, int minHeightAboveTerrain, float? desiredOrientation = null, bool autoPilot = false)
    parameters:
    - id: plane
      type: GTA.Vehicle
    - id: target
      type: GTA.Math.Vector3
    - id: flightHeight
      type: System.Int32
    - id: minHeightAboveTerrain
      type: System.Int32
    - id: desiredOrientation
      type: System.Nullable{System.Single}
    - id: autoPilot
      type: System.Boolean
    content.vb: Public Sub GoToPlanePreciseVtol(plane As Vehicle, target As Vector3, flightHeight As Integer, minHeightAboveTerrain As Integer, desiredOrientation As Single? = Nothing, autoPilot As Boolean = False)
  overload: GTA.TaskInvoker.GoToPlanePreciseVtol*
  nameWithType.vb: TaskInvoker.GoToPlanePreciseVtol(Vehicle, Vector3, Integer, Integer, Single?, Boolean)
  fullName.vb: GTA.TaskInvoker.GoToPlanePreciseVtol(GTA.Vehicle, GTA.Math.Vector3, Integer, Integer, Single?, Boolean)
  name.vb: GoToPlanePreciseVtol(Vehicle, Vector3, Integer, Integer, Single?, Boolean)
- uid: GTA.TaskInvoker.GoToSubmarineAndStop(GTA.Vehicle,GTA.Math.Vector3,System.Boolean)
  commentId: M:GTA.TaskInvoker.GoToSubmarineAndStop(GTA.Vehicle,GTA.Math.Vector3,System.Boolean)
  id: GoToSubmarineAndStop(GTA.Vehicle,GTA.Math.Vector3,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: GoToSubmarineAndStop(Vehicle, Vector3, bool)
  nameWithType: TaskInvoker.GoToSubmarineAndStop(Vehicle, Vector3, bool)
  fullName: GTA.TaskInvoker.GoToSubmarineAndStop(GTA.Vehicle, GTA.Math.Vector3, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void GoToSubmarineAndStop(Vehicle submarine, Vector3 position, bool autoPilot = false)
    parameters:
    - id: submarine
      type: GTA.Vehicle
    - id: position
      type: GTA.Math.Vector3
    - id: autoPilot
      type: System.Boolean
    content.vb: Public Sub GoToSubmarineAndStop(submarine As Vehicle, position As Vector3, autoPilot As Boolean = False)
  overload: GTA.TaskInvoker.GoToSubmarineAndStop*
  nameWithType.vb: TaskInvoker.GoToSubmarineAndStop(Vehicle, Vector3, Boolean)
  fullName.vb: GTA.TaskInvoker.GoToSubmarineAndStop(GTA.Vehicle, GTA.Math.Vector3, Boolean)
  name.vb: GoToSubmarineAndStop(Vehicle, Vector3, Boolean)
- uid: GTA.TaskInvoker.SwapWeapon
  commentId: M:GTA.TaskInvoker.SwapWeapon
  id: SwapWeapon
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: SwapWeapon()
  nameWithType: TaskInvoker.SwapWeapon()
  fullName: GTA.TaskInvoker.SwapWeapon()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SwapWeapon()
    content.vb: Public Sub SwapWeapon()
  overload: GTA.TaskInvoker.SwapWeapon*
- uid: GTA.TaskInvoker.SwapWeapon(System.Boolean)
  commentId: M:GTA.TaskInvoker.SwapWeapon(System.Boolean)
  id: SwapWeapon(System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: SwapWeapon(bool)
  nameWithType: TaskInvoker.SwapWeapon(bool)
  fullName: GTA.TaskInvoker.SwapWeapon(bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void SwapWeapon(bool drawWeapon)
    parameters:
    - id: drawWeapon
      type: System.Boolean
    content.vb: Public Sub SwapWeapon(drawWeapon As Boolean)
  overload: GTA.TaskInvoker.SwapWeapon*
  nameWithType.vb: TaskInvoker.SwapWeapon(Boolean)
  fullName.vb: GTA.TaskInvoker.SwapWeapon(Boolean)
  name.vb: SwapWeapon(Boolean)
- uid: GTA.TaskInvoker.TurnTo(GTA.Entity,System.Int32)
  commentId: M:GTA.TaskInvoker.TurnTo(GTA.Entity,System.Int32)
  id: TurnTo(GTA.Entity,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: TurnTo(Entity, int)
  nameWithType: TaskInvoker.TurnTo(Entity, int)
  fullName: GTA.TaskInvoker.TurnTo(GTA.Entity, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void TurnTo(Entity target, int duration = -1)
    parameters:
    - id: target
      type: GTA.Entity
    - id: duration
      type: System.Int32
    content.vb: Public Sub TurnTo(target As Entity, duration As Integer = -1)
  overload: GTA.TaskInvoker.TurnTo*
  nameWithType.vb: TaskInvoker.TurnTo(Entity, Integer)
  fullName.vb: GTA.TaskInvoker.TurnTo(GTA.Entity, Integer)
  name.vb: TurnTo(Entity, Integer)
- uid: GTA.TaskInvoker.TurnTo(GTA.Math.Vector3,System.Int32)
  commentId: M:GTA.TaskInvoker.TurnTo(GTA.Math.Vector3,System.Int32)
  id: TurnTo(GTA.Math.Vector3,System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: TurnTo(Vector3, int)
  nameWithType: TaskInvoker.TurnTo(Vector3, int)
  fullName: GTA.TaskInvoker.TurnTo(GTA.Math.Vector3, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void TurnTo(Vector3 position, int duration = -1)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: duration
      type: System.Int32
    content.vb: Public Sub TurnTo(position As Vector3, duration As Integer = -1)
  overload: GTA.TaskInvoker.TurnTo*
  nameWithType.vb: TaskInvoker.TurnTo(Vector3, Integer)
  fullName.vb: GTA.TaskInvoker.TurnTo(GTA.Math.Vector3, Integer)
  name.vb: TurnTo(Vector3, Integer)
- uid: GTA.TaskInvoker.UseParachute
  commentId: M:GTA.TaskInvoker.UseParachute
  id: UseParachute
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: UseParachute()
  nameWithType: TaskInvoker.UseParachute()
  fullName: GTA.TaskInvoker.UseParachute()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void UseParachute()
    content.vb: Public Sub UseParachute()
  overload: GTA.TaskInvoker.UseParachute*
- uid: GTA.TaskInvoker.UseMobilePhone
  commentId: M:GTA.TaskInvoker.UseMobilePhone
  id: UseMobilePhone
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: UseMobilePhone()
  nameWithType: TaskInvoker.UseMobilePhone()
  fullName: GTA.TaskInvoker.UseMobilePhone()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void UseMobilePhone()
    content.vb: Public Sub UseMobilePhone()
  overload: GTA.TaskInvoker.UseMobilePhone*
- uid: GTA.TaskInvoker.UseMobilePhone(System.Int32)
  commentId: M:GTA.TaskInvoker.UseMobilePhone(System.Int32)
  id: UseMobilePhone(System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: UseMobilePhone(int)
  nameWithType: TaskInvoker.UseMobilePhone(int)
  fullName: GTA.TaskInvoker.UseMobilePhone(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void UseMobilePhone(int duration)
    parameters:
    - id: duration
      type: System.Int32
    content.vb: Public Sub UseMobilePhone(duration As Integer)
  overload: GTA.TaskInvoker.UseMobilePhone*
  nameWithType.vb: TaskInvoker.UseMobilePhone(Integer)
  fullName.vb: GTA.TaskInvoker.UseMobilePhone(Integer)
  name.vb: UseMobilePhone(Integer)
- uid: GTA.TaskInvoker.PutAwayParachute
  commentId: M:GTA.TaskInvoker.PutAwayParachute
  id: PutAwayParachute
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PutAwayParachute()
  nameWithType: TaskInvoker.PutAwayParachute()
  fullName: GTA.TaskInvoker.PutAwayParachute()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PutAwayParachute()
    content.vb: Public Sub PutAwayParachute()
  overload: GTA.TaskInvoker.PutAwayParachute*
- uid: GTA.TaskInvoker.PutAwayMobilePhone
  commentId: M:GTA.TaskInvoker.PutAwayMobilePhone
  id: PutAwayMobilePhone
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PutAwayMobilePhone()
  nameWithType: TaskInvoker.PutAwayMobilePhone()
  fullName: GTA.TaskInvoker.PutAwayMobilePhone()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PutAwayMobilePhone()
    content.vb: Public Sub PutAwayMobilePhone()
  overload: GTA.TaskInvoker.PutAwayMobilePhone*
- uid: GTA.TaskInvoker.VehicleChase(GTA.Ped)
  commentId: M:GTA.TaskInvoker.VehicleChase(GTA.Ped)
  id: VehicleChase(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: VehicleChase(Ped)
  nameWithType: TaskInvoker.VehicleChase(Ped)
  fullName: GTA.TaskInvoker.VehicleChase(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void VehicleChase(Ped target)
    parameters:
    - id: target
      type: GTA.Ped
    content.vb: Public Sub VehicleChase(target As Ped)
  overload: GTA.TaskInvoker.VehicleChase*
- uid: GTA.TaskInvoker.HeliChase(GTA.Entity,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.HeliChase(GTA.Entity,GTA.Math.Vector3)
  id: HeliChase(GTA.Entity,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: HeliChase(Entity, Vector3)
  nameWithType: TaskInvoker.HeliChase(Entity, Vector3)
  fullName: GTA.TaskInvoker.HeliChase(GTA.Entity, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void HeliChase(Entity target, Vector3 targetOffset)
    parameters:
    - id: target
      type: GTA.Entity
    - id: targetOffset
      type: GTA.Math.Vector3
    content.vb: Public Sub HeliChase(target As Entity, targetOffset As Vector3)
  overload: GTA.TaskInvoker.HeliChase*
- uid: GTA.TaskInvoker.PlaneChase(GTA.Vehicle,GTA.Math.Vector3,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.PlaneChase(GTA.Vehicle,GTA.Math.Vector3,GTA.Math.Vector3)
  id: PlaneChase(GTA.Vehicle,GTA.Math.Vector3,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlaneChase(Vehicle, Vector3, Vector3)
  nameWithType: TaskInvoker.PlaneChase(Vehicle, Vector3, Vector3)
  fullName: GTA.TaskInvoker.PlaneChase(GTA.Vehicle, GTA.Math.Vector3, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlaneChase(Vehicle plane, Vector3 runWayStart, Vector3 runWayEnd)
    parameters:
    - id: plane
      type: GTA.Vehicle
    - id: runWayStart
      type: GTA.Math.Vector3
    - id: runWayEnd
      type: GTA.Math.Vector3
    content.vb: Public Sub PlaneChase(plane As Vehicle, runWayStart As Vector3, runWayEnd As Vector3)
  overload: GTA.TaskInvoker.PlaneChase*
- uid: GTA.TaskInvoker.PlaneChase(GTA.Entity,GTA.Math.Vector3)
  commentId: M:GTA.TaskInvoker.PlaneChase(GTA.Entity,GTA.Math.Vector3)
  id: PlaneChase(GTA.Entity,GTA.Math.Vector3)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: PlaneChase(Entity, Vector3)
  nameWithType: TaskInvoker.PlaneChase(Entity, Vector3)
  fullName: GTA.TaskInvoker.PlaneChase(GTA.Entity, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void PlaneChase(Entity target, Vector3 targetOffset)
    parameters:
    - id: target
      type: GTA.Entity
    - id: targetOffset
      type: GTA.Math.Vector3
    content.vb: Public Sub PlaneChase(target As Entity, targetOffset As Vector3)
  overload: GTA.TaskInvoker.PlaneChase*
- uid: GTA.TaskInvoker.VehicleShootAtPed(GTA.Ped)
  commentId: M:GTA.TaskInvoker.VehicleShootAtPed(GTA.Ped)
  id: VehicleShootAtPed(GTA.Ped)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: VehicleShootAtPed(Ped)
  nameWithType: TaskInvoker.VehicleShootAtPed(Ped)
  fullName: GTA.TaskInvoker.VehicleShootAtPed(GTA.Ped)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void VehicleShootAtPed(Ped target)
    parameters:
    - id: target
      type: GTA.Ped
    content.vb: Public Sub VehicleShootAtPed(target As Ped)
  overload: GTA.TaskInvoker.VehicleShootAtPed*
- uid: GTA.TaskInvoker.Wait(System.Int32)
  commentId: M:GTA.TaskInvoker.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Wait(int)
  nameWithType: TaskInvoker.Wait(int)
  fullName: GTA.TaskInvoker.Wait(int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("TaskInvoke.Wait is obsolete, use TaskInvoker.Pause instead.")]

      public void Wait(int duration)
    parameters:
    - id: duration
      type: System.Int32
    content.vb: >-
      <Obsolete("TaskInvoke.Wait is obsolete, use TaskInvoker.Pause instead.")>

      Public Sub Wait(duration As Integer)
  overload: GTA.TaskInvoker.Wait*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: TaskInvoke.Wait is obsolete, use TaskInvoker.Pause instead.
  nameWithType.vb: TaskInvoker.Wait(Integer)
  fullName.vb: GTA.TaskInvoker.Wait(Integer)
  name.vb: Wait(Integer)
- uid: GTA.TaskInvoker.Wander(System.Single,System.Boolean)
  commentId: M:GTA.TaskInvoker.Wander(System.Single,System.Boolean)
  id: Wander(System.Single,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: Wander(float, bool)
  nameWithType: TaskInvoker.Wander(float, bool)
  fullName: GTA.TaskInvoker.Wander(float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void Wander(float heading = 40000, bool keepMovingWhilstWaitingForFirstPath = false)
    parameters:
    - id: heading
      type: System.Single
    - id: keepMovingWhilstWaitingForFirstPath
      type: System.Boolean
    content.vb: Public Sub Wander(heading As Single = 40000, keepMovingWhilstWaitingForFirstPath As Boolean = False)
  overload: GTA.TaskInvoker.Wander*
  nameWithType.vb: TaskInvoker.Wander(Single, Boolean)
  fullName.vb: GTA.TaskInvoker.Wander(Single, Boolean)
  name.vb: Wander(Single, Boolean)
- uid: GTA.TaskInvoker.WanderAround
  commentId: M:GTA.TaskInvoker.WanderAround
  id: WanderAround
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: WanderAround()
  nameWithType: TaskInvoker.WanderAround()
  fullName: GTA.TaskInvoker.WanderAround()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("the overload of TaskInvoker.WanderAround with no parameters is obsolete, use TaskInvoker.Wander instead.")]

      public void WanderAround()
    content.vb: >-
      <Obsolete("the overload of TaskInvoker.WanderAround with no parameters is obsolete, use TaskInvoker.Wander instead.")>

      Public Sub WanderAround()
  overload: GTA.TaskInvoker.WanderAround*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: the overload of TaskInvoker.WanderAround with no parameters is obsolete, use TaskInvoker.Wander instead.
- uid: GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single)
  id: WanderAround(GTA.Math.Vector3,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: WanderAround(Vector3, float)
  nameWithType: TaskInvoker.WanderAround(Vector3, float)
  fullName: GTA.TaskInvoker.WanderAround(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void WanderAround(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    content.vb: Public Sub WanderAround(position As Vector3, radius As Single)
  overload: GTA.TaskInvoker.WanderAround*
  nameWithType.vb: TaskInvoker.WanderAround(Vector3, Single)
  fullName.vb: GTA.TaskInvoker.WanderAround(GTA.Math.Vector3, Single)
  name.vb: WanderAround(Vector3, Single)
- uid: GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single,System.Single,System.Single)
  commentId: M:GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single,System.Single,System.Single)
  id: WanderAround(GTA.Math.Vector3,System.Single,System.Single,System.Single)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: WanderAround(Vector3, float, float, float)
  nameWithType: TaskInvoker.WanderAround(Vector3, float, float, float)
  fullName: GTA.TaskInvoker.WanderAround(GTA.Math.Vector3, float, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void WanderAround(Vector3 position, float radius, float minTime, float maxTime)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: minTime
      type: System.Single
    - id: maxTime
      type: System.Single
    content.vb: Public Sub WanderAround(position As Vector3, radius As Single, minTime As Single, maxTime As Single)
  overload: GTA.TaskInvoker.WanderAround*
  nameWithType.vb: TaskInvoker.WanderAround(Vector3, Single, Single, Single)
  fullName.vb: GTA.TaskInvoker.WanderAround(GTA.Math.Vector3, Single, Single, Single)
  name.vb: WanderAround(Vector3, Single, Single, Single)
- uid: GTA.TaskInvoker.WarpIntoVehicle(GTA.Vehicle,GTA.VehicleSeat)
  commentId: M:GTA.TaskInvoker.WarpIntoVehicle(GTA.Vehicle,GTA.VehicleSeat)
  id: WarpIntoVehicle(GTA.Vehicle,GTA.VehicleSeat)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: WarpIntoVehicle(Vehicle, VehicleSeat)
  nameWithType: TaskInvoker.WarpIntoVehicle(Vehicle, VehicleSeat)
  fullName: GTA.TaskInvoker.WarpIntoVehicle(GTA.Vehicle, GTA.VehicleSeat)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void WarpIntoVehicle(Vehicle vehicle, VehicleSeat seat)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    - id: seat
      type: GTA.VehicleSeat
    content.vb: Public Sub WarpIntoVehicle(vehicle As Vehicle, seat As VehicleSeat)
  overload: GTA.TaskInvoker.WarpIntoVehicle*
- uid: GTA.TaskInvoker.WarpOutOfVehicle(GTA.Vehicle)
  commentId: M:GTA.TaskInvoker.WarpOutOfVehicle(GTA.Vehicle)
  id: WarpOutOfVehicle(GTA.Vehicle)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: WarpOutOfVehicle(Vehicle)
  nameWithType: TaskInvoker.WarpOutOfVehicle(Vehicle)
  fullName: GTA.TaskInvoker.WarpOutOfVehicle(GTA.Vehicle)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void WarpOutOfVehicle(Vehicle vehicle)
    parameters:
    - id: vehicle
      type: GTA.Vehicle
    content.vb: Public Sub WarpOutOfVehicle(vehicle As Vehicle)
  overload: GTA.TaskInvoker.WarpOutOfVehicle*
- uid: GTA.TaskInvoker.ForceMotionState(GTA.PedMotionState,System.Boolean)
  commentId: M:GTA.TaskInvoker.ForceMotionState(GTA.PedMotionState,System.Boolean)
  id: ForceMotionState(GTA.PedMotionState,System.Boolean)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ForceMotionState(PedMotionState, bool)
  nameWithType: TaskInvoker.ForceMotionState(PedMotionState, bool)
  fullName: GTA.TaskInvoker.ForceMotionState(GTA.PedMotionState, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ForceMotionState(PedMotionState state, bool restartState = false)
    parameters:
    - id: state
      type: GTA.PedMotionState
    - id: restartState
      type: System.Boolean
    content.vb: Public Sub ForceMotionState(state As PedMotionState, restartState As Boolean = False)
  overload: GTA.TaskInvoker.ForceMotionState*
  nameWithType.vb: TaskInvoker.ForceMotionState(PedMotionState, Boolean)
  fullName.vb: GTA.TaskInvoker.ForceMotionState(GTA.PedMotionState, Boolean)
  name.vb: ForceMotionState(PedMotionState, Boolean)
- uid: GTA.TaskInvoker.ClearAll
  commentId: M:GTA.TaskInvoker.ClearAll
  id: ClearAll
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClearAll()
  nameWithType: TaskInvoker.ClearAll()
  fullName: GTA.TaskInvoker.ClearAll()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClearAll()
    content.vb: Public Sub ClearAll()
  overload: GTA.TaskInvoker.ClearAll*
- uid: GTA.TaskInvoker.ClearAllImmediately
  commentId: M:GTA.TaskInvoker.ClearAllImmediately
  id: ClearAllImmediately
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClearAllImmediately()
  nameWithType: TaskInvoker.ClearAllImmediately()
  fullName: GTA.TaskInvoker.ClearAllImmediately()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClearAllImmediately()
    content.vb: Public Sub ClearAllImmediately()
  overload: GTA.TaskInvoker.ClearAllImmediately*
- uid: GTA.TaskInvoker.ClearLookAt
  commentId: M:GTA.TaskInvoker.ClearLookAt
  id: ClearLookAt
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClearLookAt()
  nameWithType: TaskInvoker.ClearLookAt()
  fullName: GTA.TaskInvoker.ClearLookAt()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClearLookAt()
    content.vb: Public Sub ClearLookAt()
  overload: GTA.TaskInvoker.ClearLookAt*
- uid: GTA.TaskInvoker.ClearSecondary
  commentId: M:GTA.TaskInvoker.ClearSecondary
  id: ClearSecondary
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClearSecondary()
  nameWithType: TaskInvoker.ClearSecondary()
  fullName: GTA.TaskInvoker.ClearSecondary()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void ClearSecondary()
    content.vb: Public Sub ClearSecondary()
  overload: GTA.TaskInvoker.ClearSecondary*
- uid: GTA.TaskInvoker.StopScriptedAnimationTask(GTA.CrClipAsset,System.Nullable{GTA.AnimationBlendDelta})
  commentId: M:GTA.TaskInvoker.StopScriptedAnimationTask(GTA.CrClipAsset,System.Nullable{GTA.AnimationBlendDelta})
  id: StopScriptedAnimationTask(GTA.CrClipAsset,System.Nullable{GTA.AnimationBlendDelta})
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: StopScriptedAnimationTask(CrClipAsset, AnimationBlendDelta?)
  nameWithType: TaskInvoker.StopScriptedAnimationTask(CrClipAsset, AnimationBlendDelta?)
  fullName: GTA.TaskInvoker.StopScriptedAnimationTask(GTA.CrClipAsset, GTA.AnimationBlendDelta?)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public void StopScriptedAnimationTask(CrClipAsset crClipAsset, AnimationBlendDelta? blendOutDelta = null)
    parameters:
    - id: crClipAsset
      type: GTA.CrClipAsset
    - id: blendOutDelta
      type: System.Nullable{GTA.AnimationBlendDelta}
    content.vb: Public Sub StopScriptedAnimationTask(crClipAsset As CrClipAsset, blendOutDelta As AnimationBlendDelta? = Nothing)
  overload: GTA.TaskInvoker.StopScriptedAnimationTask*
- uid: GTA.TaskInvoker.ClearAnimation(System.String,System.String)
  commentId: M:GTA.TaskInvoker.ClearAnimation(System.String,System.String)
  id: ClearAnimation(System.String,System.String)
  parent: GTA.TaskInvoker
  langs:
  - csharp
  - vb
  name: ClearAnimation(string, string)
  nameWithType: TaskInvoker.ClearAnimation(string, string)
  fullName: GTA.TaskInvoker.ClearAnimation(string, string)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("Use StopScriptedAnimationTask instead.")]

      public void ClearAnimation(string animSet, string animName)
    parameters:
    - id: animSet
      type: System.String
    - id: animName
      type: System.String
    content.vb: >-
      <Obsolete("Use StopScriptedAnimationTask instead.")>

      Public Sub ClearAnimation(animSet As String, animName As String)
  overload: GTA.TaskInvoker.ClearAnimation*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use StopScriptedAnimationTask instead.
  nameWithType.vb: TaskInvoker.ClearAnimation(String, String)
  fullName.vb: GTA.TaskInvoker.ClearAnimation(String, String)
  name.vb: ClearAnimation(String, String)
references:
- uid: GTA
  commentId: N:GTA
  isExternal: true
  href: GTA.html
  name: GTA
  nameWithType: GTA
  fullName: GTA
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: GTA.TaskInvoker.AchieveHeading*
  commentId: Overload:GTA.TaskInvoker.AchieveHeading
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_AchieveHeading_System_Single_System_Int32_
  name: AchieveHeading
  nameWithType: TaskInvoker.AchieveHeading
  fullName: GTA.TaskInvoker.AchieveHeading
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: GTA.TaskInvoker.AimAt*
  commentId: Overload:GTA.TaskInvoker.AimAt
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_AimAt_GTA_Entity_System_Int32_
  name: AimAt
  nameWithType: TaskInvoker.AimAt
  fullName: GTA.TaskInvoker.AimAt
- uid: GTA.Entity
  commentId: T:GTA.Entity
  parent: GTA
  isExternal: true
  href: GTA.Entity.html
  name: Entity
  nameWithType: Entity
  fullName: GTA.Entity
- uid: GTA.Math.Vector3
  commentId: T:GTA.Math.Vector3
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Vector3.html
  name: Vector3
  nameWithType: Vector3
  fullName: GTA.Math.Vector3
- uid: GTA.Math
  commentId: N:GTA.Math
  isExternal: true
  href: GTA.html
  name: GTA.Math
  nameWithType: GTA.Math
  fullName: GTA.Math
  spec.csharp:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
  spec.vb:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
- uid: GTA.TaskInvoker.AimGunAtEntity*
  commentId: Overload:GTA.TaskInvoker.AimGunAtEntity
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_AimGunAtEntity_GTA_Entity_System_Int32_System_Boolean_
  name: AimGunAtEntity
  nameWithType: TaskInvoker.AimGunAtEntity
  fullName: GTA.TaskInvoker.AimGunAtEntity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: GTA.TaskInvoker.AimGunAtPosition*
  commentId: Overload:GTA.TaskInvoker.AimGunAtPosition
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_AimGunAtPosition_GTA_Math_Vector3_System_Int32_System_Boolean_System_Boolean_
  name: AimGunAtPosition
  nameWithType: TaskInvoker.AimGunAtPosition
  fullName: GTA.TaskInvoker.AimGunAtPosition
- uid: GTA.TaskInvoker.Arrest*
  commentId: Overload:GTA.TaskInvoker.Arrest
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Arrest_GTA_Ped_
  name: Arrest
  nameWithType: TaskInvoker.Arrest
  fullName: GTA.TaskInvoker.Arrest
- uid: GTA.Ped
  commentId: T:GTA.Ped
  parent: GTA
  isExternal: true
  href: GTA.Ped.html
  name: Ped
  nameWithType: Ped
  fullName: GTA.Ped
- uid: GTA.TaskInvoker.ChatTo*
  commentId: Overload:GTA.TaskInvoker.ChatTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ChatTo_GTA_Ped_
  name: ChatTo
  nameWithType: TaskInvoker.ChatTo
  fullName: GTA.TaskInvoker.ChatTo
- uid: GTA.TaskInvoker.Jump*
  commentId: Overload:GTA.TaskInvoker.Jump
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Jump
  name: Jump
  nameWithType: TaskInvoker.Jump
  fullName: GTA.TaskInvoker.Jump
- uid: GTA.TaskInvoker.Climb*
  commentId: Overload:GTA.TaskInvoker.Climb
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Climb
  name: Climb
  nameWithType: TaskInvoker.Climb
  fullName: GTA.TaskInvoker.Climb
- uid: GTA.TaskInvoker.ClimbLadder*
  commentId: Overload:GTA.TaskInvoker.ClimbLadder
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ClimbLadder
  name: ClimbLadder
  nameWithType: TaskInvoker.ClimbLadder
  fullName: GTA.TaskInvoker.ClimbLadder
- uid: GTA.TaskInvoker.Cower*
  commentId: Overload:GTA.TaskInvoker.Cower
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Cower_System_Int32_
  name: Cower
  nameWithType: TaskInvoker.Cower
  fullName: GTA.TaskInvoker.Cower
- uid: GTA.TaskInvoker.ChaseWithGroundVehicle*
  commentId: Overload:GTA.TaskInvoker.ChaseWithGroundVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ChaseWithGroundVehicle_GTA_Ped_
  name: ChaseWithGroundVehicle
  nameWithType: TaskInvoker.ChaseWithGroundVehicle
  fullName: GTA.TaskInvoker.ChaseWithGroundVehicle
- uid: GTA.TaskInvoker.ChaseWithHelicopter*
  commentId: Overload:GTA.TaskInvoker.ChaseWithHelicopter
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ChaseWithHelicopter_GTA_Ped_GTA_Math_Vector3_
  name: ChaseWithHelicopter
  nameWithType: TaskInvoker.ChaseWithHelicopter
  fullName: GTA.TaskInvoker.ChaseWithHelicopter
- uid: GTA.TaskInvoker.ChaseWithPlane*
  commentId: Overload:GTA.TaskInvoker.ChaseWithPlane
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ChaseWithPlane_GTA_Ped_GTA_Math_Vector3_
  name: ChaseWithPlane
  nameWithType: TaskInvoker.ChaseWithPlane
  fullName: GTA.TaskInvoker.ChaseWithPlane
- uid: GTA.TaskInvoker.CruiseWithVehicle*
  commentId: Overload:GTA.TaskInvoker.CruiseWithVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_CruiseWithVehicle_GTA_Vehicle_System_Single_GTA_VehicleDrivingFlags_
  name: CruiseWithVehicle
  nameWithType: TaskInvoker.CruiseWithVehicle
  fullName: GTA.TaskInvoker.CruiseWithVehicle
- uid: GTA.Vehicle
  commentId: T:GTA.Vehicle
  parent: GTA
  isExternal: true
  href: GTA.Vehicle.html
  name: Vehicle
  nameWithType: Vehicle
  fullName: GTA.Vehicle
- uid: GTA.VehicleDrivingFlags
  commentId: T:GTA.VehicleDrivingFlags
  parent: GTA
  isExternal: true
  href: GTA.VehicleDrivingFlags.html
  name: VehicleDrivingFlags
  nameWithType: VehicleDrivingFlags
  fullName: GTA.VehicleDrivingFlags
- uid: GTA.TaskInvoker.DriveTo*
  commentId: Overload:GTA.TaskInvoker.DriveTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_DriveTo_GTA_Vehicle_GTA_Math_Vector3_System_Single_GTA_VehicleDrivingFlags_System_Single_
  name: DriveTo
  nameWithType: TaskInvoker.DriveTo
  fullName: GTA.TaskInvoker.DriveTo
- uid: GTA.TaskInvoker.EnterAnyVehicle*
  commentId: Overload:GTA.TaskInvoker.EnterAnyVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_EnterAnyVehicle_GTA_VehicleSeat_System_Int32_System_Single_GTA_EnterVehicleFlags_
  name: EnterAnyVehicle
  nameWithType: TaskInvoker.EnterAnyVehicle
  fullName: GTA.TaskInvoker.EnterAnyVehicle
- uid: GTA.VehicleSeat
  commentId: T:GTA.VehicleSeat
  parent: GTA
  isExternal: true
  href: GTA.VehicleSeat.html
  name: VehicleSeat
  nameWithType: VehicleSeat
  fullName: GTA.VehicleSeat
- uid: GTA.EnterVehicleFlags
  commentId: T:GTA.EnterVehicleFlags
  parent: GTA
  isExternal: true
  href: GTA.EnterVehicleFlags.html
  name: EnterVehicleFlags
  nameWithType: EnterVehicleFlags
  fullName: GTA.EnterVehicleFlags
- uid: GTA.TaskInvoker.EnterVehicle*
  commentId: Overload:GTA.TaskInvoker.EnterVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_EnterVehicle_GTA_Vehicle_GTA_VehicleSeat_System_Int32_System_Single_GTA_EnterVehicleFlags_
  name: EnterVehicle
  nameWithType: TaskInvoker.EnterVehicle
  fullName: GTA.TaskInvoker.EnterVehicle
- uid: System.Nullable{GTA.PedMoveBlendRatio}
  commentId: T:System.Nullable{GTA.PedMoveBlendRatio}
  parent: System
  definition: System.Nullable`1
  href: GTA.PedMoveBlendRatio.html
  name: PedMoveBlendRatio?
  nameWithType: PedMoveBlendRatio?
  fullName: GTA.PedMoveBlendRatio?
  spec.csharp:
  - uid: GTA.PedMoveBlendRatio
    name: PedMoveBlendRatio
    isExternal: true
    href: GTA.PedMoveBlendRatio.html
  - name: '?'
  spec.vb:
  - uid: GTA.PedMoveBlendRatio
    name: PedMoveBlendRatio
    isExternal: true
    href: GTA.PedMoveBlendRatio.html
  - name: '?'
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: GTA.TaskInvoker.OpenVehicleDoor*
  commentId: Overload:GTA.TaskInvoker.OpenVehicleDoor
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_OpenVehicleDoor_GTA_Vehicle_GTA_VehicleSeat_System_Int32_System_Nullable_GTA_PedMoveBlendRatio__
  name: OpenVehicleDoor
  nameWithType: TaskInvoker.OpenVehicleDoor
  fullName: GTA.TaskInvoker.OpenVehicleDoor
- uid: GTA.TaskInvoker.EveryoneLeaveVehicle*
  commentId: Overload:GTA.TaskInvoker.EveryoneLeaveVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_EveryoneLeaveVehicle_GTA_Vehicle_
  name: EveryoneLeaveVehicle
  nameWithType: TaskInvoker.EveryoneLeaveVehicle
  fullName: GTA.TaskInvoker.EveryoneLeaveVehicle
- uid: GTA.TaskInvoker.Combat*
  commentId: Overload:GTA.TaskInvoker.Combat
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Combat_GTA_Ped_GTA_TaskCombatFlags_GTA_TaskThreatResponseFlags_
  name: Combat
  nameWithType: TaskInvoker.Combat
  fullName: GTA.TaskInvoker.Combat
- uid: GTA.TaskCombatFlags
  commentId: T:GTA.TaskCombatFlags
  parent: GTA
  isExternal: true
  href: GTA.TaskCombatFlags.html
  name: TaskCombatFlags
  nameWithType: TaskCombatFlags
  fullName: GTA.TaskCombatFlags
- uid: GTA.TaskThreatResponseFlags
  commentId: T:GTA.TaskThreatResponseFlags
  parent: GTA
  isExternal: true
  href: GTA.TaskThreatResponseFlags.html
  name: TaskThreatResponseFlags
  nameWithType: TaskThreatResponseFlags
  fullName: GTA.TaskThreatResponseFlags
- uid: GTA.TaskInvoker.CombatTimed*
  commentId: Overload:GTA.TaskInvoker.CombatTimed
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_CombatTimed_GTA_Ped_System_Int32_GTA_TaskCombatFlags_
  name: CombatTimed
  nameWithType: TaskInvoker.CombatTimed
  fullName: GTA.TaskInvoker.CombatTimed
- uid: GTA.TaskInvoker.CombatHatedTargetsInArea*
  commentId: Overload:GTA.TaskInvoker.CombatHatedTargetsInArea
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_CombatHatedTargetsInArea_GTA_Math_Vector3_System_Single_GTA_TaskCombatFlags_
  name: CombatHatedTargetsInArea
  nameWithType: TaskInvoker.CombatHatedTargetsInArea
  fullName: GTA.TaskInvoker.CombatHatedTargetsInArea
- uid: GTA.TaskInvoker.CombatHatedTargetsAroundPed*
  commentId: Overload:GTA.TaskInvoker.CombatHatedTargetsAroundPed
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_CombatHatedTargetsAroundPed_System_Single_GTA_TaskCombatFlags_
  name: CombatHatedTargetsAroundPed
  nameWithType: TaskInvoker.CombatHatedTargetsAroundPed
  fullName: GTA.TaskInvoker.CombatHatedTargetsAroundPed
- uid: GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed*
  commentId: Overload:GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_CombatHatedTargetsAroundPedTimed_System_Single_System_Int32_GTA_TaskCombatFlags_
  name: CombatHatedTargetsAroundPedTimed
  nameWithType: TaskInvoker.CombatHatedTargetsAroundPedTimed
  fullName: GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed
- uid: GTA.TaskInvoker.PutDirectlyIntoMelee*
  commentId: Overload:GTA.TaskInvoker.PutDirectlyIntoMelee
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PutDirectlyIntoMelee_GTA_Ped_GTA_AnimationBlendDuration_System_Single_
  name: PutDirectlyIntoMelee
  nameWithType: TaskInvoker.PutDirectlyIntoMelee
  fullName: GTA.TaskInvoker.PutDirectlyIntoMelee
- uid: GTA.AnimationBlendDuration
  commentId: T:GTA.AnimationBlendDuration
  parent: GTA
  isExternal: true
  href: GTA.AnimationBlendDuration.html
  name: AnimationBlendDuration
  nameWithType: AnimationBlendDuration
  fullName: GTA.AnimationBlendDuration
- uid: GTA.TaskInvoker.FightAgainst*
  commentId: Overload:GTA.TaskInvoker.FightAgainst
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_FightAgainst_GTA_Ped_
  name: FightAgainst
  nameWithType: TaskInvoker.FightAgainst
  fullName: GTA.TaskInvoker.FightAgainst
- uid: GTA.TaskInvoker.FightAgainstHatedTargets*
  commentId: Overload:GTA.TaskInvoker.FightAgainstHatedTargets
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_FightAgainstHatedTargets_System_Single_
  name: FightAgainstHatedTargets
  nameWithType: TaskInvoker.FightAgainstHatedTargets
  fullName: GTA.TaskInvoker.FightAgainstHatedTargets
- uid: GTA.TaskInvoker.FleeFrom*
  commentId: Overload:GTA.TaskInvoker.FleeFrom
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_FleeFrom_GTA_Ped_System_Int32_
  name: FleeFrom
  nameWithType: TaskInvoker.FleeFrom
  fullName: GTA.TaskInvoker.FleeFrom
- uid: GTA.TaskInvoker.FollowPointRoute*
  commentId: Overload:GTA.TaskInvoker.FollowPointRoute
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_FollowPointRoute_GTA_Math_Vector3___
  name: FollowPointRoute
  nameWithType: TaskInvoker.FollowPointRoute
  fullName: GTA.TaskInvoker.FollowPointRoute
- uid: GTA.Math.Vector3[]
  isExternal: true
  href: GTA.Math.Vector3.html
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: GTA.Math.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: GTA.Math.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: GTA.Math.Vector3
    name: Vector3
    isExternal: true
    href: GTA.Math.Vector3.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Math.Vector3
    name: Vector3
    isExternal: true
    href: GTA.Math.Vector3.html
  - name: (
  - name: )
- uid: GTA.TaskInvoker.FollowToOffsetFromEntity*
  commentId: Overload:GTA.TaskInvoker.FollowToOffsetFromEntity
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_FollowToOffsetFromEntity_GTA_Entity_GTA_Math_Vector3_System_Single_System_Int32_System_Single_System_Boolean_
  name: FollowToOffsetFromEntity
  nameWithType: TaskInvoker.FollowToOffsetFromEntity
  fullName: GTA.TaskInvoker.FollowToOffsetFromEntity
- uid: GTA.TaskInvoker.FollowNavMeshTo*
  commentId: Overload:GTA.TaskInvoker.FollowNavMeshTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_FollowNavMeshTo_GTA_Math_Vector3_System_Nullable_GTA_PedMoveBlendRatio__System_Int32_System_Single_GTA_FollowNavMeshFlags_System_Single_
  name: FollowNavMeshTo
  nameWithType: TaskInvoker.FollowNavMeshTo
  fullName: GTA.TaskInvoker.FollowNavMeshTo
- uid: GTA.FollowNavMeshFlags
  commentId: T:GTA.FollowNavMeshFlags
  parent: GTA
  isExternal: true
  href: GTA.FollowNavMeshFlags.html
  name: FollowNavMeshFlags
  nameWithType: FollowNavMeshFlags
  fullName: GTA.FollowNavMeshFlags
- uid: GTA.PedMoveBlendRatio
  commentId: T:GTA.PedMoveBlendRatio
  parent: GTA
  isExternal: true
  href: GTA.PedMoveBlendRatio.html
  name: PedMoveBlendRatio
  nameWithType: PedMoveBlendRatio
  fullName: GTA.PedMoveBlendRatio
- uid: GTA.TaskInvoker.GoTo*
  commentId: Overload:GTA.TaskInvoker.GoTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoTo_GTA_Entity_GTA_Math_Vector3_System_Int32_
  name: GoTo
  nameWithType: TaskInvoker.GoTo
  fullName: GTA.TaskInvoker.GoTo
- uid: GTA.TaskInvoker.GoStraightTo*
  commentId: Overload:GTA.TaskInvoker.GoStraightTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoStraightTo_GTA_Math_Vector3_System_Int32_System_Single_System_Single_
  name: GoStraightTo
  nameWithType: TaskInvoker.GoStraightTo
  fullName: GTA.TaskInvoker.GoStraightTo
- uid: GTA.TaskInvoker.GoToPointAnyMeans*
  commentId: Overload:GTA.TaskInvoker.GoToPointAnyMeans
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoToPointAnyMeans_GTA_Math_Vector3_GTA_PedMoveBlendRatio_GTA_Vehicle_System_Boolean_GTA_VehicleDrivingFlags_System_Single_
  name: GoToPointAnyMeans
  nameWithType: TaskInvoker.GoToPointAnyMeans
  fullName: GTA.TaskInvoker.GoToPointAnyMeans
- uid: GTA.TaskInvoker.GoToPointAnyMeansExtraParams*
  commentId: Overload:GTA.TaskInvoker.GoToPointAnyMeansExtraParams
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoToPointAnyMeansExtraParams_GTA_Math_Vector3_GTA_PedMoveBlendRatio_GTA_Vehicle_System_Boolean_GTA_VehicleDrivingFlags_System_Single_System_Single_System_Single_GTA_TaskGoToPointAnyMeansFlags_System_Single_
  name: GoToPointAnyMeansExtraParams
  nameWithType: TaskInvoker.GoToPointAnyMeansExtraParams
  fullName: GTA.TaskInvoker.GoToPointAnyMeansExtraParams
- uid: GTA.TaskGoToPointAnyMeansFlags
  commentId: T:GTA.TaskGoToPointAnyMeansFlags
  parent: GTA
  isExternal: true
  href: GTA.TaskGoToPointAnyMeansFlags.html
  name: TaskGoToPointAnyMeansFlags
  nameWithType: TaskGoToPointAnyMeansFlags
  fullName: GTA.TaskGoToPointAnyMeansFlags
- uid: GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed*
  commentId: Overload:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoToPointAnyMeansExtraParamsWithCruiseSpeed_GTA_Math_Vector3_GTA_PedMoveBlendRatio_GTA_Vehicle_System_Boolean_GTA_VehicleDrivingFlags_System_Single_System_Single_System_Single_GTA_TaskGoToPointAnyMeansFlags_System_Single_System_Single_
  name: GoToPointAnyMeansExtraParamsWithCruiseSpeed
  nameWithType: TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed
  fullName: GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed
- uid: GTA.TaskInvoker.GuardCurrentPosition*
  commentId: Overload:GTA.TaskInvoker.GuardCurrentPosition
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GuardCurrentPosition
  name: GuardCurrentPosition
  nameWithType: TaskInvoker.GuardCurrentPosition
  fullName: GTA.TaskInvoker.GuardCurrentPosition
- uid: GTA.TaskInvoker.HandsUp*
  commentId: Overload:GTA.TaskInvoker.HandsUp
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_HandsUp_System_Int32_
  name: HandsUp
  nameWithType: TaskInvoker.HandsUp
  fullName: GTA.TaskInvoker.HandsUp
- uid: GTA.TaskInvoker.LandPlane*
  commentId: Overload:GTA.TaskInvoker.LandPlane
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_LandPlane_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Vehicle_
  name: LandPlane
  nameWithType: TaskInvoker.LandPlane
  fullName: GTA.TaskInvoker.LandPlane
- uid: GTA.TaskInvoker.LeaveVehicle*
  commentId: Overload:GTA.TaskInvoker.LeaveVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_LeaveVehicle_GTA_LeaveVehicleFlags_
  name: LeaveVehicle
  nameWithType: TaskInvoker.LeaveVehicle
  fullName: GTA.TaskInvoker.LeaveVehicle
- uid: GTA.LeaveVehicleFlags
  commentId: T:GTA.LeaveVehicleFlags
  parent: GTA
  isExternal: true
  href: GTA.LeaveVehicleFlags.html
  name: LeaveVehicleFlags
  nameWithType: LeaveVehicleFlags
  fullName: GTA.LeaveVehicleFlags
- uid: GTA.TaskInvoker.LookAt*
  commentId: Overload:GTA.TaskInvoker.LookAt
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_LookAt_GTA_Entity_System_Int32_
  name: LookAt
  nameWithType: TaskInvoker.LookAt
  fullName: GTA.TaskInvoker.LookAt
- uid: GTA.LookAtFlags
  commentId: T:GTA.LookAtFlags
  parent: GTA
  isExternal: true
  href: GTA.LookAtFlags.html
  name: LookAtFlags
  nameWithType: LookAtFlags
  fullName: GTA.LookAtFlags
- uid: GTA.LookAtPriority
  commentId: T:GTA.LookAtPriority
  parent: GTA
  isExternal: true
  href: GTA.LookAtPriority.html
  name: LookAtPriority
  nameWithType: LookAtPriority
  fullName: GTA.LookAtPriority
- uid: GTA.TaskInvoker.ParachuteTo*
  commentId: Overload:GTA.TaskInvoker.ParachuteTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ParachuteTo_GTA_Math_Vector3_
  name: ParachuteTo
  nameWithType: TaskInvoker.ParachuteTo
  fullName: GTA.TaskInvoker.ParachuteTo
- uid: GTA.TaskInvoker.UpdateParachuteTarget*
  commentId: Overload:GTA.TaskInvoker.UpdateParachuteTarget
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_UpdateParachuteTarget_GTA_Ped_GTA_Math_Vector3_
  name: UpdateParachuteTarget
  nameWithType: TaskInvoker.UpdateParachuteTarget
  fullName: GTA.TaskInvoker.UpdateParachuteTarget
- uid: GTA.TaskInvoker.ParkVehicle*
  commentId: Overload:GTA.TaskInvoker.ParkVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ParkVehicle_GTA_Vehicle_GTA_Math_Vector3_System_Single_System_Single_System_Boolean_
  name: ParkVehicle
  nameWithType: TaskInvoker.ParkVehicle
  fullName: GTA.TaskInvoker.ParkVehicle
- uid: GTA.ParkType
  commentId: T:GTA.ParkType
  parent: GTA
  isExternal: true
  href: GTA.ParkType.html
  name: ParkType
  nameWithType: ParkType
  fullName: GTA.ParkType
- uid: GTA.TaskInvoker.PerformSequence*
  commentId: Overload:GTA.TaskInvoker.PerformSequence
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PerformSequence_GTA_TaskSequence_
  name: PerformSequence
  nameWithType: TaskInvoker.PerformSequence
  fullName: GTA.TaskInvoker.PerformSequence
- uid: GTA.TaskSequence
  commentId: T:GTA.TaskSequence
  parent: GTA
  isExternal: true
  href: GTA.TaskSequence.html
  name: TaskSequence
  nameWithType: TaskSequence
  fullName: GTA.TaskSequence
- uid: GTA.TaskInvoker.PlayAnimation*
  commentId: Overload:GTA.TaskInvoker.PlayAnimation
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PlayAnimation_System_String_System_String_
  name: PlayAnimation
  nameWithType: TaskInvoker.PlayAnimation
  fullName: GTA.TaskInvoker.PlayAnimation
- uid: GTA.CrClipAsset
  commentId: T:GTA.CrClipAsset
  parent: GTA
  isExternal: true
  href: GTA.CrClipAsset.html
  name: CrClipAsset
  nameWithType: CrClipAsset
  fullName: GTA.CrClipAsset
- uid: GTA.AnimationBlendDelta
  commentId: T:GTA.AnimationBlendDelta
  parent: GTA
  isExternal: true
  href: GTA.AnimationBlendDelta.html
  name: AnimationBlendDelta
  nameWithType: AnimationBlendDelta
  fullName: GTA.AnimationBlendDelta
- uid: GTA.AnimationFlags
  commentId: T:GTA.AnimationFlags
  parent: GTA
  isExternal: true
  href: GTA.AnimationFlags.html
  name: AnimationFlags
  nameWithType: AnimationFlags
  fullName: GTA.AnimationFlags
- uid: GTA.AnimationIKControlFlags
  commentId: T:GTA.AnimationIKControlFlags
  parent: GTA
  isExternal: true
  href: GTA.AnimationIKControlFlags.html
  name: AnimationIKControlFlags
  nameWithType: AnimationIKControlFlags
  fullName: GTA.AnimationIKControlFlags
- uid: GTA.TaskInvoker.PlayAnimationAdvanced*
  commentId: Overload:GTA.TaskInvoker.PlayAnimationAdvanced
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PlayAnimationAdvanced_GTA_CrClipAsset_GTA_Math_Vector3_GTA_Math_Vector3_System_Nullable_GTA_AnimationBlendDelta__System_Nullable_GTA_AnimationBlendDelta__System_Int32_GTA_AnimationFlags_System_Single_GTA_EulerRotationOrder_GTA_AnimationIKControlFlags_
  name: PlayAnimationAdvanced
  nameWithType: TaskInvoker.PlayAnimationAdvanced
  fullName: GTA.TaskInvoker.PlayAnimationAdvanced
- uid: System.Nullable{GTA.AnimationBlendDelta}
  commentId: T:System.Nullable{GTA.AnimationBlendDelta}
  parent: System
  definition: System.Nullable`1
  href: GTA.AnimationBlendDelta.html
  name: AnimationBlendDelta?
  nameWithType: AnimationBlendDelta?
  fullName: GTA.AnimationBlendDelta?
  spec.csharp:
  - uid: GTA.AnimationBlendDelta
    name: AnimationBlendDelta
    isExternal: true
    href: GTA.AnimationBlendDelta.html
  - name: '?'
  spec.vb:
  - uid: GTA.AnimationBlendDelta
    name: AnimationBlendDelta
    isExternal: true
    href: GTA.AnimationBlendDelta.html
  - name: '?'
- uid: GTA.EulerRotationOrder
  commentId: T:GTA.EulerRotationOrder
  parent: GTA
  isExternal: true
  href: GTA.EulerRotationOrder.html
  name: EulerRotationOrder
  nameWithType: EulerRotationOrder
  fullName: GTA.EulerRotationOrder
- uid: GTA.TaskInvoker.PlaySynchronizedScene*
  commentId: Overload:GTA.TaskInvoker.PlaySynchronizedScene
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PlaySynchronizedScene_GTA_FwSyncedScene_GTA_CrClipAsset_GTA_AnimationBlendDelta_GTA_AnimationBlendDelta_GTA_SyncedSceneFlags_GTA_RagdollBlockingFlags_System_Nullable_GTA_AnimationBlendDelta__GTA_AnimationIKControlFlags_
  name: PlaySynchronizedScene
  nameWithType: TaskInvoker.PlaySynchronizedScene
  fullName: GTA.TaskInvoker.PlaySynchronizedScene
- uid: GTA.FwSyncedScene
  commentId: T:GTA.FwSyncedScene
  parent: GTA
  isExternal: true
  href: GTA.FwSyncedScene.html
  name: FwSyncedScene
  nameWithType: FwSyncedScene
  fullName: GTA.FwSyncedScene
- uid: GTA.SyncedSceneFlags
  commentId: T:GTA.SyncedSceneFlags
  parent: GTA
  isExternal: true
  href: GTA.SyncedSceneFlags.html
  name: SyncedSceneFlags
  nameWithType: SyncedSceneFlags
  fullName: GTA.SyncedSceneFlags
- uid: GTA.RagdollBlockingFlags
  commentId: T:GTA.RagdollBlockingFlags
  parent: GTA
  isExternal: true
  href: GTA.RagdollBlockingFlags.html
  name: RagdollBlockingFlags
  nameWithType: RagdollBlockingFlags
  fullName: GTA.RagdollBlockingFlags
- uid: GTA.TaskInvoker.StartMoveNetworkByName*
  commentId: Overload:GTA.TaskInvoker.StartMoveNetworkByName
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartMoveNetworkByName_System_String_System_Nullable_GTA_AnimationBlendDuration__GTA_MoveNetworkFlags_
  name: StartMoveNetworkByName
  nameWithType: TaskInvoker.StartMoveNetworkByName
  fullName: GTA.TaskInvoker.StartMoveNetworkByName
- uid: System.Nullable{GTA.AnimationBlendDuration}
  commentId: T:System.Nullable{GTA.AnimationBlendDuration}
  parent: System
  definition: System.Nullable`1
  href: GTA.AnimationBlendDuration.html
  name: AnimationBlendDuration?
  nameWithType: AnimationBlendDuration?
  fullName: GTA.AnimationBlendDuration?
  spec.csharp:
  - uid: GTA.AnimationBlendDuration
    name: AnimationBlendDuration
    isExternal: true
    href: GTA.AnimationBlendDuration.html
  - name: '?'
  spec.vb:
  - uid: GTA.AnimationBlendDuration
    name: AnimationBlendDuration
    isExternal: true
    href: GTA.AnimationBlendDuration.html
  - name: '?'
- uid: GTA.MoveNetworkFlags
  commentId: T:GTA.MoveNetworkFlags
  parent: GTA
  isExternal: true
  href: GTA.MoveNetworkFlags.html
  name: MoveNetworkFlags
  nameWithType: MoveNetworkFlags
  fullName: GTA.MoveNetworkFlags
- uid: GTA.TaskInvoker.StartMoveNetworkAdvancedByName*
  commentId: Overload:GTA.TaskInvoker.StartMoveNetworkAdvancedByName
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartMoveNetworkAdvancedByName_System_String_GTA_Math_Vector3_GTA_Math_Vector3_GTA_EulerRotationOrder_System_Nullable_GTA_AnimationBlendDuration__GTA_MoveNetworkFlags_
  name: StartMoveNetworkAdvancedByName
  nameWithType: TaskInvoker.StartMoveNetworkAdvancedByName
  fullName: GTA.TaskInvoker.StartMoveNetworkAdvancedByName
- uid: GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams*
  commentId: Overload:GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartMoveNetworkByNameWithInitParams_System_String_GTA_TaskMoVEScriptedInitialParameters_System_Nullable_GTA_AnimationBlendDuration__GTA_MoveNetworkFlags_
  name: StartMoveNetworkByNameWithInitParams
  nameWithType: TaskInvoker.StartMoveNetworkByNameWithInitParams
  fullName: GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams
- uid: GTA.TaskMoVEScriptedInitialParameters
  commentId: T:GTA.TaskMoVEScriptedInitialParameters
  parent: GTA
  isExternal: true
  href: GTA.TaskMoVEScriptedInitialParameters.html
  name: TaskMoVEScriptedInitialParameters
  nameWithType: TaskMoVEScriptedInitialParameters
  fullName: GTA.TaskMoVEScriptedInitialParameters
- uid: GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams*
  commentId: Overload:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartMoveNetworkAdvancedByNameWithInitParams_System_String_GTA_TaskMoVEScriptedInitialParameters_GTA_Math_Vector3_GTA_Math_Vector3_GTA_EulerRotationOrder_System_Nullable_GTA_AnimationBlendDuration__GTA_MoveNetworkFlags_
  name: StartMoveNetworkAdvancedByNameWithInitParams
  nameWithType: TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams
  fullName: GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams
- uid: GTA.TaskInvoker.RappelFromHelicopter*
  commentId: Overload:GTA.TaskInvoker.RappelFromHelicopter
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_RappelFromHelicopter
  name: RappelFromHelicopter
  nameWithType: TaskInvoker.RappelFromHelicopter
  fullName: GTA.TaskInvoker.RappelFromHelicopter
- uid: GTA.TaskInvoker.ReactAndFlee*
  commentId: Overload:GTA.TaskInvoker.ReactAndFlee
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ReactAndFlee_GTA_Ped_
  name: ReactAndFlee
  nameWithType: TaskInvoker.ReactAndFlee
  fullName: GTA.TaskInvoker.ReactAndFlee
- uid: GTA.TaskInvoker.ReloadWeapon*
  commentId: Overload:GTA.TaskInvoker.ReloadWeapon
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ReloadWeapon
  name: ReloadWeapon
  nameWithType: TaskInvoker.ReloadWeapon
  fullName: GTA.TaskInvoker.ReloadWeapon
- uid: GTA.TaskInvoker.RunTo*
  commentId: Overload:GTA.TaskInvoker.RunTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_RunTo_GTA_Math_Vector3_System_Boolean_System_Int32_
  name: RunTo
  nameWithType: TaskInvoker.RunTo
  fullName: GTA.TaskInvoker.RunTo
- uid: GTA.TaskInvoker.ShootAt*
  commentId: Overload:GTA.TaskInvoker.ShootAt
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ShootAt_GTA_Ped_System_Int32_GTA_FiringPattern_
  name: ShootAt
  nameWithType: TaskInvoker.ShootAt
  fullName: GTA.TaskInvoker.ShootAt
- uid: GTA.FiringPattern
  commentId: T:GTA.FiringPattern
  parent: GTA
  isExternal: true
  href: GTA.FiringPattern.html
  name: FiringPattern
  nameWithType: FiringPattern
  fullName: GTA.FiringPattern
- uid: GTA.TaskInvoker.ShuffleToNextVehicleSeat*
  commentId: Overload:GTA.TaskInvoker.ShuffleToNextVehicleSeat
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ShuffleToNextVehicleSeat_GTA_Vehicle_
  name: ShuffleToNextVehicleSeat
  nameWithType: TaskInvoker.ShuffleToNextVehicleSeat
  fullName: GTA.TaskInvoker.ShuffleToNextVehicleSeat
- uid: GTA.TaskInvoker.Skydive*
  commentId: Overload:GTA.TaskInvoker.Skydive
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Skydive
  name: Skydive
  nameWithType: TaskInvoker.Skydive
  fullName: GTA.TaskInvoker.Skydive
- uid: GTA.TaskInvoker.SlideTo*
  commentId: Overload:GTA.TaskInvoker.SlideTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_SlideTo_GTA_Math_Vector3_System_Single_
  name: SlideTo
  nameWithType: TaskInvoker.SlideTo
  fullName: GTA.TaskInvoker.SlideTo
- uid: GTA.TaskInvoker.Pause*
  commentId: Overload:GTA.TaskInvoker.Pause
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Pause_System_Int32_
  name: Pause
  nameWithType: TaskInvoker.Pause
  fullName: GTA.TaskInvoker.Pause
- uid: GTA.TaskInvoker.StandStill*
  commentId: Overload:GTA.TaskInvoker.StandStill
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StandStill_System_Int32_
  name: StandStill
  nameWithType: TaskInvoker.StandStill
  fullName: GTA.TaskInvoker.StandStill
- uid: GTA.TaskInvoker.StartScenario*
  commentId: Overload:GTA.TaskInvoker.StartScenario
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartScenario_System_String_System_Single_
  name: StartScenario
  nameWithType: TaskInvoker.StartScenario
  fullName: GTA.TaskInvoker.StartScenario
- uid: GTA.TaskInvoker.StartScenarioInPlace*
  commentId: Overload:GTA.TaskInvoker.StartScenarioInPlace
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartScenarioInPlace_System_String_System_Int32_System_Boolean_
  name: StartScenarioInPlace
  nameWithType: TaskInvoker.StartScenarioInPlace
  fullName: GTA.TaskInvoker.StartScenarioInPlace
- uid: GTA.TaskInvoker.StartScenarioAtPosition*
  commentId: Overload:GTA.TaskInvoker.StartScenarioAtPosition
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartScenarioAtPosition_System_String_GTA_Math_Vector3_System_Single_System_Int32_System_Boolean_System_Boolean_
  name: StartScenarioAtPosition
  nameWithType: TaskInvoker.StartScenarioAtPosition
  fullName: GTA.TaskInvoker.StartScenarioAtPosition
- uid: GTA.TaskInvoker.StartVehicleMission*
  commentId: Overload:GTA.TaskInvoker.StartVehicleMission
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartVehicleMission_GTA_Vehicle_GTA_Vehicle_GTA_VehicleMissionType_System_Single_GTA_VehicleDrivingFlags_System_Single_System_Single_System_Boolean_
  name: StartVehicleMission
  nameWithType: TaskInvoker.StartVehicleMission
  fullName: GTA.TaskInvoker.StartVehicleMission
- uid: GTA.VehicleMissionType
  commentId: T:GTA.VehicleMissionType
  parent: GTA
  isExternal: true
  href: GTA.VehicleMissionType.html
  name: VehicleMissionType
  nameWithType: VehicleMissionType
  fullName: GTA.VehicleMissionType
- uid: GTA.TaskInvoker.VehicleEscort*
  commentId: Overload:GTA.TaskInvoker.VehicleEscort
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_VehicleEscort_GTA_Vehicle_GTA_Entity_GTA_VehicleEscortType_System_Single_GTA_VehicleDrivingFlags_System_Single_System_Int32_System_Single_
  name: VehicleEscort
  nameWithType: TaskInvoker.VehicleEscort
  fullName: GTA.TaskInvoker.VehicleEscort
- uid: GTA.VehicleEscortType
  commentId: T:GTA.VehicleEscortType
  parent: GTA
  isExternal: true
  href: GTA.VehicleEscortType.html
  name: VehicleEscortType
  nameWithType: VehicleEscortType
  fullName: GTA.VehicleEscortType
- uid: GTA.TaskInvoker.VehicleFollow*
  commentId: Overload:GTA.TaskInvoker.VehicleFollow
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_VehicleFollow_GTA_Vehicle_GTA_Entity_System_Single_GTA_VehicleDrivingFlags_System_Int32_
  name: VehicleFollow
  nameWithType: TaskInvoker.VehicleFollow
  fullName: GTA.TaskInvoker.VehicleFollow
- uid: GTA.TaskInvoker.VehicleHeliProtect*
  commentId: Overload:GTA.TaskInvoker.VehicleHeliProtect
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_VehicleHeliProtect_GTA_Vehicle_GTA_Entity_System_Single_GTA_VehicleDrivingFlags_System_Single_System_Int32_GTA_HeliMissionFlags_
  name: VehicleHeliProtect
  nameWithType: TaskInvoker.VehicleHeliProtect
  fullName: GTA.TaskInvoker.VehicleHeliProtect
- uid: GTA.HeliMissionFlags
  commentId: T:GTA.HeliMissionFlags
  parent: GTA
  isExternal: true
  href: GTA.HeliMissionFlags.html
  name: HeliMissionFlags
  nameWithType: HeliMissionFlags
  fullName: GTA.HeliMissionFlags
- uid: GTA.TaskInvoker.StartHeliMission*
  commentId: Overload:GTA.TaskInvoker.StartHeliMission
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartHeliMission_GTA_Vehicle_GTA_Vehicle_GTA_VehicleMissionType_System_Single_System_Single_System_Int32_System_Int32_System_Single_System_Single_GTA_HeliMissionFlags_
  name: StartHeliMission
  nameWithType: TaskInvoker.StartHeliMission
  fullName: GTA.TaskInvoker.StartHeliMission
- uid: GTA.TaskInvoker.HeliEscortHeli*
  commentId: Overload:GTA.TaskInvoker.HeliEscortHeli
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_HeliEscortHeli_GTA_Vehicle_GTA_Vehicle_GTA_Math_Vector3_
  name: HeliEscortHeli
  nameWithType: TaskInvoker.HeliEscortHeli
  fullName: GTA.TaskInvoker.HeliEscortHeli
- uid: GTA.TaskInvoker.StartPlaneMission*
  commentId: Overload:GTA.TaskInvoker.StartPlaneMission
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartPlaneMission_GTA_Vehicle_GTA_Vehicle_GTA_VehicleMissionType_System_Single_System_Single_System_Int32_System_Int32_System_Single_System_Boolean_
  name: StartPlaneMission
  nameWithType: TaskInvoker.StartPlaneMission
  fullName: GTA.TaskInvoker.StartPlaneMission
- uid: GTA.TaskInvoker.PlaneTaxi*
  commentId: Overload:GTA.TaskInvoker.PlaneTaxi
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PlaneTaxi_GTA_Vehicle_GTA_Math_Vector3_System_Single_System_Single_
  name: PlaneTaxi
  nameWithType: TaskInvoker.PlaneTaxi
  fullName: GTA.TaskInvoker.PlaneTaxi
- uid: GTA.TaskInvoker.StartBoatMission*
  commentId: Overload:GTA.TaskInvoker.StartBoatMission
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StartBoatMission_GTA_Vehicle_GTA_Vehicle_GTA_VehicleMissionType_System_Single_GTA_VehicleDrivingFlags_System_Single_GTA_BoatMissionFlags_
  name: StartBoatMission
  nameWithType: TaskInvoker.StartBoatMission
  fullName: GTA.TaskInvoker.StartBoatMission
- uid: GTA.BoatMissionFlags
  commentId: T:GTA.BoatMissionFlags
  parent: GTA
  isExternal: true
  href: GTA.BoatMissionFlags.html
  name: BoatMissionFlags
  nameWithType: BoatMissionFlags
  fullName: GTA.BoatMissionFlags
- uid: GTA.TaskInvoker.GoToPlanePreciseVtol*
  commentId: Overload:GTA.TaskInvoker.GoToPlanePreciseVtol
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoToPlanePreciseVtol_GTA_Vehicle_GTA_Math_Vector3_System_Int32_System_Int32_System_Nullable_System_Single__System_Boolean_
  name: GoToPlanePreciseVtol
  nameWithType: TaskInvoker.GoToPlanePreciseVtol
  fullName: GTA.TaskInvoker.GoToPlanePreciseVtol
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: GTA.TaskInvoker.GoToSubmarineAndStop*
  commentId: Overload:GTA.TaskInvoker.GoToSubmarineAndStop
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_GoToSubmarineAndStop_GTA_Vehicle_GTA_Math_Vector3_System_Boolean_
  name: GoToSubmarineAndStop
  nameWithType: TaskInvoker.GoToSubmarineAndStop
  fullName: GTA.TaskInvoker.GoToSubmarineAndStop
- uid: GTA.TaskInvoker.SwapWeapon*
  commentId: Overload:GTA.TaskInvoker.SwapWeapon
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_SwapWeapon
  name: SwapWeapon
  nameWithType: TaskInvoker.SwapWeapon
  fullName: GTA.TaskInvoker.SwapWeapon
- uid: GTA.TaskInvoker.TurnTo*
  commentId: Overload:GTA.TaskInvoker.TurnTo
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_TurnTo_GTA_Entity_System_Int32_
  name: TurnTo
  nameWithType: TaskInvoker.TurnTo
  fullName: GTA.TaskInvoker.TurnTo
- uid: GTA.TaskInvoker.UseParachute*
  commentId: Overload:GTA.TaskInvoker.UseParachute
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_UseParachute
  name: UseParachute
  nameWithType: TaskInvoker.UseParachute
  fullName: GTA.TaskInvoker.UseParachute
- uid: GTA.TaskInvoker.UseMobilePhone*
  commentId: Overload:GTA.TaskInvoker.UseMobilePhone
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_UseMobilePhone
  name: UseMobilePhone
  nameWithType: TaskInvoker.UseMobilePhone
  fullName: GTA.TaskInvoker.UseMobilePhone
- uid: GTA.TaskInvoker.PutAwayParachute*
  commentId: Overload:GTA.TaskInvoker.PutAwayParachute
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PutAwayParachute
  name: PutAwayParachute
  nameWithType: TaskInvoker.PutAwayParachute
  fullName: GTA.TaskInvoker.PutAwayParachute
- uid: GTA.TaskInvoker.PutAwayMobilePhone*
  commentId: Overload:GTA.TaskInvoker.PutAwayMobilePhone
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PutAwayMobilePhone
  name: PutAwayMobilePhone
  nameWithType: TaskInvoker.PutAwayMobilePhone
  fullName: GTA.TaskInvoker.PutAwayMobilePhone
- uid: GTA.TaskInvoker.VehicleChase*
  commentId: Overload:GTA.TaskInvoker.VehicleChase
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_VehicleChase_GTA_Ped_
  name: VehicleChase
  nameWithType: TaskInvoker.VehicleChase
  fullName: GTA.TaskInvoker.VehicleChase
- uid: GTA.TaskInvoker.HeliChase*
  commentId: Overload:GTA.TaskInvoker.HeliChase
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_HeliChase_GTA_Entity_GTA_Math_Vector3_
  name: HeliChase
  nameWithType: TaskInvoker.HeliChase
  fullName: GTA.TaskInvoker.HeliChase
- uid: GTA.TaskInvoker.PlaneChase*
  commentId: Overload:GTA.TaskInvoker.PlaneChase
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_PlaneChase_GTA_Vehicle_GTA_Math_Vector3_GTA_Math_Vector3_
  name: PlaneChase
  nameWithType: TaskInvoker.PlaneChase
  fullName: GTA.TaskInvoker.PlaneChase
- uid: GTA.TaskInvoker.VehicleShootAtPed*
  commentId: Overload:GTA.TaskInvoker.VehicleShootAtPed
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_VehicleShootAtPed_GTA_Ped_
  name: VehicleShootAtPed
  nameWithType: TaskInvoker.VehicleShootAtPed
  fullName: GTA.TaskInvoker.VehicleShootAtPed
- uid: GTA.TaskInvoker.Wait*
  commentId: Overload:GTA.TaskInvoker.Wait
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Wait_System_Int32_
  name: Wait
  nameWithType: TaskInvoker.Wait
  fullName: GTA.TaskInvoker.Wait
- uid: GTA.TaskInvoker.Wander*
  commentId: Overload:GTA.TaskInvoker.Wander
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_Wander_System_Single_System_Boolean_
  name: Wander
  nameWithType: TaskInvoker.Wander
  fullName: GTA.TaskInvoker.Wander
- uid: GTA.TaskInvoker.WanderAround*
  commentId: Overload:GTA.TaskInvoker.WanderAround
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_WanderAround
  name: WanderAround
  nameWithType: TaskInvoker.WanderAround
  fullName: GTA.TaskInvoker.WanderAround
- uid: GTA.TaskInvoker.WarpIntoVehicle*
  commentId: Overload:GTA.TaskInvoker.WarpIntoVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_WarpIntoVehicle_GTA_Vehicle_GTA_VehicleSeat_
  name: WarpIntoVehicle
  nameWithType: TaskInvoker.WarpIntoVehicle
  fullName: GTA.TaskInvoker.WarpIntoVehicle
- uid: GTA.TaskInvoker.WarpOutOfVehicle*
  commentId: Overload:GTA.TaskInvoker.WarpOutOfVehicle
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_WarpOutOfVehicle_GTA_Vehicle_
  name: WarpOutOfVehicle
  nameWithType: TaskInvoker.WarpOutOfVehicle
  fullName: GTA.TaskInvoker.WarpOutOfVehicle
- uid: GTA.TaskInvoker.ForceMotionState*
  commentId: Overload:GTA.TaskInvoker.ForceMotionState
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ForceMotionState_GTA_PedMotionState_System_Boolean_
  name: ForceMotionState
  nameWithType: TaskInvoker.ForceMotionState
  fullName: GTA.TaskInvoker.ForceMotionState
- uid: GTA.PedMotionState
  commentId: T:GTA.PedMotionState
  parent: GTA
  isExternal: true
  href: GTA.PedMotionState.html
  name: PedMotionState
  nameWithType: PedMotionState
  fullName: GTA.PedMotionState
- uid: GTA.TaskInvoker.ClearAll*
  commentId: Overload:GTA.TaskInvoker.ClearAll
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ClearAll
  name: ClearAll
  nameWithType: TaskInvoker.ClearAll
  fullName: GTA.TaskInvoker.ClearAll
- uid: GTA.TaskInvoker.ClearAllImmediately*
  commentId: Overload:GTA.TaskInvoker.ClearAllImmediately
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ClearAllImmediately
  name: ClearAllImmediately
  nameWithType: TaskInvoker.ClearAllImmediately
  fullName: GTA.TaskInvoker.ClearAllImmediately
- uid: GTA.TaskInvoker.ClearLookAt*
  commentId: Overload:GTA.TaskInvoker.ClearLookAt
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ClearLookAt
  name: ClearLookAt
  nameWithType: TaskInvoker.ClearLookAt
  fullName: GTA.TaskInvoker.ClearLookAt
- uid: GTA.TaskInvoker.ClearSecondary*
  commentId: Overload:GTA.TaskInvoker.ClearSecondary
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ClearSecondary
  name: ClearSecondary
  nameWithType: TaskInvoker.ClearSecondary
  fullName: GTA.TaskInvoker.ClearSecondary
- uid: GTA.TaskInvoker.StopScriptedAnimationTask*
  commentId: Overload:GTA.TaskInvoker.StopScriptedAnimationTask
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_StopScriptedAnimationTask_GTA_CrClipAsset_System_Nullable_GTA_AnimationBlendDelta__
  name: StopScriptedAnimationTask
  nameWithType: TaskInvoker.StopScriptedAnimationTask
  fullName: GTA.TaskInvoker.StopScriptedAnimationTask
- uid: GTA.TaskInvoker.ClearAnimation*
  commentId: Overload:GTA.TaskInvoker.ClearAnimation
  isExternal: true
  href: GTA.TaskInvoker.html#GTA_TaskInvoker_ClearAnimation_System_String_System_String_
  name: ClearAnimation
  nameWithType: TaskInvoker.ClearAnimation
  fullName: GTA.TaskInvoker.ClearAnimation
