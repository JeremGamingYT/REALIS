### YamlMime:ManagedReference
items:
- uid: GTA.World
  commentId: T:GTA.World
  id: World
  parent: GTA
  children:
  - GTA.World.AddExplosion(GTA.Math.Vector3,GTA.ExplosionType,System.Single,System.Single,GTA.Ped,System.Boolean,System.Boolean)
  - GTA.World.AddRelationshipGroup(System.String)
  - GTA.World.AddRope(GTA.RopeType,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  - GTA.World.AnimatedBuildingCapacity
  - GTA.World.AnimatedBuildingCount
  - GTA.World.Blackout
  - GTA.World.BuildingCapacity
  - GTA.World.BuildingCount
  - GTA.World.CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  - GTA.World.ClearAngledAreaOfVehicles(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - GTA.World.ClearArea(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)
  - GTA.World.ClearAreaOfCops(GTA.Math.Vector3,System.Single)
  - GTA.World.ClearAreaOfPeds(GTA.Math.Vector3,System.Single)
  - GTA.World.ClearAreaOfProjectiles(GTA.Math.Vector3,System.Single)
  - GTA.World.ClearAreaOfProps(GTA.Math.Vector3,System.Single,GTA.ClearPropsFlags)
  - GTA.World.ClearAreaOfVehicles(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)
  - GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)
  - GTA.World.CreateBlip(GTA.Math.Vector3)
  - GTA.World.CreateBlip(GTA.Math.Vector3,System.Single)
  - GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  - GTA.World.CreateCheckpoint(GTA.CheckpointIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  - GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  - GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  - GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  - GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  - GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  - GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  - GTA.World.CreatePed(GTA.Model,GTA.Math.Vector3,System.Single)
  - GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.EulerRotationOrder,GTA.Model)
  - GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model)
  - GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)
  - GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,System.Boolean,System.Boolean)
  - GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)
  - GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,System.Boolean)
  - GTA.World.CreateRandomPed(GTA.Math.Vector3)
  - GTA.World.CreateRandomPed(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  - GTA.World.CreateRandomVehicle(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  - GTA.World.CreateVehicle(GTA.Model,GTA.Math.Vector3,System.Single)
  - GTA.World.CurrentTimeOfDay
  - GTA.World.DeleteAllTrains
  - GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color,GTA.DrawBoxFlags)
  - GTA.World.DrawLightWithRange(GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single)
  - GTA.World.DrawLine(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  - GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)
  - GTA.World.DrawMarkerEx(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Nullable{GTA.Graphics.TextureAsset},System.Boolean,System.Boolean,System.Boolean)
  - GTA.World.DrawPolygon(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  - GTA.World.DrawSpotLight(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  - GTA.World.DrawSpotLightWithShadow(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  - GTA.World.EntityColliderCapacity
  - GTA.World.EntityColliderCount
  - GTA.World.ForceLightningFlash
  - GTA.World.GetAllAnimatedBuildings
  - GTA.World.GetAllBlips(GTA.BlipSprite[])
  - GTA.World.GetAllBuildings
  - GTA.World.GetAllCheckpoints
  - GTA.World.GetAllEntities
  - GTA.World.GetAllInteriorInstances
  - GTA.World.GetAllInteriorProxies
  - GTA.World.GetAllPeds(GTA.Model[])
  - GTA.World.GetAllPickupObjects
  - GTA.World.GetAllProjectiles
  - GTA.World.GetAllProps(GTA.Model[])
  - GTA.World.GetAllRocketProjectiles
  - GTA.World.GetAllThrownProjectiles
  - GTA.World.GetAllVehicles(GTA.Model[])
  - GTA.World.GetApproxFloorForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  - GTA.World.GetApproxFloorForPoint(GTA.Math.Vector2)
  - GTA.World.GetApproxHeightForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  - GTA.World.GetApproxHeightForPoint(GTA.Math.Vector2)
  - GTA.World.GetClosest(GTA.Math.Vector2,GTA.AnimatedBuilding[])
  - GTA.World.GetClosest(GTA.Math.Vector2,GTA.Building[])
  - GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorInstance[])
  - GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorProxy[])
  - GTA.World.GetClosest(GTA.Math.Vector3,GTA.AnimatedBuilding[])
  - GTA.World.GetClosest(GTA.Math.Vector3,GTA.Building[])
  - GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorInstance[])
  - GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorProxy[])
  - GTA.World.GetClosestAnimatedBuilding(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestBuilding(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestInteriorInstance(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestInteriorProxy(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestPed(GTA.Math.Vector3,System.Single,GTA.Model[])
  - GTA.World.GetClosestPickupObject(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestProjectile(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestProp(GTA.Math.Vector3,System.Single,GTA.Model[])
  - GTA.World.GetClosestRocketProjectile(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestThrownProjectile(GTA.Math.Vector3,System.Single)
  - GTA.World.GetClosestVehicle(GTA.Math.Vector3,System.Single,GTA.Model[])
  - GTA.World.GetClosest``1(GTA.Math.Vector2,``0[])
  - GTA.World.GetClosest``1(GTA.Math.Vector3,``0[])
  - GTA.World.GetCrosshairCoordinates
  - GTA.World.GetCrosshairCoordinates(GTA.IntersectFlags,GTA.Entity)
  - GTA.World.GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  - GTA.World.GetGroundHeight(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  - GTA.World.GetGroundHeightAndNormal(GTA.Math.Vector3,System.Single@,GTA.Math.Vector3@)
  - GTA.World.GetGroundHeightExcludingProps(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  - GTA.World.GetNearbyAnimatedBuildings(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyBlips(GTA.Math.Vector3,System.Single,GTA.BlipSprite[])
  - GTA.World.GetNearbyBuildings(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyEntities(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyInteriorInstances(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyInteriorProxies(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyPeds(GTA.Math.Vector3,System.Single,GTA.Model[])
  - GTA.World.GetNearbyPeds(GTA.Ped,System.Single,GTA.Model[])
  - GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyProjectiles(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyProps(GTA.Math.Vector3,System.Single,GTA.Model[])
  - GTA.World.GetNearbyRocketProjectiles(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyThrownProjectiles(GTA.Math.Vector3,System.Single)
  - GTA.World.GetNearbyVehicles(GTA.Math.Vector3,System.Single,GTA.Model[])
  - GTA.World.GetNearbyVehicles(GTA.Ped,System.Single,GTA.Model[])
  - GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector2)
  - GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector3)
  - GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2,System.Boolean)
  - GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3,System.Boolean)
  - GTA.World.GetPositionOnRoadside(GTA.Math.Vector3,GTA.Direction,GTA.Math.Vector3@)
  - GTA.World.GetSafePositionForPed(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetSafePositionFlags)
  - GTA.World.GetStreetName(GTA.Math.Vector2)
  - GTA.World.GetStreetName(GTA.Math.Vector3)
  - GTA.World.GetStreetName(GTA.Math.Vector3,System.String@)
  - GTA.World.GetZoneDisplayName(GTA.Math.Vector2)
  - GTA.World.GetZoneDisplayName(GTA.Math.Vector3)
  - GTA.World.GetZoneLocalizedName(GTA.Math.Vector2)
  - GTA.World.GetZoneLocalizedName(GTA.Math.Vector3)
  - GTA.World.GravityLevel
  - GTA.World.InteriorInstanceCapacity
  - GTA.World.InteriorInstanceCount
  - GTA.World.InteriorProxyCapacity
  - GTA.World.InteriorProxyCount
  - GTA.World.IsClockPaused
  - GTA.World.IsPointInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  - GTA.World.MillisecondsPerGameMinute
  - GTA.World.NextWeather
  - GTA.World.PauseClock(System.Boolean)
  - GTA.World.PedCapacity
  - GTA.World.PedCount
  - GTA.World.PickupObjectCapacity
  - GTA.World.PickupObjectCount
  - GTA.World.ProjectileCapacity
  - GTA.World.ProjectileCount
  - GTA.World.PropCapacity
  - GTA.World.PropCount
  - GTA.World.RainLevel
  - GTA.World.RainLevelOverride
  - GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity)
  - GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)
  - GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3,System.Single)
  - GTA.World.RemoveWaypoint
  - GTA.World.SetAmbientPedDensityMultiplierThisFrame(System.Single)
  - GTA.World.SetAmbientVehicleDensityMultiplierThisFrame(System.Single)
  - GTA.World.SetRandomWeather
  - GTA.World.SetWindSpeedOverrideBySpeed(System.Single)
  - GTA.World.ShootSingleBullet(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single)
  - GTA.World.ShootSingleBulletIgnoreEntity(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,GTA.Entity)
  - GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)
  - GTA.World.SnowLevel
  - GTA.World.SnowLevelOverride
  - GTA.World.TransitionToWeather(GTA.Weather,System.Single)
  - GTA.World.VehicleCapacity
  - GTA.World.VehicleCount
  - GTA.World.VehicleHighSpeedBumpMultiplier(System.Single)
  - GTA.World.WaypointBlip
  - GTA.World.WaypointPosition
  - GTA.World.Weather
  - GTA.World.WindDirection
  - GTA.World.WindSpeed
  - GTA.World.WindSpeedOverride
  langs:
  - csharp
  - vb
  name: World
  nameWithType: World
  fullName: GTA.World
  type: Class
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static class World
    content.vb: Public Module World
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: GTA.World.PauseClock(System.Boolean)
  commentId: M:GTA.World.PauseClock(System.Boolean)
  id: PauseClock(System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PauseClock(bool)
  nameWithType: World.PauseClock(bool)
  fullName: GTA.World.PauseClock(bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("The World.PauseClock is obsolete, use GTA.Chrono.IsPaused instead.")]

      public static void PauseClock(bool value)
    parameters:
    - id: value
      type: System.Boolean
    content.vb: >-
      <Obsolete("The World.PauseClock is obsolete, use GTA.Chrono.IsPaused instead.")>

      Public Shared Sub PauseClock(value As Boolean)
  overload: GTA.World.PauseClock*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The World.PauseClock is obsolete, use GTA.Chrono.IsPaused instead.
  nameWithType.vb: World.PauseClock(Boolean)
  fullName.vb: GTA.World.PauseClock(Boolean)
  name.vb: PauseClock(Boolean)
- uid: GTA.World.TransitionToWeather(GTA.Weather,System.Single)
  commentId: M:GTA.World.TransitionToWeather(GTA.Weather,System.Single)
  id: TransitionToWeather(GTA.Weather,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: TransitionToWeather(Weather, float)
  nameWithType: World.TransitionToWeather(Weather, float)
  fullName: GTA.World.TransitionToWeather(GTA.Weather, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void TransitionToWeather(Weather weather, float duration)
    parameters:
    - id: weather
      type: GTA.Weather
    - id: duration
      type: System.Single
    content.vb: Public Shared Sub TransitionToWeather(weather As Weather, duration As Single)
  overload: GTA.World.TransitionToWeather*
  nameWithType.vb: World.TransitionToWeather(Weather, Single)
  fullName.vb: GTA.World.TransitionToWeather(GTA.Weather, Single)
  name.vb: TransitionToWeather(Weather, Single)
- uid: GTA.World.SetRandomWeather
  commentId: M:GTA.World.SetRandomWeather
  id: SetRandomWeather
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: SetRandomWeather()
  nameWithType: World.SetRandomWeather()
  fullName: GTA.World.SetRandomWeather()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void SetRandomWeather()
    content.vb: Public Shared Sub SetRandomWeather()
  overload: GTA.World.SetRandomWeather*
- uid: GTA.World.ForceLightningFlash
  commentId: M:GTA.World.ForceLightningFlash
  id: ForceLightningFlash
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ForceLightningFlash()
  nameWithType: World.ForceLightningFlash()
  fullName: GTA.World.ForceLightningFlash()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ForceLightningFlash()
    content.vb: Public Shared Sub ForceLightningFlash()
  overload: GTA.World.ForceLightningFlash*
- uid: GTA.World.SetWindSpeedOverrideBySpeed(System.Single)
  commentId: M:GTA.World.SetWindSpeedOverrideBySpeed(System.Single)
  id: SetWindSpeedOverrideBySpeed(System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: SetWindSpeedOverrideBySpeed(float)
  nameWithType: World.SetWindSpeedOverrideBySpeed(float)
  fullName: GTA.World.SetWindSpeedOverrideBySpeed(float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void SetWindSpeedOverrideBySpeed(float windSpeed)
    parameters:
    - id: windSpeed
      type: System.Single
    content.vb: Public Shared Sub SetWindSpeedOverrideBySpeed(windSpeed As Single)
  overload: GTA.World.SetWindSpeedOverrideBySpeed*
  nameWithType.vb: World.SetWindSpeedOverrideBySpeed(Single)
  fullName.vb: GTA.World.SetWindSpeedOverrideBySpeed(Single)
  name.vb: SetWindSpeedOverrideBySpeed(Single)
- uid: GTA.World.RemoveWaypoint
  commentId: M:GTA.World.RemoveWaypoint
  id: RemoveWaypoint
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: RemoveWaypoint()
  nameWithType: World.RemoveWaypoint()
  fullName: GTA.World.RemoveWaypoint()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void RemoveWaypoint()
    content.vb: Public Shared Sub RemoveWaypoint()
  overload: GTA.World.RemoveWaypoint*
- uid: GTA.World.GetAllBlips(GTA.BlipSprite[])
  commentId: M:GTA.World.GetAllBlips(GTA.BlipSprite[])
  id: GetAllBlips(GTA.BlipSprite[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllBlips(params BlipSprite[])
  nameWithType: World.GetAllBlips(params BlipSprite[])
  fullName: GTA.World.GetAllBlips(params GTA.BlipSprite[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Blip[] GetAllBlips(params BlipSprite[] blipTypes)
    parameters:
    - id: blipTypes
      type: GTA.BlipSprite[]
    return:
      type: GTA.Blip[]
    content.vb: Public Shared Function GetAllBlips(ParamArray blipTypes As BlipSprite()) As Blip()
  overload: GTA.World.GetAllBlips*
  nameWithType.vb: World.GetAllBlips(ParamArray BlipSprite())
  fullName.vb: GTA.World.GetAllBlips(ParamArray GTA.BlipSprite())
  name.vb: GetAllBlips(ParamArray BlipSprite())
- uid: GTA.World.GetNearbyBlips(GTA.Math.Vector3,System.Single,GTA.BlipSprite[])
  commentId: M:GTA.World.GetNearbyBlips(GTA.Math.Vector3,System.Single,GTA.BlipSprite[])
  id: GetNearbyBlips(GTA.Math.Vector3,System.Single,GTA.BlipSprite[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyBlips(Vector3, float, params BlipSprite[])
  nameWithType: World.GetNearbyBlips(Vector3, float, params BlipSprite[])
  fullName: GTA.World.GetNearbyBlips(GTA.Math.Vector3, float, params GTA.BlipSprite[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Blip[] GetNearbyBlips(Vector3 position, float radius, params BlipSprite[] blipTypes)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: blipTypes
      type: GTA.BlipSprite[]
    return:
      type: GTA.Blip[]
    content.vb: Public Shared Function GetNearbyBlips(position As Vector3, radius As Single, ParamArray blipTypes As BlipSprite()) As Blip()
  overload: GTA.World.GetNearbyBlips*
  nameWithType.vb: World.GetNearbyBlips(Vector3, Single, ParamArray BlipSprite())
  fullName.vb: GTA.World.GetNearbyBlips(GTA.Math.Vector3, Single, ParamArray GTA.BlipSprite())
  name.vb: GetNearbyBlips(Vector3, Single, ParamArray BlipSprite())
- uid: GTA.World.CreateBlip(GTA.Math.Vector3)
  commentId: M:GTA.World.CreateBlip(GTA.Math.Vector3)
  id: CreateBlip(GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateBlip(Vector3)
  nameWithType: World.CreateBlip(Vector3)
  fullName: GTA.World.CreateBlip(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Blip CreateBlip(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    return:
      type: GTA.Blip
    content.vb: Public Shared Function CreateBlip(position As Vector3) As Blip
  overload: GTA.World.CreateBlip*
- uid: GTA.World.CreateBlip(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.CreateBlip(GTA.Math.Vector3,System.Single)
  id: CreateBlip(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateBlip(Vector3, float)
  nameWithType: World.CreateBlip(Vector3, float)
  fullName: GTA.World.CreateBlip(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Blip CreateBlip(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Blip
    content.vb: Public Shared Function CreateBlip(position As Vector3, radius As Single) As Blip
  overload: GTA.World.CreateBlip*
  nameWithType.vb: World.CreateBlip(Vector3, Single)
  fullName.vb: GTA.World.CreateBlip(GTA.Math.Vector3, Single)
  name.vb: CreateBlip(Vector3, Single)
- uid: GTA.World.GetClosestPed(GTA.Math.Vector3,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetClosestPed(GTA.Math.Vector3,System.Single,GTA.Model[])
  id: GetClosestPed(GTA.Math.Vector3,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestPed(Vector3, float, params Model[])
  nameWithType: World.GetClosestPed(Vector3, float, params Model[])
  fullName: GTA.World.GetClosestPed(GTA.Math.Vector3, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped GetClosestPed(Vector3 position, float radius, params Model[] models)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Ped
    content.vb: Public Shared Function GetClosestPed(position As Vector3, radius As Single, ParamArray models As Model()) As Ped
  overload: GTA.World.GetClosestPed*
  nameWithType.vb: World.GetClosestPed(Vector3, Single, ParamArray Model())
  fullName.vb: GTA.World.GetClosestPed(GTA.Math.Vector3, Single, ParamArray GTA.Model())
  name.vb: GetClosestPed(Vector3, Single, ParamArray Model())
- uid: GTA.World.GetAllPeds(GTA.Model[])
  commentId: M:GTA.World.GetAllPeds(GTA.Model[])
  id: GetAllPeds(GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllPeds(params Model[])
  nameWithType: World.GetAllPeds(params Model[])
  fullName: GTA.World.GetAllPeds(params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped[] GetAllPeds(params Model[] models)
    parameters:
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Ped[]
    content.vb: Public Shared Function GetAllPeds(ParamArray models As Model()) As Ped()
  overload: GTA.World.GetAllPeds*
  nameWithType.vb: World.GetAllPeds(ParamArray Model())
  fullName.vb: GTA.World.GetAllPeds(ParamArray GTA.Model())
  name.vb: GetAllPeds(ParamArray Model())
- uid: GTA.World.GetNearbyPeds(GTA.Ped,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetNearbyPeds(GTA.Ped,System.Single,GTA.Model[])
  id: GetNearbyPeds(GTA.Ped,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyPeds(Ped, float, params Model[])
  nameWithType: World.GetNearbyPeds(Ped, float, params Model[])
  fullName: GTA.World.GetNearbyPeds(GTA.Ped, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped[] GetNearbyPeds(Ped ped, float radius, params Model[] models)
    parameters:
    - id: ped
      type: GTA.Ped
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Ped[]
    content.vb: Public Shared Function GetNearbyPeds(ped As Ped, radius As Single, ParamArray models As Model()) As Ped()
  overload: GTA.World.GetNearbyPeds*
  nameWithType.vb: World.GetNearbyPeds(Ped, Single, ParamArray Model())
  fullName.vb: GTA.World.GetNearbyPeds(GTA.Ped, Single, ParamArray GTA.Model())
  name.vb: GetNearbyPeds(Ped, Single, ParamArray Model())
- uid: GTA.World.GetNearbyPeds(GTA.Math.Vector3,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetNearbyPeds(GTA.Math.Vector3,System.Single,GTA.Model[])
  id: GetNearbyPeds(GTA.Math.Vector3,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyPeds(Vector3, float, params Model[])
  nameWithType: World.GetNearbyPeds(Vector3, float, params Model[])
  fullName: GTA.World.GetNearbyPeds(GTA.Math.Vector3, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped[] GetNearbyPeds(Vector3 position, float radius, params Model[] models)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Ped[]
    content.vb: Public Shared Function GetNearbyPeds(position As Vector3, radius As Single, ParamArray models As Model()) As Ped()
  overload: GTA.World.GetNearbyPeds*
  nameWithType.vb: World.GetNearbyPeds(Vector3, Single, ParamArray Model())
  fullName.vb: GTA.World.GetNearbyPeds(GTA.Math.Vector3, Single, ParamArray GTA.Model())
  name.vb: GetNearbyPeds(Vector3, Single, ParamArray Model())
- uid: GTA.World.GetClosestVehicle(GTA.Math.Vector3,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetClosestVehicle(GTA.Math.Vector3,System.Single,GTA.Model[])
  id: GetClosestVehicle(GTA.Math.Vector3,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestVehicle(Vector3, float, params Model[])
  nameWithType: World.GetClosestVehicle(Vector3, float, params Model[])
  fullName: GTA.World.GetClosestVehicle(GTA.Math.Vector3, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vehicle GetClosestVehicle(Vector3 position, float radius, params Model[] models)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Vehicle
    content.vb: Public Shared Function GetClosestVehicle(position As Vector3, radius As Single, ParamArray models As Model()) As Vehicle
  overload: GTA.World.GetClosestVehicle*
  nameWithType.vb: World.GetClosestVehicle(Vector3, Single, ParamArray Model())
  fullName.vb: GTA.World.GetClosestVehicle(GTA.Math.Vector3, Single, ParamArray GTA.Model())
  name.vb: GetClosestVehicle(Vector3, Single, ParamArray Model())
- uid: GTA.World.GetAllVehicles(GTA.Model[])
  commentId: M:GTA.World.GetAllVehicles(GTA.Model[])
  id: GetAllVehicles(GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllVehicles(params Model[])
  nameWithType: World.GetAllVehicles(params Model[])
  fullName: GTA.World.GetAllVehicles(params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vehicle[] GetAllVehicles(params Model[] models)
    parameters:
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Vehicle[]
    content.vb: Public Shared Function GetAllVehicles(ParamArray models As Model()) As Vehicle()
  overload: GTA.World.GetAllVehicles*
  nameWithType.vb: World.GetAllVehicles(ParamArray Model())
  fullName.vb: GTA.World.GetAllVehicles(ParamArray GTA.Model())
  name.vb: GetAllVehicles(ParamArray Model())
- uid: GTA.World.GetNearbyVehicles(GTA.Ped,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetNearbyVehicles(GTA.Ped,System.Single,GTA.Model[])
  id: GetNearbyVehicles(GTA.Ped,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyVehicles(Ped, float, params Model[])
  nameWithType: World.GetNearbyVehicles(Ped, float, params Model[])
  fullName: GTA.World.GetNearbyVehicles(GTA.Ped, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vehicle[] GetNearbyVehicles(Ped ped, float radius, params Model[] models)
    parameters:
    - id: ped
      type: GTA.Ped
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Vehicle[]
    content.vb: Public Shared Function GetNearbyVehicles(ped As Ped, radius As Single, ParamArray models As Model()) As Vehicle()
  overload: GTA.World.GetNearbyVehicles*
  nameWithType.vb: World.GetNearbyVehicles(Ped, Single, ParamArray Model())
  fullName.vb: GTA.World.GetNearbyVehicles(GTA.Ped, Single, ParamArray GTA.Model())
  name.vb: GetNearbyVehicles(Ped, Single, ParamArray Model())
- uid: GTA.World.GetNearbyVehicles(GTA.Math.Vector3,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetNearbyVehicles(GTA.Math.Vector3,System.Single,GTA.Model[])
  id: GetNearbyVehicles(GTA.Math.Vector3,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyVehicles(Vector3, float, params Model[])
  nameWithType: World.GetNearbyVehicles(Vector3, float, params Model[])
  fullName: GTA.World.GetNearbyVehicles(GTA.Math.Vector3, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vehicle[] GetNearbyVehicles(Vector3 position, float radius, params Model[] models)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Vehicle[]
    content.vb: Public Shared Function GetNearbyVehicles(position As Vector3, radius As Single, ParamArray models As Model()) As Vehicle()
  overload: GTA.World.GetNearbyVehicles*
  nameWithType.vb: World.GetNearbyVehicles(Vector3, Single, ParamArray Model())
  fullName.vb: GTA.World.GetNearbyVehicles(GTA.Math.Vector3, Single, ParamArray GTA.Model())
  name.vb: GetNearbyVehicles(Vector3, Single, ParamArray Model())
- uid: GTA.World.GetClosestProp(GTA.Math.Vector3,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetClosestProp(GTA.Math.Vector3,System.Single,GTA.Model[])
  id: GetClosestProp(GTA.Math.Vector3,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestProp(Vector3, float, params Model[])
  nameWithType: World.GetClosestProp(Vector3, float, params Model[])
  fullName: GTA.World.GetClosestProp(GTA.Math.Vector3, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop GetClosestProp(Vector3 position, float radius, params Model[] models)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Prop
    content.vb: Public Shared Function GetClosestProp(position As Vector3, radius As Single, ParamArray models As Model()) As Prop
  overload: GTA.World.GetClosestProp*
  nameWithType.vb: World.GetClosestProp(Vector3, Single, ParamArray Model())
  fullName.vb: GTA.World.GetClosestProp(GTA.Math.Vector3, Single, ParamArray GTA.Model())
  name.vb: GetClosestProp(Vector3, Single, ParamArray Model())
- uid: GTA.World.GetAllProps(GTA.Model[])
  commentId: M:GTA.World.GetAllProps(GTA.Model[])
  id: GetAllProps(GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllProps(params Model[])
  nameWithType: World.GetAllProps(params Model[])
  fullName: GTA.World.GetAllProps(params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop[] GetAllProps(params Model[] models)
    parameters:
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Prop[]
    content.vb: Public Shared Function GetAllProps(ParamArray models As Model()) As Prop()
  overload: GTA.World.GetAllProps*
  nameWithType.vb: World.GetAllProps(ParamArray Model())
  fullName.vb: GTA.World.GetAllProps(ParamArray GTA.Model())
  name.vb: GetAllProps(ParamArray Model())
- uid: GTA.World.GetNearbyProps(GTA.Math.Vector3,System.Single,GTA.Model[])
  commentId: M:GTA.World.GetNearbyProps(GTA.Math.Vector3,System.Single,GTA.Model[])
  id: GetNearbyProps(GTA.Math.Vector3,System.Single,GTA.Model[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyProps(Vector3, float, params Model[])
  nameWithType: World.GetNearbyProps(Vector3, float, params Model[])
  fullName: GTA.World.GetNearbyProps(GTA.Math.Vector3, float, params GTA.Model[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop[] GetNearbyProps(Vector3 position, float radius, params Model[] models)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: models
      type: GTA.Model[]
    return:
      type: GTA.Prop[]
    content.vb: Public Shared Function GetNearbyProps(position As Vector3, radius As Single, ParamArray models As Model()) As Prop()
  overload: GTA.World.GetNearbyProps*
  nameWithType.vb: World.GetNearbyProps(Vector3, Single, ParamArray Model())
  fullName.vb: GTA.World.GetNearbyProps(GTA.Math.Vector3, Single, ParamArray GTA.Model())
  name.vb: GetNearbyProps(Vector3, Single, ParamArray Model())
- uid: GTA.World.GetClosestPickupObject(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestPickupObject(GTA.Math.Vector3,System.Single)
  id: GetClosestPickupObject(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestPickupObject(Vector3, float)
  nameWithType: World.GetClosestPickupObject(Vector3, float)
  fullName: GTA.World.GetClosestPickupObject(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop GetClosestPickupObject(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Prop
    content.vb: Public Shared Function GetClosestPickupObject(position As Vector3, radius As Single) As Prop
  overload: GTA.World.GetClosestPickupObject*
  nameWithType.vb: World.GetClosestPickupObject(Vector3, Single)
  fullName.vb: GTA.World.GetClosestPickupObject(GTA.Math.Vector3, Single)
  name.vb: GetClosestPickupObject(Vector3, Single)
- uid: GTA.World.GetAllPickupObjects
  commentId: M:GTA.World.GetAllPickupObjects
  id: GetAllPickupObjects
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllPickupObjects()
  nameWithType: World.GetAllPickupObjects()
  fullName: GTA.World.GetAllPickupObjects()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop[] GetAllPickupObjects()
    return:
      type: GTA.Prop[]
    content.vb: Public Shared Function GetAllPickupObjects() As Prop()
  overload: GTA.World.GetAllPickupObjects*
- uid: GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3,System.Single)
  id: GetNearbyPickupObjects(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyPickupObjects(Vector3, float)
  nameWithType: World.GetNearbyPickupObjects(Vector3, float)
  fullName: GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop[] GetNearbyPickupObjects(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Prop[]
    content.vb: Public Shared Function GetNearbyPickupObjects(position As Vector3, radius As Single) As Prop()
  overload: GTA.World.GetNearbyPickupObjects*
  nameWithType.vb: World.GetNearbyPickupObjects(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3, Single)
  name.vb: GetNearbyPickupObjects(Vector3, Single)
- uid: GTA.World.GetClosestProjectile(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestProjectile(GTA.Math.Vector3,System.Single)
  id: GetClosestProjectile(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestProjectile(Vector3, float)
  nameWithType: World.GetClosestProjectile(Vector3, float)
  fullName: GTA.World.GetClosestProjectile(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Projectile GetClosestProjectile(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Projectile
    content.vb: Public Shared Function GetClosestProjectile(position As Vector3, radius As Single) As Projectile
  overload: GTA.World.GetClosestProjectile*
  nameWithType.vb: World.GetClosestProjectile(Vector3, Single)
  fullName.vb: GTA.World.GetClosestProjectile(GTA.Math.Vector3, Single)
  name.vb: GetClosestProjectile(Vector3, Single)
- uid: GTA.World.GetAllProjectiles
  commentId: M:GTA.World.GetAllProjectiles
  id: GetAllProjectiles
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllProjectiles()
  nameWithType: World.GetAllProjectiles()
  fullName: GTA.World.GetAllProjectiles()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Projectile[] GetAllProjectiles()
    return:
      type: GTA.Projectile[]
    content.vb: Public Shared Function GetAllProjectiles() As Projectile()
  overload: GTA.World.GetAllProjectiles*
- uid: GTA.World.GetNearbyProjectiles(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyProjectiles(GTA.Math.Vector3,System.Single)
  id: GetNearbyProjectiles(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyProjectiles(Vector3, float)
  nameWithType: World.GetNearbyProjectiles(Vector3, float)
  fullName: GTA.World.GetNearbyProjectiles(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Projectile[] GetNearbyProjectiles(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Projectile[]
    content.vb: Public Shared Function GetNearbyProjectiles(position As Vector3, radius As Single) As Projectile()
  overload: GTA.World.GetNearbyProjectiles*
  nameWithType.vb: World.GetNearbyProjectiles(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyProjectiles(GTA.Math.Vector3, Single)
  name.vb: GetNearbyProjectiles(Vector3, Single)
- uid: GTA.World.GetClosestRocketProjectile(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestRocketProjectile(GTA.Math.Vector3,System.Single)
  id: GetClosestRocketProjectile(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestRocketProjectile(Vector3, float)
  nameWithType: World.GetClosestRocketProjectile(Vector3, float)
  fullName: GTA.World.GetClosestRocketProjectile(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ProjectileRocket GetClosestRocketProjectile(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.ProjectileRocket
    content.vb: Public Shared Function GetClosestRocketProjectile(position As Vector3, radius As Single) As ProjectileRocket
  overload: GTA.World.GetClosestRocketProjectile*
  nameWithType.vb: World.GetClosestRocketProjectile(Vector3, Single)
  fullName.vb: GTA.World.GetClosestRocketProjectile(GTA.Math.Vector3, Single)
  name.vb: GetClosestRocketProjectile(Vector3, Single)
- uid: GTA.World.GetAllRocketProjectiles
  commentId: M:GTA.World.GetAllRocketProjectiles
  id: GetAllRocketProjectiles
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllRocketProjectiles()
  nameWithType: World.GetAllRocketProjectiles()
  fullName: GTA.World.GetAllRocketProjectiles()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ProjectileRocket[] GetAllRocketProjectiles()
    return:
      type: GTA.ProjectileRocket[]
    content.vb: Public Shared Function GetAllRocketProjectiles() As ProjectileRocket()
  overload: GTA.World.GetAllRocketProjectiles*
- uid: GTA.World.GetNearbyRocketProjectiles(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyRocketProjectiles(GTA.Math.Vector3,System.Single)
  id: GetNearbyRocketProjectiles(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyRocketProjectiles(Vector3, float)
  nameWithType: World.GetNearbyRocketProjectiles(Vector3, float)
  fullName: GTA.World.GetNearbyRocketProjectiles(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ProjectileRocket[] GetNearbyRocketProjectiles(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.ProjectileRocket[]
    content.vb: Public Shared Function GetNearbyRocketProjectiles(position As Vector3, radius As Single) As ProjectileRocket()
  overload: GTA.World.GetNearbyRocketProjectiles*
  nameWithType.vb: World.GetNearbyRocketProjectiles(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyRocketProjectiles(GTA.Math.Vector3, Single)
  name.vb: GetNearbyRocketProjectiles(Vector3, Single)
- uid: GTA.World.GetClosestThrownProjectile(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestThrownProjectile(GTA.Math.Vector3,System.Single)
  id: GetClosestThrownProjectile(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestThrownProjectile(Vector3, float)
  nameWithType: World.GetClosestThrownProjectile(Vector3, float)
  fullName: GTA.World.GetClosestThrownProjectile(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ProjectileThrown GetClosestThrownProjectile(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.ProjectileThrown
    content.vb: Public Shared Function GetClosestThrownProjectile(position As Vector3, radius As Single) As ProjectileThrown
  overload: GTA.World.GetClosestThrownProjectile*
  nameWithType.vb: World.GetClosestThrownProjectile(Vector3, Single)
  fullName.vb: GTA.World.GetClosestThrownProjectile(GTA.Math.Vector3, Single)
  name.vb: GetClosestThrownProjectile(Vector3, Single)
- uid: GTA.World.GetAllThrownProjectiles
  commentId: M:GTA.World.GetAllThrownProjectiles
  id: GetAllThrownProjectiles
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllThrownProjectiles()
  nameWithType: World.GetAllThrownProjectiles()
  fullName: GTA.World.GetAllThrownProjectiles()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ProjectileThrown[] GetAllThrownProjectiles()
    return:
      type: GTA.ProjectileThrown[]
    content.vb: Public Shared Function GetAllThrownProjectiles() As ProjectileThrown()
  overload: GTA.World.GetAllThrownProjectiles*
- uid: GTA.World.GetNearbyThrownProjectiles(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyThrownProjectiles(GTA.Math.Vector3,System.Single)
  id: GetNearbyThrownProjectiles(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyThrownProjectiles(Vector3, float)
  nameWithType: World.GetNearbyThrownProjectiles(Vector3, float)
  fullName: GTA.World.GetNearbyThrownProjectiles(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ProjectileThrown[] GetNearbyThrownProjectiles(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.ProjectileThrown[]
    content.vb: Public Shared Function GetNearbyThrownProjectiles(position As Vector3, radius As Single) As ProjectileThrown()
  overload: GTA.World.GetNearbyThrownProjectiles*
  nameWithType.vb: World.GetNearbyThrownProjectiles(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyThrownProjectiles(GTA.Math.Vector3, Single)
  name.vb: GetNearbyThrownProjectiles(Vector3, Single)
- uid: GTA.World.GetAllEntities
  commentId: M:GTA.World.GetAllEntities
  id: GetAllEntities
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllEntities()
  nameWithType: World.GetAllEntities()
  fullName: GTA.World.GetAllEntities()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Entity[] GetAllEntities()
    return:
      type: GTA.Entity[]
    content.vb: Public Shared Function GetAllEntities() As Entity()
  overload: GTA.World.GetAllEntities*
- uid: GTA.World.GetNearbyEntities(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyEntities(GTA.Math.Vector3,System.Single)
  id: GetNearbyEntities(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyEntities(Vector3, float)
  nameWithType: World.GetNearbyEntities(Vector3, float)
  fullName: GTA.World.GetNearbyEntities(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Entity[] GetNearbyEntities(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Entity[]
    content.vb: Public Shared Function GetNearbyEntities(position As Vector3, radius As Single) As Entity()
  overload: GTA.World.GetNearbyEntities*
  nameWithType.vb: World.GetNearbyEntities(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyEntities(GTA.Math.Vector3, Single)
  name.vb: GetNearbyEntities(Vector3, Single)
- uid: GTA.World.GetAllBuildings
  commentId: M:GTA.World.GetAllBuildings
  id: GetAllBuildings
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllBuildings()
  nameWithType: World.GetAllBuildings()
  fullName: GTA.World.GetAllBuildings()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Building[] GetAllBuildings()
    return:
      type: GTA.Building[]
    content.vb: Public Shared Function GetAllBuildings() As Building()
  overload: GTA.World.GetAllBuildings*
- uid: GTA.World.GetNearbyBuildings(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyBuildings(GTA.Math.Vector3,System.Single)
  id: GetNearbyBuildings(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyBuildings(Vector3, float)
  nameWithType: World.GetNearbyBuildings(Vector3, float)
  fullName: GTA.World.GetNearbyBuildings(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Building[] GetNearbyBuildings(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Building[]
    content.vb: Public Shared Function GetNearbyBuildings(position As Vector3, radius As Single) As Building()
  overload: GTA.World.GetNearbyBuildings*
  nameWithType.vb: World.GetNearbyBuildings(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyBuildings(GTA.Math.Vector3, Single)
  name.vb: GetNearbyBuildings(Vector3, Single)
- uid: GTA.World.GetClosestBuilding(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestBuilding(GTA.Math.Vector3,System.Single)
  id: GetClosestBuilding(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestBuilding(Vector3, float)
  nameWithType: World.GetClosestBuilding(Vector3, float)
  fullName: GTA.World.GetClosestBuilding(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Building GetClosestBuilding(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.Building
    content.vb: Public Shared Function GetClosestBuilding(position As Vector3, radius As Single) As Building
  overload: GTA.World.GetClosestBuilding*
  nameWithType.vb: World.GetClosestBuilding(Vector3, Single)
  fullName.vb: GTA.World.GetClosestBuilding(GTA.Math.Vector3, Single)
  name.vb: GetClosestBuilding(Vector3, Single)
- uid: GTA.World.GetAllAnimatedBuildings
  commentId: M:GTA.World.GetAllAnimatedBuildings
  id: GetAllAnimatedBuildings
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllAnimatedBuildings()
  nameWithType: World.GetAllAnimatedBuildings()
  fullName: GTA.World.GetAllAnimatedBuildings()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static AnimatedBuilding[] GetAllAnimatedBuildings()
    return:
      type: GTA.AnimatedBuilding[]
    content.vb: Public Shared Function GetAllAnimatedBuildings() As AnimatedBuilding()
  overload: GTA.World.GetAllAnimatedBuildings*
- uid: GTA.World.GetNearbyAnimatedBuildings(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyAnimatedBuildings(GTA.Math.Vector3,System.Single)
  id: GetNearbyAnimatedBuildings(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyAnimatedBuildings(Vector3, float)
  nameWithType: World.GetNearbyAnimatedBuildings(Vector3, float)
  fullName: GTA.World.GetNearbyAnimatedBuildings(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static AnimatedBuilding[] GetNearbyAnimatedBuildings(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.AnimatedBuilding[]
    content.vb: Public Shared Function GetNearbyAnimatedBuildings(position As Vector3, radius As Single) As AnimatedBuilding()
  overload: GTA.World.GetNearbyAnimatedBuildings*
  nameWithType.vb: World.GetNearbyAnimatedBuildings(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyAnimatedBuildings(GTA.Math.Vector3, Single)
  name.vb: GetNearbyAnimatedBuildings(Vector3, Single)
- uid: GTA.World.GetClosestAnimatedBuilding(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestAnimatedBuilding(GTA.Math.Vector3,System.Single)
  id: GetClosestAnimatedBuilding(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestAnimatedBuilding(Vector3, float)
  nameWithType: World.GetClosestAnimatedBuilding(Vector3, float)
  fullName: GTA.World.GetClosestAnimatedBuilding(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static AnimatedBuilding GetClosestAnimatedBuilding(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.AnimatedBuilding
    content.vb: Public Shared Function GetClosestAnimatedBuilding(position As Vector3, radius As Single) As AnimatedBuilding
  overload: GTA.World.GetClosestAnimatedBuilding*
  nameWithType.vb: World.GetClosestAnimatedBuilding(Vector3, Single)
  fullName.vb: GTA.World.GetClosestAnimatedBuilding(GTA.Math.Vector3, Single)
  name.vb: GetClosestAnimatedBuilding(Vector3, Single)
- uid: GTA.World.GetAllInteriorInstances
  commentId: M:GTA.World.GetAllInteriorInstances
  id: GetAllInteriorInstances
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllInteriorInstances()
  nameWithType: World.GetAllInteriorInstances()
  fullName: GTA.World.GetAllInteriorInstances()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorInstance[] GetAllInteriorInstances()
    return:
      type: GTA.InteriorInstance[]
    content.vb: Public Shared Function GetAllInteriorInstances() As InteriorInstance()
  overload: GTA.World.GetAllInteriorInstances*
- uid: GTA.World.GetNearbyInteriorInstances(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyInteriorInstances(GTA.Math.Vector3,System.Single)
  id: GetNearbyInteriorInstances(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyInteriorInstances(Vector3, float)
  nameWithType: World.GetNearbyInteriorInstances(Vector3, float)
  fullName: GTA.World.GetNearbyInteriorInstances(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorInstance[] GetNearbyInteriorInstances(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.InteriorInstance[]
    content.vb: Public Shared Function GetNearbyInteriorInstances(position As Vector3, radius As Single) As InteriorInstance()
  overload: GTA.World.GetNearbyInteriorInstances*
  nameWithType.vb: World.GetNearbyInteriorInstances(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyInteriorInstances(GTA.Math.Vector3, Single)
  name.vb: GetNearbyInteriorInstances(Vector3, Single)
- uid: GTA.World.GetClosestInteriorInstance(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestInteriorInstance(GTA.Math.Vector3,System.Single)
  id: GetClosestInteriorInstance(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestInteriorInstance(Vector3, float)
  nameWithType: World.GetClosestInteriorInstance(Vector3, float)
  fullName: GTA.World.GetClosestInteriorInstance(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorInstance GetClosestInteriorInstance(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.InteriorInstance
    content.vb: Public Shared Function GetClosestInteriorInstance(position As Vector3, radius As Single) As InteriorInstance
  overload: GTA.World.GetClosestInteriorInstance*
  nameWithType.vb: World.GetClosestInteriorInstance(Vector3, Single)
  fullName.vb: GTA.World.GetClosestInteriorInstance(GTA.Math.Vector3, Single)
  name.vb: GetClosestInteriorInstance(Vector3, Single)
- uid: GTA.World.GetAllInteriorProxies
  commentId: M:GTA.World.GetAllInteriorProxies
  id: GetAllInteriorProxies
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllInteriorProxies()
  nameWithType: World.GetAllInteriorProxies()
  fullName: GTA.World.GetAllInteriorProxies()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorProxy[] GetAllInteriorProxies()
    return:
      type: GTA.InteriorProxy[]
    content.vb: Public Shared Function GetAllInteriorProxies() As InteriorProxy()
  overload: GTA.World.GetAllInteriorProxies*
- uid: GTA.World.GetNearbyInteriorProxies(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetNearbyInteriorProxies(GTA.Math.Vector3,System.Single)
  id: GetNearbyInteriorProxies(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNearbyInteriorProxies(Vector3, float)
  nameWithType: World.GetNearbyInteriorProxies(Vector3, float)
  fullName: GTA.World.GetNearbyInteriorProxies(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorProxy[] GetNearbyInteriorProxies(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.InteriorProxy[]
    content.vb: Public Shared Function GetNearbyInteriorProxies(position As Vector3, radius As Single) As InteriorProxy()
  overload: GTA.World.GetNearbyInteriorProxies*
  nameWithType.vb: World.GetNearbyInteriorProxies(Vector3, Single)
  fullName.vb: GTA.World.GetNearbyInteriorProxies(GTA.Math.Vector3, Single)
  name.vb: GetNearbyInteriorProxies(Vector3, Single)
- uid: GTA.World.GetClosestInteriorProxy(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.GetClosestInteriorProxy(GTA.Math.Vector3,System.Single)
  id: GetClosestInteriorProxy(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosestInteriorProxy(Vector3, float)
  nameWithType: World.GetClosestInteriorProxy(Vector3, float)
  fullName: GTA.World.GetClosestInteriorProxy(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorProxy GetClosestInteriorProxy(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    return:
      type: GTA.InteriorProxy
    content.vb: Public Shared Function GetClosestInteriorProxy(position As Vector3, radius As Single) As InteriorProxy
  overload: GTA.World.GetClosestInteriorProxy*
  nameWithType.vb: World.GetClosestInteriorProxy(Vector3, Single)
  fullName.vb: GTA.World.GetClosestInteriorProxy(GTA.Math.Vector3, Single)
  name.vb: GetClosestInteriorProxy(Vector3, Single)
- uid: GTA.World.GetClosest``1(GTA.Math.Vector3,``0[])
  commentId: M:GTA.World.GetClosest``1(GTA.Math.Vector3,``0[])
  id: GetClosest``1(GTA.Math.Vector3,``0[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest<T>(Vector3, params T[])
  nameWithType: World.GetClosest<T>(Vector3, params T[])
  fullName: GTA.World.GetClosest<T>(GTA.Math.Vector3, params T[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: 'public static T GetClosest<T>(Vector3 position, params T[] spatials) where T : ISpatial'
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: spatials
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function GetClosest(Of T As ISpatial)(position As Vector3, ParamArray spatials As T()) As T
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Of T)(Vector3, ParamArray T())
  fullName.vb: GTA.World.GetClosest(Of T)(GTA.Math.Vector3, ParamArray T())
  name.vb: GetClosest(Of T)(Vector3, ParamArray T())
- uid: GTA.World.GetClosest``1(GTA.Math.Vector2,``0[])
  commentId: M:GTA.World.GetClosest``1(GTA.Math.Vector2,``0[])
  id: GetClosest``1(GTA.Math.Vector2,``0[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest<T>(Vector2, params T[])
  nameWithType: World.GetClosest<T>(Vector2, params T[])
  fullName: GTA.World.GetClosest<T>(GTA.Math.Vector2, params T[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: 'public static T GetClosest<T>(Vector2 position, params T[] spatials) where T : ISpatial'
    parameters:
    - id: position
      type: GTA.Math.Vector2
    - id: spatials
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function GetClosest(Of T As ISpatial)(position As Vector2, ParamArray spatials As T()) As T
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Of T)(Vector2, ParamArray T())
  fullName.vb: GTA.World.GetClosest(Of T)(GTA.Math.Vector2, ParamArray T())
  name.vb: GetClosest(Of T)(Vector2, ParamArray T())
- uid: GTA.World.GetClosest(GTA.Math.Vector3,GTA.Building[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.Building[])
  id: GetClosest(GTA.Math.Vector3,GTA.Building[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector3, params Building[])
  nameWithType: World.GetClosest(Vector3, params Building[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector3, params GTA.Building[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Building GetClosest(Vector3 position, params Building[] buildings)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: buildings
      type: GTA.Building[]
    return:
      type: GTA.Building
    content.vb: Public Shared Function GetClosest(position As Vector3, ParamArray buildings As Building()) As Building
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector3, ParamArray Building())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector3, ParamArray GTA.Building())
  name.vb: GetClosest(Vector3, ParamArray Building())
- uid: GTA.World.GetClosest(GTA.Math.Vector2,GTA.Building[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.Building[])
  id: GetClosest(GTA.Math.Vector2,GTA.Building[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector2, params Building[])
  nameWithType: World.GetClosest(Vector2, params Building[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector2, params GTA.Building[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Building GetClosest(Vector2 position, params Building[] buildings)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    - id: buildings
      type: GTA.Building[]
    return:
      type: GTA.Building
    content.vb: Public Shared Function GetClosest(position As Vector2, ParamArray buildings As Building()) As Building
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector2, ParamArray Building())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector2, ParamArray GTA.Building())
  name.vb: GetClosest(Vector2, ParamArray Building())
- uid: GTA.World.GetClosest(GTA.Math.Vector3,GTA.AnimatedBuilding[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.AnimatedBuilding[])
  id: GetClosest(GTA.Math.Vector3,GTA.AnimatedBuilding[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector3, params AnimatedBuilding[])
  nameWithType: World.GetClosest(Vector3, params AnimatedBuilding[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector3, params GTA.AnimatedBuilding[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static AnimatedBuilding GetClosest(Vector3 position, params AnimatedBuilding[] animatedBuildings)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: animatedBuildings
      type: GTA.AnimatedBuilding[]
    return:
      type: GTA.AnimatedBuilding
    content.vb: Public Shared Function GetClosest(position As Vector3, ParamArray animatedBuildings As AnimatedBuilding()) As AnimatedBuilding
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector3, ParamArray AnimatedBuilding())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector3, ParamArray GTA.AnimatedBuilding())
  name.vb: GetClosest(Vector3, ParamArray AnimatedBuilding())
- uid: GTA.World.GetClosest(GTA.Math.Vector2,GTA.AnimatedBuilding[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.AnimatedBuilding[])
  id: GetClosest(GTA.Math.Vector2,GTA.AnimatedBuilding[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector2, params AnimatedBuilding[])
  nameWithType: World.GetClosest(Vector2, params AnimatedBuilding[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector2, params GTA.AnimatedBuilding[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static AnimatedBuilding GetClosest(Vector2 position, params AnimatedBuilding[] animatedBuildings)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    - id: animatedBuildings
      type: GTA.AnimatedBuilding[]
    return:
      type: GTA.AnimatedBuilding
    content.vb: Public Shared Function GetClosest(position As Vector2, ParamArray animatedBuildings As AnimatedBuilding()) As AnimatedBuilding
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector2, ParamArray AnimatedBuilding())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector2, ParamArray GTA.AnimatedBuilding())
  name.vb: GetClosest(Vector2, ParamArray AnimatedBuilding())
- uid: GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorInstance[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorInstance[])
  id: GetClosest(GTA.Math.Vector3,GTA.InteriorInstance[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector3, params InteriorInstance[])
  nameWithType: World.GetClosest(Vector3, params InteriorInstance[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector3, params GTA.InteriorInstance[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorInstance GetClosest(Vector3 position, params InteriorInstance[] interiorInstances)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: interiorInstances
      type: GTA.InteriorInstance[]
    return:
      type: GTA.InteriorInstance
    content.vb: Public Shared Function GetClosest(position As Vector3, ParamArray interiorInstances As InteriorInstance()) As InteriorInstance
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector3, ParamArray InteriorInstance())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector3, ParamArray GTA.InteriorInstance())
  name.vb: GetClosest(Vector3, ParamArray InteriorInstance())
- uid: GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorInstance[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorInstance[])
  id: GetClosest(GTA.Math.Vector2,GTA.InteriorInstance[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector2, params InteriorInstance[])
  nameWithType: World.GetClosest(Vector2, params InteriorInstance[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector2, params GTA.InteriorInstance[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorInstance GetClosest(Vector2 position, params InteriorInstance[] interiorInstances)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    - id: interiorInstances
      type: GTA.InteriorInstance[]
    return:
      type: GTA.InteriorInstance
    content.vb: Public Shared Function GetClosest(position As Vector2, ParamArray interiorInstances As InteriorInstance()) As InteriorInstance
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector2, ParamArray InteriorInstance())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector2, ParamArray GTA.InteriorInstance())
  name.vb: GetClosest(Vector2, ParamArray InteriorInstance())
- uid: GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorProxy[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorProxy[])
  id: GetClosest(GTA.Math.Vector3,GTA.InteriorProxy[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector3, params InteriorProxy[])
  nameWithType: World.GetClosest(Vector3, params InteriorProxy[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector3, params GTA.InteriorProxy[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorProxy GetClosest(Vector3 position, params InteriorProxy[] interiorProxies)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: interiorProxies
      type: GTA.InteriorProxy[]
    return:
      type: GTA.InteriorProxy
    content.vb: Public Shared Function GetClosest(position As Vector3, ParamArray interiorProxies As InteriorProxy()) As InteriorProxy
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector3, ParamArray InteriorProxy())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector3, ParamArray GTA.InteriorProxy())
  name.vb: GetClosest(Vector3, ParamArray InteriorProxy())
- uid: GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorProxy[])
  commentId: M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorProxy[])
  id: GetClosest(GTA.Math.Vector2,GTA.InteriorProxy[])
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetClosest(Vector2, params InteriorProxy[])
  nameWithType: World.GetClosest(Vector2, params InteriorProxy[])
  fullName: GTA.World.GetClosest(GTA.Math.Vector2, params GTA.InteriorProxy[])
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static InteriorProxy GetClosest(Vector2 position, params InteriorProxy[] interiorProxies)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    - id: interiorProxies
      type: GTA.InteriorProxy[]
    return:
      type: GTA.InteriorProxy
    content.vb: Public Shared Function GetClosest(position As Vector2, ParamArray interiorProxies As InteriorProxy()) As InteriorProxy
  overload: GTA.World.GetClosest*
  nameWithType.vb: World.GetClosest(Vector2, ParamArray InteriorProxy())
  fullName.vb: GTA.World.GetClosest(GTA.Math.Vector2, ParamArray GTA.InteriorProxy())
  name.vb: GetClosest(Vector2, ParamArray InteriorProxy())
- uid: GTA.World.SetAmbientVehicleDensityMultiplierThisFrame(System.Single)
  commentId: M:GTA.World.SetAmbientVehicleDensityMultiplierThisFrame(System.Single)
  id: SetAmbientVehicleDensityMultiplierThisFrame(System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: SetAmbientVehicleDensityMultiplierThisFrame(float)
  nameWithType: World.SetAmbientVehicleDensityMultiplierThisFrame(float)
  fullName: GTA.World.SetAmbientVehicleDensityMultiplierThisFrame(float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void SetAmbientVehicleDensityMultiplierThisFrame(float densityMult)
    parameters:
    - id: densityMult
      type: System.Single
    content.vb: Public Shared Sub SetAmbientVehicleDensityMultiplierThisFrame(densityMult As Single)
  overload: GTA.World.SetAmbientVehicleDensityMultiplierThisFrame*
  nameWithType.vb: World.SetAmbientVehicleDensityMultiplierThisFrame(Single)
  fullName.vb: GTA.World.SetAmbientVehicleDensityMultiplierThisFrame(Single)
  name.vb: SetAmbientVehicleDensityMultiplierThisFrame(Single)
- uid: GTA.World.SetAmbientPedDensityMultiplierThisFrame(System.Single)
  commentId: M:GTA.World.SetAmbientPedDensityMultiplierThisFrame(System.Single)
  id: SetAmbientPedDensityMultiplierThisFrame(System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: SetAmbientPedDensityMultiplierThisFrame(float)
  nameWithType: World.SetAmbientPedDensityMultiplierThisFrame(float)
  fullName: GTA.World.SetAmbientPedDensityMultiplierThisFrame(float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void SetAmbientPedDensityMultiplierThisFrame(float densityMult)
    parameters:
    - id: densityMult
      type: System.Single
    content.vb: Public Shared Sub SetAmbientPedDensityMultiplierThisFrame(densityMult As Single)
  overload: GTA.World.SetAmbientPedDensityMultiplierThisFrame*
  nameWithType.vb: World.SetAmbientPedDensityMultiplierThisFrame(Single)
  fullName.vb: GTA.World.SetAmbientPedDensityMultiplierThisFrame(Single)
  name.vb: SetAmbientPedDensityMultiplierThisFrame(Single)
- uid: GTA.World.CreatePed(GTA.Model,GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.CreatePed(GTA.Model,GTA.Math.Vector3,System.Single)
  id: CreatePed(GTA.Model,GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreatePed(Model, Vector3, float)
  nameWithType: World.CreatePed(Model, Vector3, float)
  fullName: GTA.World.CreatePed(GTA.Model, GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped CreatePed(Model model, Vector3 position, float heading = 0)
    parameters:
    - id: model
      type: GTA.Model
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    return:
      type: GTA.Ped
    content.vb: Public Shared Function CreatePed(model As Model, position As Vector3, heading As Single = 0) As Ped
  overload: GTA.World.CreatePed*
  nameWithType.vb: World.CreatePed(Model, Vector3, Single)
  fullName.vb: GTA.World.CreatePed(GTA.Model, GTA.Math.Vector3, Single)
  name.vb: CreatePed(Model, Vector3, Single)
- uid: GTA.World.CreateRandomPed(GTA.Math.Vector3)
  commentId: M:GTA.World.CreateRandomPed(GTA.Math.Vector3)
  id: CreateRandomPed(GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateRandomPed(Vector3)
  nameWithType: World.CreateRandomPed(Vector3)
  fullName: GTA.World.CreateRandomPed(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped CreateRandomPed(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    return:
      type: GTA.Ped
    content.vb: Public Shared Function CreateRandomPed(position As Vector3) As Ped
  overload: GTA.World.CreateRandomPed*
- uid: GTA.World.CreateRandomPed(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  commentId: M:GTA.World.CreateRandomPed(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  id: CreateRandomPed(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateRandomPed(Vector3, float, Func<Model, bool>)
  nameWithType: World.CreateRandomPed(Vector3, float, Func<Model, bool>)
  fullName: GTA.World.CreateRandomPed(GTA.Math.Vector3, float, System.Func<GTA.Model, bool>)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Ped CreateRandomPed(Vector3 position, float heading, Func<Model, bool> predicate = null)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    - id: predicate
      type: System.Func{GTA.Model,System.Boolean}
    return:
      type: GTA.Ped
    content.vb: Public Shared Function CreateRandomPed(position As Vector3, heading As Single, predicate As Func(Of Model, Boolean) = Nothing) As Ped
  overload: GTA.World.CreateRandomPed*
  nameWithType.vb: World.CreateRandomPed(Vector3, Single, Func(Of Model, Boolean))
  fullName.vb: GTA.World.CreateRandomPed(GTA.Math.Vector3, Single, System.Func(Of GTA.Model, Boolean))
  name.vb: CreateRandomPed(Vector3, Single, Func(Of Model, Boolean))
- uid: GTA.World.CreateVehicle(GTA.Model,GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.CreateVehicle(GTA.Model,GTA.Math.Vector3,System.Single)
  id: CreateVehicle(GTA.Model,GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateVehicle(Model, Vector3, float)
  nameWithType: World.CreateVehicle(Model, Vector3, float)
  fullName: GTA.World.CreateVehicle(GTA.Model, GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vehicle CreateVehicle(Model model, Vector3 position, float heading = 0)
    parameters:
    - id: model
      type: GTA.Model
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    return:
      type: GTA.Vehicle
    content.vb: Public Shared Function CreateVehicle(model As Model, position As Vector3, heading As Single = 0) As Vehicle
  overload: GTA.World.CreateVehicle*
  nameWithType.vb: World.CreateVehicle(Model, Vector3, Single)
  fullName.vb: GTA.World.CreateVehicle(GTA.Model, GTA.Math.Vector3, Single)
  name.vb: CreateVehicle(Model, Vector3, Single)
- uid: GTA.World.CreateRandomVehicle(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  commentId: M:GTA.World.CreateRandomVehicle(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  id: CreateRandomVehicle(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateRandomVehicle(Vector3, float, Func<Model, bool>)
  nameWithType: World.CreateRandomVehicle(Vector3, float, Func<Model, bool>)
  fullName: GTA.World.CreateRandomVehicle(GTA.Math.Vector3, float, System.Func<GTA.Model, bool>)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vehicle CreateRandomVehicle(Vector3 position, float heading = 0, Func<Model, bool> predicate = null)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: heading
      type: System.Single
    - id: predicate
      type: System.Func{GTA.Model,System.Boolean}
    return:
      type: GTA.Vehicle
    content.vb: Public Shared Function CreateRandomVehicle(position As Vector3, heading As Single = 0, predicate As Func(Of Model, Boolean) = Nothing) As Vehicle
  overload: GTA.World.CreateRandomVehicle*
  nameWithType.vb: World.CreateRandomVehicle(Vector3, Single, Func(Of Model, Boolean))
  fullName.vb: GTA.World.CreateRandomVehicle(GTA.Math.Vector3, Single, System.Func(Of GTA.Model, Boolean))
  name.vb: CreateRandomVehicle(Vector3, Single, Func(Of Model, Boolean))
- uid: GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,System.Boolean,System.Boolean)
  commentId: M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,System.Boolean,System.Boolean)
  id: CreateProp(GTA.Model,GTA.Math.Vector3,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateProp(Model, Vector3, bool, bool)
  nameWithType: World.CreateProp(Model, Vector3, bool, bool)
  fullName: GTA.World.CreateProp(GTA.Model, GTA.Math.Vector3, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop CreateProp(Model model, Vector3 position, bool dynamic, bool placeOnGround)
    parameters:
    - id: model
      type: GTA.Model
    - id: position
      type: GTA.Math.Vector3
    - id: dynamic
      type: System.Boolean
    - id: placeOnGround
      type: System.Boolean
    return:
      type: GTA.Prop
    content.vb: Public Shared Function CreateProp(model As Model, position As Vector3, dynamic As Boolean, placeOnGround As Boolean) As Prop
  overload: GTA.World.CreateProp*
  nameWithType.vb: World.CreateProp(Model, Vector3, Boolean, Boolean)
  fullName.vb: GTA.World.CreateProp(GTA.Model, GTA.Math.Vector3, Boolean, Boolean)
  name.vb: CreateProp(Model, Vector3, Boolean, Boolean)
- uid: GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)
  commentId: M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)
  id: CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateProp(Model, Vector3, Vector3, bool, bool)
  nameWithType: World.CreateProp(Model, Vector3, Vector3, bool, bool)
  fullName: GTA.World.CreateProp(GTA.Model, GTA.Math.Vector3, GTA.Math.Vector3, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop CreateProp(Model model, Vector3 position, Vector3 rotation, bool dynamic, bool placeOnGround)
    parameters:
    - id: model
      type: GTA.Model
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: dynamic
      type: System.Boolean
    - id: placeOnGround
      type: System.Boolean
    return:
      type: GTA.Prop
    content.vb: Public Shared Function CreateProp(model As Model, position As Vector3, rotation As Vector3, dynamic As Boolean, placeOnGround As Boolean) As Prop
  overload: GTA.World.CreateProp*
  nameWithType.vb: World.CreateProp(Model, Vector3, Vector3, Boolean, Boolean)
  fullName.vb: GTA.World.CreateProp(GTA.Model, GTA.Math.Vector3, GTA.Math.Vector3, Boolean, Boolean)
  name.vb: CreateProp(Model, Vector3, Vector3, Boolean, Boolean)
- uid: GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,System.Boolean)
  commentId: M:GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,System.Boolean)
  id: CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreatePropNoOffset(Model, Vector3, bool)
  nameWithType: World.CreatePropNoOffset(Model, Vector3, bool)
  fullName: GTA.World.CreatePropNoOffset(GTA.Model, GTA.Math.Vector3, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop CreatePropNoOffset(Model model, Vector3 position, bool dynamic)
    parameters:
    - id: model
      type: GTA.Model
    - id: position
      type: GTA.Math.Vector3
    - id: dynamic
      type: System.Boolean
    return:
      type: GTA.Prop
    content.vb: Public Shared Function CreatePropNoOffset(model As Model, position As Vector3, dynamic As Boolean) As Prop
  overload: GTA.World.CreatePropNoOffset*
  nameWithType.vb: World.CreatePropNoOffset(Model, Vector3, Boolean)
  fullName.vb: GTA.World.CreatePropNoOffset(GTA.Model, GTA.Math.Vector3, Boolean)
  name.vb: CreatePropNoOffset(Model, Vector3, Boolean)
- uid: GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)
  commentId: M:GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)
  id: CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreatePropNoOffset(Model, Vector3, Vector3, bool)
  nameWithType: World.CreatePropNoOffset(Model, Vector3, Vector3, bool)
  fullName: GTA.World.CreatePropNoOffset(GTA.Model, GTA.Math.Vector3, GTA.Math.Vector3, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop CreatePropNoOffset(Model model, Vector3 position, Vector3 rotation, bool dynamic)
    parameters:
    - id: model
      type: GTA.Model
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: dynamic
      type: System.Boolean
    return:
      type: GTA.Prop
    content.vb: Public Shared Function CreatePropNoOffset(model As Model, position As Vector3, rotation As Vector3, dynamic As Boolean) As Prop
  overload: GTA.World.CreatePropNoOffset*
  nameWithType.vb: World.CreatePropNoOffset(Model, Vector3, Vector3, Boolean)
  fullName.vb: GTA.World.CreatePropNoOffset(GTA.Model, GTA.Math.Vector3, GTA.Math.Vector3, Boolean)
  name.vb: CreatePropNoOffset(Model, Vector3, Vector3, Boolean)
- uid: GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)
  commentId: M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)
  id: CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, int, Model, bool)
  nameWithType: World.CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, int, Model, bool)
  fullName: GTA.World.CreateAmbientPickup(GTA.PickupType, GTA.Math.Vector3, GTA.PickupPlacementFlags, int, GTA.Model, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Prop CreateAmbientPickup(PickupType type, Vector3 position, PickupPlacementFlags placementFlags = PickupPlacementFlags.None, int amount = -1, Model customModel = default, bool createAsScriptObject = false)
    parameters:
    - id: type
      type: GTA.PickupType
    - id: position
      type: GTA.Math.Vector3
    - id: placementFlags
      type: GTA.PickupPlacementFlags
    - id: amount
      type: System.Int32
    - id: customModel
      type: GTA.Model
    - id: createAsScriptObject
      type: System.Boolean
    return:
      type: GTA.Prop
    content.vb: Public Shared Function CreateAmbientPickup(type As PickupType, position As Vector3, placementFlags As PickupPlacementFlags = PickupPlacementFlags.None, amount As Integer = -1, customModel As Model = Nothing, createAsScriptObject As Boolean = False) As Prop
  overload: GTA.World.CreateAmbientPickup*
  nameWithType.vb: World.CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, Integer, Model, Boolean)
  fullName.vb: GTA.World.CreateAmbientPickup(GTA.PickupType, GTA.Math.Vector3, GTA.PickupPlacementFlags, Integer, GTA.Model, Boolean)
  name.vb: CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, Integer, Model, Boolean)
- uid: GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)
  commentId: M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)
  id: CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateAmbientPickup(PickupType, Vector3, Model, int)
  nameWithType: World.CreateAmbientPickup(PickupType, Vector3, Model, int)
  fullName: GTA.World.CreateAmbientPickup(GTA.PickupType, GTA.Math.Vector3, GTA.Model, int)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("The World.CreateAmbientPickup overload with non-optional custom model and amount (named \"value\") parameters are obsolete since they can lead to confusion in custom model parameter (which is actually not mandatory).Use World.CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, int, Model, bool) instead.")]

      public static Prop CreateAmbientPickup(PickupType type, Vector3 position, Model model, int value)
    parameters:
    - id: type
      type: GTA.PickupType
    - id: position
      type: GTA.Math.Vector3
    - id: model
      type: GTA.Model
    - id: value
      type: System.Int32
    return:
      type: GTA.Prop
    content.vb: >-
      <Obsolete("The World.CreateAmbientPickup overload with non-optional custom model and amount (named ""value"") parameters are obsolete since they can lead to confusion in custom model parameter (which is actually not mandatory).Use World.CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, int, Model, bool) instead.")>

      Public Shared Function CreateAmbientPickup(type As PickupType, position As Vector3, model As Model, value As Integer) As Prop
  overload: GTA.World.CreateAmbientPickup*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The World.CreateAmbientPickup overload with non-optional custom model and amount (named "value") parameters are obsolete since they can lead to confusion in custom model parameter (which is actually not mandatory).Use World.CreateAmbientPickup(PickupType, Vector3, PickupPlacementFlags, int, Model, bool) instead.
  nameWithType.vb: World.CreateAmbientPickup(PickupType, Vector3, Model, Integer)
  fullName.vb: GTA.World.CreateAmbientPickup(GTA.PickupType, GTA.Math.Vector3, GTA.Model, Integer)
  name.vb: CreateAmbientPickup(PickupType, Vector3, Model, Integer)
- uid: GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model)
  commentId: M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model)
  id: CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreatePickup(PickupType, Vector3, PickupPlacementFlags, int, Model)
  nameWithType: World.CreatePickup(PickupType, Vector3, PickupPlacementFlags, int, Model)
  fullName: GTA.World.CreatePickup(GTA.PickupType, GTA.Math.Vector3, GTA.PickupPlacementFlags, int, GTA.Model)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Pickup CreatePickup(PickupType type, Vector3 position, PickupPlacementFlags placementFlags = PickupPlacementFlags.None, int amount = -1, Model customModel = default)
    parameters:
    - id: type
      type: GTA.PickupType
    - id: position
      type: GTA.Math.Vector3
    - id: placementFlags
      type: GTA.PickupPlacementFlags
    - id: amount
      type: System.Int32
    - id: customModel
      type: GTA.Model
    return:
      type: GTA.Pickup
    content.vb: Public Shared Function CreatePickup(type As PickupType, position As Vector3, placementFlags As PickupPlacementFlags = PickupPlacementFlags.None, amount As Integer = -1, customModel As Model = Nothing) As Pickup
  overload: GTA.World.CreatePickup*
  nameWithType.vb: World.CreatePickup(PickupType, Vector3, PickupPlacementFlags, Integer, Model)
  fullName.vb: GTA.World.CreatePickup(GTA.PickupType, GTA.Math.Vector3, GTA.PickupPlacementFlags, Integer, GTA.Model)
  name.vb: CreatePickup(PickupType, Vector3, PickupPlacementFlags, Integer, Model)
- uid: GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.EulerRotationOrder,GTA.Model)
  commentId: M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.EulerRotationOrder,GTA.Model)
  id: CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.EulerRotationOrder,GTA.Model)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreatePickup(PickupType, Vector3, Vector3, PickupPlacementFlags, int, EulerRotationOrder, Model)
  nameWithType: World.CreatePickup(PickupType, Vector3, Vector3, PickupPlacementFlags, int, EulerRotationOrder, Model)
  fullName: GTA.World.CreatePickup(GTA.PickupType, GTA.Math.Vector3, GTA.Math.Vector3, GTA.PickupPlacementFlags, int, GTA.EulerRotationOrder, GTA.Model)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Pickup CreatePickup(PickupType type, Vector3 position, Vector3 rotation, PickupPlacementFlags placementFlags = PickupPlacementFlags.None, int amount = -1, EulerRotationOrder rotOrder = EulerRotationOrder.YXZ, Model customModel = default)
    parameters:
    - id: type
      type: GTA.PickupType
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: placementFlags
      type: GTA.PickupPlacementFlags
    - id: amount
      type: System.Int32
    - id: rotOrder
      type: GTA.EulerRotationOrder
    - id: customModel
      type: GTA.Model
    return:
      type: GTA.Pickup
    content.vb: Public Shared Function CreatePickup(type As PickupType, position As Vector3, rotation As Vector3, placementFlags As PickupPlacementFlags = PickupPlacementFlags.None, amount As Integer = -1, rotOrder As EulerRotationOrder = EulerRotationOrder.YXZ, customModel As Model = Nothing) As Pickup
  overload: GTA.World.CreatePickup*
  nameWithType.vb: World.CreatePickup(PickupType, Vector3, Vector3, PickupPlacementFlags, Integer, EulerRotationOrder, Model)
  fullName.vb: GTA.World.CreatePickup(GTA.PickupType, GTA.Math.Vector3, GTA.Math.Vector3, GTA.PickupPlacementFlags, Integer, GTA.EulerRotationOrder, GTA.Model)
  name.vb: CreatePickup(PickupType, Vector3, Vector3, PickupPlacementFlags, Integer, EulerRotationOrder, Model)
- uid: GTA.World.GetAllCheckpoints
  commentId: M:GTA.World.GetAllCheckpoints
  id: GetAllCheckpoints
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetAllCheckpoints()
  nameWithType: World.GetAllCheckpoints()
  fullName: GTA.World.GetAllCheckpoints()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Checkpoint[] GetAllCheckpoints()
    return:
      type: GTA.Checkpoint[]
    content.vb: Public Shared Function GetAllCheckpoints() As Checkpoint()
  overload: GTA.World.GetAllCheckpoints*
- uid: GTA.World.CreateCheckpoint(GTA.CheckpointIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  commentId: M:GTA.World.CreateCheckpoint(GTA.CheckpointIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  id: CreateCheckpoint(GTA.CheckpointIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateCheckpoint(CheckpointIcon, Vector3, Vector3, float, Color)
  nameWithType: World.CreateCheckpoint(CheckpointIcon, Vector3, Vector3, float, Color)
  fullName: GTA.World.CreateCheckpoint(GTA.CheckpointIcon, GTA.Math.Vector3, GTA.Math.Vector3, float, System.Drawing.Color)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Checkpoint CreateCheckpoint(CheckpointIcon icon, Vector3 position, Vector3 pointTo, float radius, Color color)
    parameters:
    - id: icon
      type: GTA.CheckpointIcon
    - id: position
      type: GTA.Math.Vector3
    - id: pointTo
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: color
      type: System.Drawing.Color
    return:
      type: GTA.Checkpoint
    content.vb: Public Shared Function CreateCheckpoint(icon As CheckpointIcon, position As Vector3, pointTo As Vector3, radius As Single, color As Color) As Checkpoint
  overload: GTA.World.CreateCheckpoint*
  nameWithType.vb: World.CreateCheckpoint(CheckpointIcon, Vector3, Vector3, Single, Color)
  fullName.vb: GTA.World.CreateCheckpoint(GTA.CheckpointIcon, GTA.Math.Vector3, GTA.Math.Vector3, Single, System.Drawing.Color)
  name.vb: CreateCheckpoint(CheckpointIcon, Vector3, Vector3, Single, Color)
- uid: GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  commentId: M:GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  id: CreateCheckpoint(GTA.CheckpointCustomIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateCheckpoint(CheckpointCustomIcon, Vector3, Vector3, float, Color)
  nameWithType: World.CreateCheckpoint(CheckpointCustomIcon, Vector3, Vector3, float, Color)
  fullName: GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon, GTA.Math.Vector3, GTA.Math.Vector3, float, System.Drawing.Color)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Checkpoint CreateCheckpoint(CheckpointCustomIcon icon, Vector3 position, Vector3 pointTo, float radius, Color color)
    parameters:
    - id: icon
      type: GTA.CheckpointCustomIcon
    - id: position
      type: GTA.Math.Vector3
    - id: pointTo
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: color
      type: System.Drawing.Color
    return:
      type: GTA.Checkpoint
    content.vb: Public Shared Function CreateCheckpoint(icon As CheckpointCustomIcon, position As Vector3, pointTo As Vector3, radius As Single, color As Color) As Checkpoint
  overload: GTA.World.CreateCheckpoint*
  nameWithType.vb: World.CreateCheckpoint(CheckpointCustomIcon, Vector3, Vector3, Single, Color)
  fullName.vb: GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon, GTA.Math.Vector3, GTA.Math.Vector3, Single, System.Drawing.Color)
  name.vb: CreateCheckpoint(CheckpointCustomIcon, Vector3, Vector3, Single, Color)
- uid: GTA.World.ClearArea(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.World.ClearArea(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)
  id: ClearArea(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearArea(Vector3, float, bool, bool, bool)
  nameWithType: World.ClearArea(Vector3, float, bool, bool, bool)
  fullName: GTA.World.ClearArea(GTA.Math.Vector3, float, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearArea(Vector3 position, float radius, bool deleteProjectiles, bool leaveCarGenCars = false, bool clearLowPriorityPickupsOnly = false)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: deleteProjectiles
      type: System.Boolean
    - id: leaveCarGenCars
      type: System.Boolean
    - id: clearLowPriorityPickupsOnly
      type: System.Boolean
    content.vb: Public Shared Sub ClearArea(position As Vector3, radius As Single, deleteProjectiles As Boolean, leaveCarGenCars As Boolean = False, clearLowPriorityPickupsOnly As Boolean = False)
  overload: GTA.World.ClearArea*
  nameWithType.vb: World.ClearArea(Vector3, Single, Boolean, Boolean, Boolean)
  fullName.vb: GTA.World.ClearArea(GTA.Math.Vector3, Single, Boolean, Boolean, Boolean)
  name.vb: ClearArea(Vector3, Single, Boolean, Boolean, Boolean)
- uid: GTA.World.ClearAreaOfProjectiles(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.ClearAreaOfProjectiles(GTA.Math.Vector3,System.Single)
  id: ClearAreaOfProjectiles(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearAreaOfProjectiles(Vector3, float)
  nameWithType: World.ClearAreaOfProjectiles(Vector3, float)
  fullName: GTA.World.ClearAreaOfProjectiles(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearAreaOfProjectiles(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    content.vb: Public Shared Sub ClearAreaOfProjectiles(position As Vector3, radius As Single)
  overload: GTA.World.ClearAreaOfProjectiles*
  nameWithType.vb: World.ClearAreaOfProjectiles(Vector3, Single)
  fullName.vb: GTA.World.ClearAreaOfProjectiles(GTA.Math.Vector3, Single)
  name.vb: ClearAreaOfProjectiles(Vector3, Single)
- uid: GTA.World.ClearAreaOfVehicles(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.World.ClearAreaOfVehicles(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: ClearAreaOfVehicles(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearAreaOfVehicles(Vector3, float, bool, bool, bool, bool, bool)
  nameWithType: World.ClearAreaOfVehicles(Vector3, float, bool, bool, bool, bool, bool)
  fullName: GTA.World.ClearAreaOfVehicles(GTA.Math.Vector3, float, bool, bool, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearAreaOfVehicles(Vector3 position, float radius, bool leaveCarGenCars = false, bool checkViewFrustum = false, bool ifWrecked = false, bool ifAbandoned = false, bool ifEngineOnFire = false)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: leaveCarGenCars
      type: System.Boolean
    - id: checkViewFrustum
      type: System.Boolean
    - id: ifWrecked
      type: System.Boolean
    - id: ifAbandoned
      type: System.Boolean
    - id: ifEngineOnFire
      type: System.Boolean
    content.vb: Public Shared Sub ClearAreaOfVehicles(position As Vector3, radius As Single, leaveCarGenCars As Boolean = False, checkViewFrustum As Boolean = False, ifWrecked As Boolean = False, ifAbandoned As Boolean = False, ifEngineOnFire As Boolean = False)
  overload: GTA.World.ClearAreaOfVehicles*
  nameWithType.vb: World.ClearAreaOfVehicles(Vector3, Single, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: GTA.World.ClearAreaOfVehicles(GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, Boolean)
  name.vb: ClearAreaOfVehicles(Vector3, Single, Boolean, Boolean, Boolean, Boolean, Boolean)
- uid: GTA.World.ClearAngledAreaOfVehicles(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.World.ClearAngledAreaOfVehicles(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: ClearAngledAreaOfVehicles(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearAngledAreaOfVehicles(Vector3, Vector3, float, bool, bool, bool, bool, bool)
  nameWithType: World.ClearAngledAreaOfVehicles(Vector3, Vector3, float, bool, bool, bool, bool, bool)
  fullName: GTA.World.ClearAngledAreaOfVehicles(GTA.Math.Vector3, GTA.Math.Vector3, float, bool, bool, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearAngledAreaOfVehicles(Vector3 position1, Vector3 position2, float areaWidth, bool leaveCarGenCars = false, bool checkViewFrustum = false, bool ifWrecked = false, bool ifAbandoned = false, bool ifEngineOnFire = false)
    parameters:
    - id: position1
      type: GTA.Math.Vector3
    - id: position2
      type: GTA.Math.Vector3
    - id: areaWidth
      type: System.Single
    - id: leaveCarGenCars
      type: System.Boolean
    - id: checkViewFrustum
      type: System.Boolean
    - id: ifWrecked
      type: System.Boolean
    - id: ifAbandoned
      type: System.Boolean
    - id: ifEngineOnFire
      type: System.Boolean
    content.vb: Public Shared Sub ClearAngledAreaOfVehicles(position1 As Vector3, position2 As Vector3, areaWidth As Single, leaveCarGenCars As Boolean = False, checkViewFrustum As Boolean = False, ifWrecked As Boolean = False, ifAbandoned As Boolean = False, ifEngineOnFire As Boolean = False)
  overload: GTA.World.ClearAngledAreaOfVehicles*
  nameWithType.vb: World.ClearAngledAreaOfVehicles(Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: GTA.World.ClearAngledAreaOfVehicles(GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean, Boolean, Boolean, Boolean, Boolean)
  name.vb: ClearAngledAreaOfVehicles(Vector3, Vector3, Single, Boolean, Boolean, Boolean, Boolean, Boolean)
- uid: GTA.World.ClearAreaOfProps(GTA.Math.Vector3,System.Single,GTA.ClearPropsFlags)
  commentId: M:GTA.World.ClearAreaOfProps(GTA.Math.Vector3,System.Single,GTA.ClearPropsFlags)
  id: ClearAreaOfProps(GTA.Math.Vector3,System.Single,GTA.ClearPropsFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearAreaOfProps(Vector3, float, ClearPropsFlags)
  nameWithType: World.ClearAreaOfProps(Vector3, float, ClearPropsFlags)
  fullName: GTA.World.ClearAreaOfProps(GTA.Math.Vector3, float, GTA.ClearPropsFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearAreaOfProps(Vector3 position, float radius, ClearPropsFlags flags)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    - id: flags
      type: GTA.ClearPropsFlags
    content.vb: Public Shared Sub ClearAreaOfProps(position As Vector3, radius As Single, flags As ClearPropsFlags)
  overload: GTA.World.ClearAreaOfProps*
  nameWithType.vb: World.ClearAreaOfProps(Vector3, Single, ClearPropsFlags)
  fullName.vb: GTA.World.ClearAreaOfProps(GTA.Math.Vector3, Single, GTA.ClearPropsFlags)
  name.vb: ClearAreaOfProps(Vector3, Single, ClearPropsFlags)
- uid: GTA.World.ClearAreaOfPeds(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.ClearAreaOfPeds(GTA.Math.Vector3,System.Single)
  id: ClearAreaOfPeds(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearAreaOfPeds(Vector3, float)
  nameWithType: World.ClearAreaOfPeds(Vector3, float)
  fullName: GTA.World.ClearAreaOfPeds(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearAreaOfPeds(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    content.vb: Public Shared Sub ClearAreaOfPeds(position As Vector3, radius As Single)
  overload: GTA.World.ClearAreaOfPeds*
  nameWithType.vb: World.ClearAreaOfPeds(Vector3, Single)
  fullName.vb: GTA.World.ClearAreaOfPeds(GTA.Math.Vector3, Single)
  name.vb: ClearAreaOfPeds(Vector3, Single)
- uid: GTA.World.ClearAreaOfCops(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.ClearAreaOfCops(GTA.Math.Vector3,System.Single)
  id: ClearAreaOfCops(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ClearAreaOfCops(Vector3, float)
  nameWithType: World.ClearAreaOfCops(Vector3, float)
  fullName: GTA.World.ClearAreaOfCops(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ClearAreaOfCops(Vector3 position, float radius)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: radius
      type: System.Single
    content.vb: Public Shared Sub ClearAreaOfCops(position As Vector3, radius As Single)
  overload: GTA.World.ClearAreaOfCops*
  nameWithType.vb: World.ClearAreaOfCops(Vector3, Single)
  fullName.vb: GTA.World.ClearAreaOfCops(GTA.Math.Vector3, Single)
  name.vb: ClearAreaOfCops(Vector3, Single)
- uid: GTA.World.DeleteAllTrains
  commentId: M:GTA.World.DeleteAllTrains
  id: DeleteAllTrains
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DeleteAllTrains()
  nameWithType: World.DeleteAllTrains()
  fullName: GTA.World.DeleteAllTrains()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DeleteAllTrains()
    content.vb: Public Shared Sub DeleteAllTrains()
  overload: GTA.World.DeleteAllTrains*
- uid: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  commentId: M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  id: CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateParticleEffectNonLooped(ParticleEffectAsset, string, Vector3, Vector3, float, InvertAxisFlags)
  nameWithType: World.CreateParticleEffectNonLooped(ParticleEffectAsset, string, Vector3, Vector3, float, InvertAxisFlags)
  fullName: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset, string, GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.InvertAxisFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool CreateParticleEffectNonLooped(ParticleEffectAsset asset, string effectName, Vector3 pos, Vector3 rot = default, float scale = 1, InvertAxisFlags invertAxis = InvertAxisFlags.None)
    parameters:
    - id: asset
      type: GTA.ParticleEffectAsset
    - id: effectName
      type: System.String
    - id: pos
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: scale
      type: System.Single
    - id: invertAxis
      type: GTA.InvertAxisFlags
    return:
      type: System.Boolean
    content.vb: Public Shared Function CreateParticleEffectNonLooped(asset As ParticleEffectAsset, effectName As String, pos As Vector3, rot As Vector3 = Nothing, scale As Single = 1, invertAxis As InvertAxisFlags = InvertAxisFlags.None) As Boolean
  overload: GTA.World.CreateParticleEffectNonLooped*
  nameWithType.vb: World.CreateParticleEffectNonLooped(ParticleEffectAsset, String, Vector3, Vector3, Single, InvertAxisFlags)
  fullName.vb: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset, String, GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.InvertAxisFlags)
  name.vb: CreateParticleEffectNonLooped(ParticleEffectAsset, String, Vector3, Vector3, Single, InvertAxisFlags)
- uid: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  commentId: M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  id: CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateParticleEffectNonLooped(ParticleEffectAsset, string, Entity, Vector3, Vector3, float, InvertAxisFlags)
  nameWithType: World.CreateParticleEffectNonLooped(ParticleEffectAsset, string, Entity, Vector3, Vector3, float, InvertAxisFlags)
  fullName: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset, string, GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.InvertAxisFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool CreateParticleEffectNonLooped(ParticleEffectAsset asset, string effectName, Entity entity, Vector3 off = default, Vector3 rot = default, float scale = 1, InvertAxisFlags invertAxis = InvertAxisFlags.None)
    parameters:
    - id: asset
      type: GTA.ParticleEffectAsset
    - id: effectName
      type: System.String
    - id: entity
      type: GTA.Entity
    - id: off
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: scale
      type: System.Single
    - id: invertAxis
      type: GTA.InvertAxisFlags
    return:
      type: System.Boolean
    content.vb: Public Shared Function CreateParticleEffectNonLooped(asset As ParticleEffectAsset, effectName As String, entity As Entity, off As Vector3 = Nothing, rot As Vector3 = Nothing, scale As Single = 1, invertAxis As InvertAxisFlags = InvertAxisFlags.None) As Boolean
  overload: GTA.World.CreateParticleEffectNonLooped*
  nameWithType.vb: World.CreateParticleEffectNonLooped(ParticleEffectAsset, String, Entity, Vector3, Vector3, Single, InvertAxisFlags)
  fullName.vb: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset, String, GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.InvertAxisFlags)
  name.vb: CreateParticleEffectNonLooped(ParticleEffectAsset, String, Entity, Vector3, Vector3, Single, InvertAxisFlags)
- uid: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  commentId: M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  id: CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateParticleEffectNonLooped(ParticleEffectAsset, string, EntityBone, Vector3, Vector3, float, InvertAxisFlags)
  nameWithType: World.CreateParticleEffectNonLooped(ParticleEffectAsset, string, EntityBone, Vector3, Vector3, float, InvertAxisFlags)
  fullName: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset, string, GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.InvertAxisFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool CreateParticleEffectNonLooped(ParticleEffectAsset asset, string effectName, EntityBone entityBone, Vector3 off = default, Vector3 rot = default, float scale = 1, InvertAxisFlags invertAxis = InvertAxisFlags.None)
    parameters:
    - id: asset
      type: GTA.ParticleEffectAsset
    - id: effectName
      type: System.String
    - id: entityBone
      type: GTA.EntityBone
    - id: off
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: scale
      type: System.Single
    - id: invertAxis
      type: GTA.InvertAxisFlags
    return:
      type: System.Boolean
    content.vb: Public Shared Function CreateParticleEffectNonLooped(asset As ParticleEffectAsset, effectName As String, entityBone As EntityBone, off As Vector3 = Nothing, rot As Vector3 = Nothing, scale As Single = 1, invertAxis As InvertAxisFlags = InvertAxisFlags.None) As Boolean
  overload: GTA.World.CreateParticleEffectNonLooped*
  nameWithType.vb: World.CreateParticleEffectNonLooped(ParticleEffectAsset, String, EntityBone, Vector3, Vector3, Single, InvertAxisFlags)
  fullName.vb: GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset, String, GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.InvertAxisFlags)
  name.vb: CreateParticleEffectNonLooped(ParticleEffectAsset, String, EntityBone, Vector3, Vector3, Single, InvertAxisFlags)
- uid: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  commentId: M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  id: CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateParticleEffect(ParticleEffectAsset, string, Entity, Vector3, Vector3, float, InvertAxisFlags)
  nameWithType: World.CreateParticleEffect(ParticleEffectAsset, string, Entity, Vector3, Vector3, float, InvertAxisFlags)
  fullName: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset, string, GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.InvertAxisFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ParticleEffect CreateParticleEffect(ParticleEffectAsset asset, string effectName, Entity entity, Vector3 offset = default, Vector3 rotation = default, float scale = 1, InvertAxisFlags invertAxis = InvertAxisFlags.None)
    parameters:
    - id: asset
      type: GTA.ParticleEffectAsset
    - id: effectName
      type: System.String
    - id: entity
      type: GTA.Entity
    - id: offset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: scale
      type: System.Single
    - id: invertAxis
      type: GTA.InvertAxisFlags
    return:
      type: GTA.ParticleEffect
    content.vb: Public Shared Function CreateParticleEffect(asset As ParticleEffectAsset, effectName As String, entity As Entity, offset As Vector3 = Nothing, rotation As Vector3 = Nothing, scale As Single = 1, invertAxis As InvertAxisFlags = InvertAxisFlags.None) As ParticleEffect
  overload: GTA.World.CreateParticleEffect*
  nameWithType.vb: World.CreateParticleEffect(ParticleEffectAsset, String, Entity, Vector3, Vector3, Single, InvertAxisFlags)
  fullName.vb: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset, String, GTA.Entity, GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.InvertAxisFlags)
  name.vb: CreateParticleEffect(ParticleEffectAsset, String, Entity, Vector3, Vector3, Single, InvertAxisFlags)
- uid: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  commentId: M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  id: CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateParticleEffect(ParticleEffectAsset, string, EntityBone, Vector3, Vector3, float, InvertAxisFlags)
  nameWithType: World.CreateParticleEffect(ParticleEffectAsset, string, EntityBone, Vector3, Vector3, float, InvertAxisFlags)
  fullName: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset, string, GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.InvertAxisFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ParticleEffect CreateParticleEffect(ParticleEffectAsset asset, string effectName, EntityBone entityBone, Vector3 offset = default, Vector3 rotation = default, float scale = 1, InvertAxisFlags invertAxis = InvertAxisFlags.None)
    parameters:
    - id: asset
      type: GTA.ParticleEffectAsset
    - id: effectName
      type: System.String
    - id: entityBone
      type: GTA.EntityBone
    - id: offset
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: scale
      type: System.Single
    - id: invertAxis
      type: GTA.InvertAxisFlags
    return:
      type: GTA.ParticleEffect
    content.vb: Public Shared Function CreateParticleEffect(asset As ParticleEffectAsset, effectName As String, entityBone As EntityBone, offset As Vector3 = Nothing, rotation As Vector3 = Nothing, scale As Single = 1, invertAxis As InvertAxisFlags = InvertAxisFlags.None) As ParticleEffect
  overload: GTA.World.CreateParticleEffect*
  nameWithType.vb: World.CreateParticleEffect(ParticleEffectAsset, String, EntityBone, Vector3, Vector3, Single, InvertAxisFlags)
  fullName.vb: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset, String, GTA.EntityBone, GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.InvertAxisFlags)
  name.vb: CreateParticleEffect(ParticleEffectAsset, String, EntityBone, Vector3, Vector3, Single, InvertAxisFlags)
- uid: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  commentId: M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  id: CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CreateParticleEffect(ParticleEffectAsset, string, Vector3, Vector3, float, InvertAxisFlags)
  nameWithType: World.CreateParticleEffect(ParticleEffectAsset, string, Vector3, Vector3, float, InvertAxisFlags)
  fullName: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset, string, GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.InvertAxisFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static ParticleEffect CreateParticleEffect(ParticleEffectAsset asset, string effectName, Vector3 position, Vector3 rotation = default, float scale = 1, InvertAxisFlags invertAxis = InvertAxisFlags.None)
    parameters:
    - id: asset
      type: GTA.ParticleEffectAsset
    - id: effectName
      type: System.String
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: scale
      type: System.Single
    - id: invertAxis
      type: GTA.InvertAxisFlags
    return:
      type: GTA.ParticleEffect
    content.vb: Public Shared Function CreateParticleEffect(asset As ParticleEffectAsset, effectName As String, position As Vector3, rotation As Vector3 = Nothing, scale As Single = 1, invertAxis As InvertAxisFlags = InvertAxisFlags.None) As ParticleEffect
  overload: GTA.World.CreateParticleEffect*
  nameWithType.vb: World.CreateParticleEffect(ParticleEffectAsset, String, Vector3, Vector3, Single, InvertAxisFlags)
  fullName.vb: GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset, String, GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.InvertAxisFlags)
  name.vb: CreateParticleEffect(ParticleEffectAsset, String, Vector3, Vector3, Single, InvertAxisFlags)
- uid: GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3,System.Single)
  commentId: M:GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3,System.Single)
  id: RemoveAllParticleEffectsInRange(GTA.Math.Vector3,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: RemoveAllParticleEffectsInRange(Vector3, float)
  nameWithType: World.RemoveAllParticleEffectsInRange(Vector3, float)
  fullName: GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void RemoveAllParticleEffectsInRange(Vector3 pos, float range)
    parameters:
    - id: pos
      type: GTA.Math.Vector3
    - id: range
      type: System.Single
    content.vb: Public Shared Sub RemoveAllParticleEffectsInRange(pos As Vector3, range As Single)
  overload: GTA.World.RemoveAllParticleEffectsInRange*
  nameWithType.vb: World.RemoveAllParticleEffectsInRange(Vector3, Single)
  fullName.vb: GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3, Single)
  name.vb: RemoveAllParticleEffectsInRange(Vector3, Single)
- uid: GTA.World.AddRope(GTA.RopeType,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  commentId: M:GTA.World.AddRope(GTA.RopeType,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  id: AddRope(GTA.RopeType,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: AddRope(RopeType, Vector3, Vector3, float, float, bool)
  nameWithType: World.AddRope(RopeType, Vector3, Vector3, float, float, bool)
  fullName: GTA.World.AddRope(GTA.RopeType, GTA.Math.Vector3, GTA.Math.Vector3, float, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Rope AddRope(RopeType type, Vector3 position, Vector3 rotation, float length, float minLength, bool breakable)
    parameters:
    - id: type
      type: GTA.RopeType
    - id: position
      type: GTA.Math.Vector3
    - id: rotation
      type: GTA.Math.Vector3
    - id: length
      type: System.Single
    - id: minLength
      type: System.Single
    - id: breakable
      type: System.Boolean
    return:
      type: GTA.Rope
    content.vb: Public Shared Function AddRope(type As RopeType, position As Vector3, rotation As Vector3, length As Single, minLength As Single, breakable As Boolean) As Rope
  overload: GTA.World.AddRope*
  nameWithType.vb: World.AddRope(RopeType, Vector3, Vector3, Single, Single, Boolean)
  fullName.vb: GTA.World.AddRope(GTA.RopeType, GTA.Math.Vector3, GTA.Math.Vector3, Single, Single, Boolean)
  name.vb: AddRope(RopeType, Vector3, Vector3, Single, Single, Boolean)
- uid: GTA.World.ShootSingleBullet(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single)
  commentId: M:GTA.World.ShootSingleBullet(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single)
  id: ShootSingleBullet(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ShootSingleBullet(Vector3, Vector3, int, WeaponAsset, Ped, bool, bool, bool, float)
  nameWithType: World.ShootSingleBullet(Vector3, Vector3, int, WeaponAsset, Ped, bool, bool, bool, float)
  fullName: GTA.World.ShootSingleBullet(GTA.Math.Vector3, GTA.Math.Vector3, int, GTA.WeaponAsset, GTA.Ped, bool, bool, bool, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ShootSingleBullet(Vector3 startPosition, Vector3 endPosition, int damage, WeaponAsset weapon, Ped owner = null, bool perfectAccuracy = true, bool createTraceVfx = true, bool allowRumble = true, float initialVelocity = -1)
    parameters:
    - id: startPosition
      type: GTA.Math.Vector3
    - id: endPosition
      type: GTA.Math.Vector3
    - id: damage
      type: System.Int32
    - id: weapon
      type: GTA.WeaponAsset
    - id: owner
      type: GTA.Ped
    - id: perfectAccuracy
      type: System.Boolean
    - id: createTraceVfx
      type: System.Boolean
    - id: allowRumble
      type: System.Boolean
    - id: initialVelocity
      type: System.Single
    content.vb: Public Shared Sub ShootSingleBullet(startPosition As Vector3, endPosition As Vector3, damage As Integer, weapon As WeaponAsset, owner As Ped = Nothing, perfectAccuracy As Boolean = True, createTraceVfx As Boolean = True, allowRumble As Boolean = True, initialVelocity As Single = -1)
  overload: GTA.World.ShootSingleBullet*
  nameWithType.vb: World.ShootSingleBullet(Vector3, Vector3, Integer, WeaponAsset, Ped, Boolean, Boolean, Boolean, Single)
  fullName.vb: GTA.World.ShootSingleBullet(GTA.Math.Vector3, GTA.Math.Vector3, Integer, GTA.WeaponAsset, GTA.Ped, Boolean, Boolean, Boolean, Single)
  name.vb: ShootSingleBullet(Vector3, Vector3, Integer, WeaponAsset, Ped, Boolean, Boolean, Boolean, Single)
- uid: GTA.World.ShootSingleBulletIgnoreEntity(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,GTA.Entity)
  commentId: M:GTA.World.ShootSingleBulletIgnoreEntity(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,GTA.Entity)
  id: ShootSingleBulletIgnoreEntity(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,GTA.Entity)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ShootSingleBulletIgnoreEntity(Vector3, Vector3, int, WeaponAsset, Ped, bool, bool, bool, float, Entity, Entity)
  nameWithType: World.ShootSingleBulletIgnoreEntity(Vector3, Vector3, int, WeaponAsset, Ped, bool, bool, bool, float, Entity, Entity)
  fullName: GTA.World.ShootSingleBulletIgnoreEntity(GTA.Math.Vector3, GTA.Math.Vector3, int, GTA.WeaponAsset, GTA.Ped, bool, bool, bool, float, GTA.Entity, GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ShootSingleBulletIgnoreEntity(Vector3 startPosition, Vector3 endPosition, int damage, WeaponAsset weapon, Ped owner = null, bool perfectAccuracy = true, bool createTraceVfx = true, bool allowRumble = true, float initialVelocity = -1, Entity ignoreEntity = null, Entity targetEntity = null)
    parameters:
    - id: startPosition
      type: GTA.Math.Vector3
    - id: endPosition
      type: GTA.Math.Vector3
    - id: damage
      type: System.Int32
    - id: weapon
      type: GTA.WeaponAsset
    - id: owner
      type: GTA.Ped
    - id: perfectAccuracy
      type: System.Boolean
    - id: createTraceVfx
      type: System.Boolean
    - id: allowRumble
      type: System.Boolean
    - id: initialVelocity
      type: System.Single
    - id: ignoreEntity
      type: GTA.Entity
    - id: targetEntity
      type: GTA.Entity
    content.vb: Public Shared Sub ShootSingleBulletIgnoreEntity(startPosition As Vector3, endPosition As Vector3, damage As Integer, weapon As WeaponAsset, owner As Ped = Nothing, perfectAccuracy As Boolean = True, createTraceVfx As Boolean = True, allowRumble As Boolean = True, initialVelocity As Single = -1, ignoreEntity As Entity = Nothing, targetEntity As Entity = Nothing)
  overload: GTA.World.ShootSingleBulletIgnoreEntity*
  nameWithType.vb: World.ShootSingleBulletIgnoreEntity(Vector3, Vector3, Integer, WeaponAsset, Ped, Boolean, Boolean, Boolean, Single, Entity, Entity)
  fullName.vb: GTA.World.ShootSingleBulletIgnoreEntity(GTA.Math.Vector3, GTA.Math.Vector3, Integer, GTA.WeaponAsset, GTA.Ped, Boolean, Boolean, Boolean, Single, GTA.Entity, GTA.Entity)
  name.vb: ShootSingleBulletIgnoreEntity(Vector3, Vector3, Integer, WeaponAsset, Ped, Boolean, Boolean, Boolean, Single, Entity, Entity)
- uid: GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)
  id: ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ShootSingleBulletIgnoreEntityNew(Vector3, Vector3, int, WeaponAsset, Ped, bool, bool, bool, float, Entity, bool, bool, Entity, bool, bool, bool)
  nameWithType: World.ShootSingleBulletIgnoreEntityNew(Vector3, Vector3, int, WeaponAsset, Ped, bool, bool, bool, float, Entity, bool, bool, Entity, bool, bool, bool)
  fullName: GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3, GTA.Math.Vector3, int, GTA.WeaponAsset, GTA.Ped, bool, bool, bool, float, GTA.Entity, bool, bool, GTA.Entity, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void ShootSingleBulletIgnoreEntityNew(Vector3 startPosition, Vector3 endPosition, int damage, WeaponAsset weapon, Ped owner = null, bool perfectAccuracy = true, bool createTraceVfx = true, bool allowRumble = true, float initialVelocity = -1, Entity ignoreEntity = null, bool forceCreateNewProjectileObject = false, bool disablePlayerCoverStartAdjustment = false, Entity targetEntity = null, bool freezeProjectileWaitingOnCollision = false, bool ignoreCollisionEntity = false, bool ignoreCollisionResetNoBB = false)
    parameters:
    - id: startPosition
      type: GTA.Math.Vector3
    - id: endPosition
      type: GTA.Math.Vector3
    - id: damage
      type: System.Int32
    - id: weapon
      type: GTA.WeaponAsset
    - id: owner
      type: GTA.Ped
    - id: perfectAccuracy
      type: System.Boolean
    - id: createTraceVfx
      type: System.Boolean
    - id: allowRumble
      type: System.Boolean
    - id: initialVelocity
      type: System.Single
    - id: ignoreEntity
      type: GTA.Entity
    - id: forceCreateNewProjectileObject
      type: System.Boolean
    - id: disablePlayerCoverStartAdjustment
      type: System.Boolean
    - id: targetEntity
      type: GTA.Entity
    - id: freezeProjectileWaitingOnCollision
      type: System.Boolean
    - id: ignoreCollisionEntity
      type: System.Boolean
    - id: ignoreCollisionResetNoBB
      type: System.Boolean
    content.vb: Public Shared Sub ShootSingleBulletIgnoreEntityNew(startPosition As Vector3, endPosition As Vector3, damage As Integer, weapon As WeaponAsset, owner As Ped = Nothing, perfectAccuracy As Boolean = True, createTraceVfx As Boolean = True, allowRumble As Boolean = True, initialVelocity As Single = -1, ignoreEntity As Entity = Nothing, forceCreateNewProjectileObject As Boolean = False, disablePlayerCoverStartAdjustment As Boolean = False, targetEntity As Entity = Nothing, freezeProjectileWaitingOnCollision As Boolean = False, ignoreCollisionEntity As Boolean = False, ignoreCollisionResetNoBB As Boolean = False)
  overload: GTA.World.ShootSingleBulletIgnoreEntityNew*
  nameWithType.vb: World.ShootSingleBulletIgnoreEntityNew(Vector3, Vector3, Integer, WeaponAsset, Ped, Boolean, Boolean, Boolean, Single, Entity, Boolean, Boolean, Entity, Boolean, Boolean, Boolean)
  fullName.vb: GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3, GTA.Math.Vector3, Integer, GTA.WeaponAsset, GTA.Ped, Boolean, Boolean, Boolean, Single, GTA.Entity, Boolean, Boolean, GTA.Entity, Boolean, Boolean, Boolean)
  name.vb: ShootSingleBulletIgnoreEntityNew(Vector3, Vector3, Integer, WeaponAsset, Ped, Boolean, Boolean, Boolean, Single, Entity, Boolean, Boolean, Entity, Boolean, Boolean, Boolean)
- uid: GTA.World.AddExplosion(GTA.Math.Vector3,GTA.ExplosionType,System.Single,System.Single,GTA.Ped,System.Boolean,System.Boolean)
  commentId: M:GTA.World.AddExplosion(GTA.Math.Vector3,GTA.ExplosionType,System.Single,System.Single,GTA.Ped,System.Boolean,System.Boolean)
  id: AddExplosion(GTA.Math.Vector3,GTA.ExplosionType,System.Single,System.Single,GTA.Ped,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: AddExplosion(Vector3, ExplosionType, float, float, Ped, bool, bool)
  nameWithType: World.AddExplosion(Vector3, ExplosionType, float, float, Ped, bool, bool)
  fullName: GTA.World.AddExplosion(GTA.Math.Vector3, GTA.ExplosionType, float, float, GTA.Ped, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void AddExplosion(Vector3 position, ExplosionType type, float radius, float cameraShake, Ped owner = null, bool aubidble = true, bool invisible = false)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: type
      type: GTA.ExplosionType
    - id: radius
      type: System.Single
    - id: cameraShake
      type: System.Single
    - id: owner
      type: GTA.Ped
    - id: aubidble
      type: System.Boolean
    - id: invisible
      type: System.Boolean
    content.vb: Public Shared Sub AddExplosion(position As Vector3, type As ExplosionType, radius As Single, cameraShake As Single, owner As Ped = Nothing, aubidble As Boolean = True, invisible As Boolean = False)
  overload: GTA.World.AddExplosion*
  nameWithType.vb: World.AddExplosion(Vector3, ExplosionType, Single, Single, Ped, Boolean, Boolean)
  fullName.vb: GTA.World.AddExplosion(GTA.Math.Vector3, GTA.ExplosionType, Single, Single, GTA.Ped, Boolean, Boolean)
  name.vb: AddExplosion(Vector3, ExplosionType, Single, Single, Ped, Boolean, Boolean)
- uid: GTA.World.AddRelationshipGroup(System.String)
  commentId: M:GTA.World.AddRelationshipGroup(System.String)
  id: AddRelationshipGroup(System.String)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: AddRelationshipGroup(string)
  nameWithType: World.AddRelationshipGroup(string)
  fullName: GTA.World.AddRelationshipGroup(string)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static RelationshipGroup AddRelationshipGroup(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: GTA.RelationshipGroup
    content.vb: Public Shared Function AddRelationshipGroup(name As String) As RelationshipGroup
  overload: GTA.World.AddRelationshipGroup*
  nameWithType.vb: World.AddRelationshipGroup(String)
  fullName.vb: GTA.World.AddRelationshipGroup(String)
  name.vb: AddRelationshipGroup(String)
- uid: GTA.World.VehicleHighSpeedBumpMultiplier(System.Single)
  commentId: M:GTA.World.VehicleHighSpeedBumpMultiplier(System.Single)
  id: VehicleHighSpeedBumpMultiplier(System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: VehicleHighSpeedBumpMultiplier(float)
  nameWithType: World.VehicleHighSpeedBumpMultiplier(float)
  fullName: GTA.World.VehicleHighSpeedBumpMultiplier(float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void VehicleHighSpeedBumpMultiplier(float multiplier)
    parameters:
    - id: multiplier
      type: System.Single
    content.vb: Public Shared Sub VehicleHighSpeedBumpMultiplier(multiplier As Single)
  overload: GTA.World.VehicleHighSpeedBumpMultiplier*
  nameWithType.vb: World.VehicleHighSpeedBumpMultiplier(Single)
  fullName.vb: GTA.World.VehicleHighSpeedBumpMultiplier(Single)
  name.vb: VehicleHighSpeedBumpMultiplier(Single)
- uid: GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)
  commentId: M:GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)
  id: DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawMarker(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, bool, bool, bool, string, string, bool)
  nameWithType: World.DrawMarker(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, bool, bool, bool, string, string, bool)
  fullName: GTA.World.DrawMarker(GTA.MarkerType, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, bool, bool, bool, string, string, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawMarker(MarkerType type, Vector3 pos, Vector3 dir, Vector3 rot, Vector3 scale, Color color, bool bobUpAndDown = false, bool faceCamera = false, bool rotateY = false, string textueDict = null, string textureName = null, bool drawOnEntity = false)
    parameters:
    - id: type
      type: GTA.MarkerType
    - id: pos
      type: GTA.Math.Vector3
    - id: dir
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: scale
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    - id: bobUpAndDown
      type: System.Boolean
    - id: faceCamera
      type: System.Boolean
    - id: rotateY
      type: System.Boolean
    - id: textueDict
      type: System.String
    - id: textureName
      type: System.String
    - id: drawOnEntity
      type: System.Boolean
    content.vb: Public Shared Sub DrawMarker(type As MarkerType, pos As Vector3, dir As Vector3, rot As Vector3, scale As Vector3, color As Color, bobUpAndDown As Boolean = False, faceCamera As Boolean = False, rotateY As Boolean = False, textueDict As String = Nothing, textureName As String = Nothing, drawOnEntity As Boolean = False)
  overload: GTA.World.DrawMarker*
  nameWithType.vb: World.DrawMarker(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, Boolean, Boolean, Boolean, String, String, Boolean)
  fullName.vb: GTA.World.DrawMarker(GTA.MarkerType, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, Boolean, Boolean, Boolean, String, String, Boolean)
  name.vb: DrawMarker(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, Boolean, Boolean, Boolean, String, String, Boolean)
- uid: GTA.World.DrawMarkerEx(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Nullable{GTA.Graphics.TextureAsset},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:GTA.World.DrawMarkerEx(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Nullable{GTA.Graphics.TextureAsset},System.Boolean,System.Boolean,System.Boolean)
  id: DrawMarkerEx(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Nullable{GTA.Graphics.TextureAsset},System.Boolean,System.Boolean,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawMarkerEx(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, bool, bool, EulerRotationOrder, bool, TextureAsset?, bool, bool, bool)
  nameWithType: World.DrawMarkerEx(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, bool, bool, EulerRotationOrder, bool, TextureAsset?, bool, bool, bool)
  fullName: GTA.World.DrawMarkerEx(GTA.MarkerType, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, bool, bool, GTA.EulerRotationOrder, bool, GTA.Graphics.TextureAsset?, bool, bool, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawMarkerEx(MarkerType type, Vector3 pos, Vector3 dir, Vector3 rot, Vector3 scale, Color color, bool bounce = false, bool faceCamera = false, EulerRotationOrder rotOrder = EulerRotationOrder.YXZ, bool rotate = false, TextureAsset? texAsset = null, bool renderInverted = false, bool usePreAlphaDepth = true, bool matchEntityRotOrder = false)
    parameters:
    - id: type
      type: GTA.MarkerType
    - id: pos
      type: GTA.Math.Vector3
    - id: dir
      type: GTA.Math.Vector3
    - id: rot
      type: GTA.Math.Vector3
    - id: scale
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    - id: bounce
      type: System.Boolean
    - id: faceCamera
      type: System.Boolean
    - id: rotOrder
      type: GTA.EulerRotationOrder
    - id: rotate
      type: System.Boolean
    - id: texAsset
      type: System.Nullable{GTA.Graphics.TextureAsset}
    - id: renderInverted
      type: System.Boolean
    - id: usePreAlphaDepth
      type: System.Boolean
    - id: matchEntityRotOrder
      type: System.Boolean
    content.vb: Public Shared Sub DrawMarkerEx(type As MarkerType, pos As Vector3, dir As Vector3, rot As Vector3, scale As Vector3, color As Color, bounce As Boolean = False, faceCamera As Boolean = False, rotOrder As EulerRotationOrder = EulerRotationOrder.YXZ, rotate As Boolean = False, texAsset As TextureAsset? = Nothing, renderInverted As Boolean = False, usePreAlphaDepth As Boolean = True, matchEntityRotOrder As Boolean = False)
  overload: GTA.World.DrawMarkerEx*
  nameWithType.vb: World.DrawMarkerEx(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, Boolean, Boolean, EulerRotationOrder, Boolean, TextureAsset?, Boolean, Boolean, Boolean)
  fullName.vb: GTA.World.DrawMarkerEx(GTA.MarkerType, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, Boolean, Boolean, GTA.EulerRotationOrder, Boolean, GTA.Graphics.TextureAsset?, Boolean, Boolean, Boolean)
  name.vb: DrawMarkerEx(MarkerType, Vector3, Vector3, Vector3, Vector3, Color, Boolean, Boolean, EulerRotationOrder, Boolean, TextureAsset?, Boolean, Boolean, Boolean)
- uid: GTA.World.DrawLightWithRange(GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single)
  commentId: M:GTA.World.DrawLightWithRange(GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single)
  id: DrawLightWithRange(GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawLightWithRange(Vector3, Color, float, float)
  nameWithType: World.DrawLightWithRange(Vector3, Color, float, float)
  fullName: GTA.World.DrawLightWithRange(GTA.Math.Vector3, System.Drawing.Color, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawLightWithRange(Vector3 position, Color color, float range, float intensity)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    - id: range
      type: System.Single
    - id: intensity
      type: System.Single
    content.vb: Public Shared Sub DrawLightWithRange(position As Vector3, color As Color, range As Single, intensity As Single)
  overload: GTA.World.DrawLightWithRange*
  nameWithType.vb: World.DrawLightWithRange(Vector3, Color, Single, Single)
  fullName.vb: GTA.World.DrawLightWithRange(GTA.Math.Vector3, System.Drawing.Color, Single, Single)
  name.vb: DrawLightWithRange(Vector3, Color, Single, Single)
- uid: GTA.World.DrawSpotLight(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:GTA.World.DrawSpotLight(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: DrawSpotLight(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawSpotLight(Vector3, Vector3, Color, float, float, float, float, float)
  nameWithType: World.DrawSpotLight(Vector3, Vector3, Color, float, float, float, float, float)
  fullName: GTA.World.DrawSpotLight(GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, float, float, float, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawSpotLight(Vector3 pos, Vector3 dir, Color color, float distance, float brightness, float roundness, float radius, float fadeout)
    parameters:
    - id: pos
      type: GTA.Math.Vector3
    - id: dir
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    - id: distance
      type: System.Single
    - id: brightness
      type: System.Single
    - id: roundness
      type: System.Single
    - id: radius
      type: System.Single
    - id: fadeout
      type: System.Single
    content.vb: Public Shared Sub DrawSpotLight(pos As Vector3, dir As Vector3, color As Color, distance As Single, brightness As Single, roundness As Single, radius As Single, fadeout As Single)
  overload: GTA.World.DrawSpotLight*
  nameWithType.vb: World.DrawSpotLight(Vector3, Vector3, Color, Single, Single, Single, Single, Single)
  fullName.vb: GTA.World.DrawSpotLight(GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, Single, Single, Single, Single, Single)
  name.vb: DrawSpotLight(Vector3, Vector3, Color, Single, Single, Single, Single, Single)
- uid: GTA.World.DrawSpotLightWithShadow(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:GTA.World.DrawSpotLightWithShadow(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: DrawSpotLightWithShadow(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawSpotLightWithShadow(Vector3, Vector3, Color, float, float, float, float, float)
  nameWithType: World.DrawSpotLightWithShadow(Vector3, Vector3, Color, float, float, float, float, float)
  fullName: GTA.World.DrawSpotLightWithShadow(GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, float, float, float, float, float)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawSpotLightWithShadow(Vector3 pos, Vector3 dir, Color color, float distance, float brightness, float roundness, float radius, float fadeout)
    parameters:
    - id: pos
      type: GTA.Math.Vector3
    - id: dir
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    - id: distance
      type: System.Single
    - id: brightness
      type: System.Single
    - id: roundness
      type: System.Single
    - id: radius
      type: System.Single
    - id: fadeout
      type: System.Single
    content.vb: Public Shared Sub DrawSpotLightWithShadow(pos As Vector3, dir As Vector3, color As Color, distance As Single, brightness As Single, roundness As Single, radius As Single, fadeout As Single)
  overload: GTA.World.DrawSpotLightWithShadow*
  nameWithType.vb: World.DrawSpotLightWithShadow(Vector3, Vector3, Color, Single, Single, Single, Single, Single)
  fullName.vb: GTA.World.DrawSpotLightWithShadow(GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color, Single, Single, Single, Single, Single)
  name.vb: DrawSpotLightWithShadow(Vector3, Vector3, Color, Single, Single, Single, Single, Single)
- uid: GTA.World.DrawLine(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  commentId: M:GTA.World.DrawLine(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  id: DrawLine(GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawLine(Vector3, Vector3, Color)
  nameWithType: World.DrawLine(Vector3, Vector3, Color)
  fullName: GTA.World.DrawLine(GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawLine(Vector3 start, Vector3 end, Color color)
    parameters:
    - id: start
      type: GTA.Math.Vector3
    - id: end
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    content.vb: Public Shared Sub DrawLine(start As Vector3, [end] As Vector3, color As Color)
  overload: GTA.World.DrawLine*
- uid: GTA.World.DrawPolygon(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  commentId: M:GTA.World.DrawPolygon(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  id: DrawPolygon(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawPolygon(Vector3, Vector3, Vector3, Color)
  nameWithType: World.DrawPolygon(Vector3, Vector3, Vector3, Color)
  fullName: GTA.World.DrawPolygon(GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, System.Drawing.Color)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawPolygon(Vector3 vertexA, Vector3 vertexB, Vector3 vertexC, Color color)
    parameters:
    - id: vertexA
      type: GTA.Math.Vector3
    - id: vertexB
      type: GTA.Math.Vector3
    - id: vertexC
      type: GTA.Math.Vector3
    - id: color
      type: System.Drawing.Color
    content.vb: Public Shared Sub DrawPolygon(vertexA As Vector3, vertexB As Vector3, vertexC As Vector3, color As Color)
  overload: GTA.World.DrawPolygon*
- uid: GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color,GTA.DrawBoxFlags)
  commentId: M:GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color,GTA.DrawBoxFlags)
  id: DrawBoxForAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color,GTA.DrawBoxFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: DrawBoxForAngledArea(Vector3, Vector3, float, Color, DrawBoxFlags)
  nameWithType: World.DrawBoxForAngledArea(Vector3, Vector3, float, Color, DrawBoxFlags)
  fullName: GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, float, System.Drawing.Color, GTA.DrawBoxFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static void DrawBoxForAngledArea(Vector3 originEdge, Vector3 extentEdge, float width, Color color, DrawBoxFlags drawFlags = DrawBoxFlags.OutsideOnly)
    parameters:
    - id: originEdge
      type: GTA.Math.Vector3
    - id: extentEdge
      type: GTA.Math.Vector3
    - id: width
      type: System.Single
    - id: color
      type: System.Drawing.Color
    - id: drawFlags
      type: GTA.DrawBoxFlags
    content.vb: Public Shared Sub DrawBoxForAngledArea(originEdge As Vector3, extentEdge As Vector3, width As Single, color As Color, drawFlags As DrawBoxFlags = DrawBoxFlags.OutsideOnly)
  overload: GTA.World.DrawBoxForAngledArea*
  nameWithType.vb: World.DrawBoxForAngledArea(Vector3, Vector3, Single, Color, DrawBoxFlags)
  fullName.vb: GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, Single, System.Drawing.Color, GTA.DrawBoxFlags)
  name.vb: DrawBoxForAngledArea(Vector3, Vector3, Single, Color, DrawBoxFlags)
- uid: GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity)
  commentId: M:GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity)
  id: Raycast(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: Raycast(Vector3, Vector3, IntersectFlags, Entity)
  nameWithType: World.Raycast(Vector3, Vector3, IntersectFlags, Entity)
  fullName: GTA.World.Raycast(GTA.Math.Vector3, GTA.Math.Vector3, GTA.IntersectFlags, GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static RaycastResult Raycast(Vector3 source, Vector3 target, IntersectFlags options, Entity ignoreEntity = null)
    parameters:
    - id: source
      type: GTA.Math.Vector3
    - id: target
      type: GTA.Math.Vector3
    - id: options
      type: GTA.IntersectFlags
    - id: ignoreEntity
      type: GTA.Entity
    return:
      type: GTA.RaycastResult
    content.vb: Public Shared Function Raycast(source As Vector3, target As Vector3, options As IntersectFlags, ignoreEntity As Entity = Nothing) As RaycastResult
  overload: GTA.World.Raycast*
- uid: GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)
  commentId: M:GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)
  id: Raycast(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: Raycast(Vector3, Vector3, float, IntersectFlags, Entity)
  nameWithType: World.Raycast(Vector3, Vector3, float, IntersectFlags, Entity)
  fullName: GTA.World.Raycast(GTA.Math.Vector3, GTA.Math.Vector3, float, GTA.IntersectFlags, GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static RaycastResult Raycast(Vector3 source, Vector3 direction, float maxDistance, IntersectFlags options, Entity ignoreEntity = null)
    parameters:
    - id: source
      type: GTA.Math.Vector3
    - id: direction
      type: GTA.Math.Vector3
    - id: maxDistance
      type: System.Single
    - id: options
      type: GTA.IntersectFlags
    - id: ignoreEntity
      type: GTA.Entity
    return:
      type: GTA.RaycastResult
    content.vb: Public Shared Function Raycast(source As Vector3, direction As Vector3, maxDistance As Single, options As IntersectFlags, ignoreEntity As Entity = Nothing) As RaycastResult
  overload: GTA.World.Raycast*
  nameWithType.vb: World.Raycast(Vector3, Vector3, Single, IntersectFlags, Entity)
  fullName.vb: GTA.World.Raycast(GTA.Math.Vector3, GTA.Math.Vector3, Single, GTA.IntersectFlags, GTA.Entity)
  name.vb: Raycast(Vector3, Vector3, Single, IntersectFlags, Entity)
- uid: GTA.World.GetCrosshairCoordinates
  commentId: M:GTA.World.GetCrosshairCoordinates
  id: GetCrosshairCoordinates
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetCrosshairCoordinates()
  nameWithType: World.GetCrosshairCoordinates()
  fullName: GTA.World.GetCrosshairCoordinates()
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static RaycastResult GetCrosshairCoordinates()
    return:
      type: GTA.RaycastResult
    content.vb: Public Shared Function GetCrosshairCoordinates() As RaycastResult
  overload: GTA.World.GetCrosshairCoordinates*
- uid: GTA.World.GetCrosshairCoordinates(GTA.IntersectFlags,GTA.Entity)
  commentId: M:GTA.World.GetCrosshairCoordinates(GTA.IntersectFlags,GTA.Entity)
  id: GetCrosshairCoordinates(GTA.IntersectFlags,GTA.Entity)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetCrosshairCoordinates(IntersectFlags, Entity)
  nameWithType: World.GetCrosshairCoordinates(IntersectFlags, Entity)
  fullName: GTA.World.GetCrosshairCoordinates(GTA.IntersectFlags, GTA.Entity)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static RaycastResult GetCrosshairCoordinates(IntersectFlags intersectOptions = IntersectFlags.Everything, Entity ignoreEntity = null)
    parameters:
    - id: intersectOptions
      type: GTA.IntersectFlags
    - id: ignoreEntity
      type: GTA.Entity
    return:
      type: GTA.RaycastResult
    content.vb: Public Shared Function GetCrosshairCoordinates(intersectOptions As IntersectFlags = IntersectFlags.Everything, ignoreEntity As Entity = Nothing) As RaycastResult
  overload: GTA.World.GetCrosshairCoordinates*
- uid: GTA.World.GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  commentId: M:GTA.World.GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  id: GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetDistance(Vector3, Vector3)
  nameWithType: World.GetDistance(Vector3, Vector3)
  fullName: GTA.World.GetDistance(GTA.Math.Vector3, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float GetDistance(Vector3 origin, Vector3 destination)
    parameters:
    - id: origin
      type: GTA.Math.Vector3
    - id: destination
      type: GTA.Math.Vector3
    return:
      type: System.Single
    content.vb: Public Shared Function GetDistance(origin As Vector3, destination As Vector3) As Single
  overload: GTA.World.GetDistance*
- uid: GTA.World.CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  commentId: M:GTA.World.CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  id: CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CalculateTravelDistance(Vector3, Vector3)
  nameWithType: World.CalculateTravelDistance(Vector3, Vector3)
  fullName: GTA.World.CalculateTravelDistance(GTA.Math.Vector3, GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float CalculateTravelDistance(Vector3 origin, Vector3 destination)
    parameters:
    - id: origin
      type: GTA.Math.Vector3
    - id: destination
      type: GTA.Math.Vector3
    return:
      type: System.Single
    content.vb: Public Shared Function CalculateTravelDistance(origin As Vector3, destination As Vector3) As Single
  overload: GTA.World.CalculateTravelDistance*
- uid: GTA.World.GetGroundHeight(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  commentId: M:GTA.World.GetGroundHeight(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  id: GetGroundHeight(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetGroundHeight(Vector3, out float, GetGroundHeightMode)
  nameWithType: World.GetGroundHeight(Vector3, out float, GetGroundHeightMode)
  fullName: GTA.World.GetGroundHeight(GTA.Math.Vector3, out float, GTA.GetGroundHeightMode)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool GetGroundHeight(Vector3 position, out float height, GetGroundHeightMode mode = GetGroundHeightMode.Normal)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: height
      type: System.Single
    - id: mode
      type: GTA.GetGroundHeightMode
    return:
      type: System.Boolean
    content.vb: Public Shared Function GetGroundHeight(position As Vector3, height As Single, mode As GetGroundHeightMode = GetGroundHeightMode.Normal) As Boolean
  overload: GTA.World.GetGroundHeight*
  nameWithType.vb: World.GetGroundHeight(Vector3, Single, GetGroundHeightMode)
  fullName.vb: GTA.World.GetGroundHeight(GTA.Math.Vector3, Single, GTA.GetGroundHeightMode)
  name.vb: GetGroundHeight(Vector3, Single, GetGroundHeightMode)
- uid: GTA.World.GetGroundHeightAndNormal(GTA.Math.Vector3,System.Single@,GTA.Math.Vector3@)
  commentId: M:GTA.World.GetGroundHeightAndNormal(GTA.Math.Vector3,System.Single@,GTA.Math.Vector3@)
  id: GetGroundHeightAndNormal(GTA.Math.Vector3,System.Single@,GTA.Math.Vector3@)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetGroundHeightAndNormal(Vector3, out float, out Vector3)
  nameWithType: World.GetGroundHeightAndNormal(Vector3, out float, out Vector3)
  fullName: GTA.World.GetGroundHeightAndNormal(GTA.Math.Vector3, out float, out GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool GetGroundHeightAndNormal(Vector3 position, out float height, out Vector3 normal)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: height
      type: System.Single
    - id: normal
      type: GTA.Math.Vector3
    return:
      type: System.Boolean
    content.vb: Public Shared Function GetGroundHeightAndNormal(position As Vector3, height As Single, normal As Vector3) As Boolean
  overload: GTA.World.GetGroundHeightAndNormal*
  nameWithType.vb: World.GetGroundHeightAndNormal(Vector3, Single, Vector3)
  fullName.vb: GTA.World.GetGroundHeightAndNormal(GTA.Math.Vector3, Single, GTA.Math.Vector3)
  name.vb: GetGroundHeightAndNormal(Vector3, Single, Vector3)
- uid: GTA.World.GetGroundHeightExcludingProps(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  commentId: M:GTA.World.GetGroundHeightExcludingProps(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  id: GetGroundHeightExcludingProps(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetGroundHeightExcludingProps(Vector3, out float, GetGroundHeightMode)
  nameWithType: World.GetGroundHeightExcludingProps(Vector3, out float, GetGroundHeightMode)
  fullName: GTA.World.GetGroundHeightExcludingProps(GTA.Math.Vector3, out float, GTA.GetGroundHeightMode)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool GetGroundHeightExcludingProps(Vector3 position, out float height, GetGroundHeightMode mode = GetGroundHeightMode.Normal)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: height
      type: System.Single
    - id: mode
      type: GTA.GetGroundHeightMode
    return:
      type: System.Boolean
    content.vb: Public Shared Function GetGroundHeightExcludingProps(position As Vector3, height As Single, mode As GetGroundHeightMode = GetGroundHeightMode.Normal) As Boolean
  overload: GTA.World.GetGroundHeightExcludingProps*
  nameWithType.vb: World.GetGroundHeightExcludingProps(Vector3, Single, GetGroundHeightMode)
  fullName.vb: GTA.World.GetGroundHeightExcludingProps(GTA.Math.Vector3, Single, GTA.GetGroundHeightMode)
  name.vb: GetGroundHeightExcludingProps(Vector3, Single, GetGroundHeightMode)
- uid: GTA.World.GetApproxHeightForPoint(GTA.Math.Vector2)
  commentId: M:GTA.World.GetApproxHeightForPoint(GTA.Math.Vector2)
  id: GetApproxHeightForPoint(GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetApproxHeightForPoint(Vector2)
  nameWithType: World.GetApproxHeightForPoint(Vector2)
  fullName: GTA.World.GetApproxHeightForPoint(GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float GetApproxHeightForPoint(Vector2 position)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    return:
      type: System.Single
    content.vb: Public Shared Function GetApproxHeightForPoint(position As Vector2) As Single
  overload: GTA.World.GetApproxHeightForPoint*
- uid: GTA.World.GetApproxHeightForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  commentId: M:GTA.World.GetApproxHeightForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  id: GetApproxHeightForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetApproxHeightForArea(Vector2, Vector2)
  nameWithType: World.GetApproxHeightForArea(Vector2, Vector2)
  fullName: GTA.World.GetApproxHeightForArea(GTA.Math.Vector2, GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float GetApproxHeightForArea(Vector2 minPosition, Vector2 maxPosition)
    parameters:
    - id: minPosition
      type: GTA.Math.Vector2
    - id: maxPosition
      type: GTA.Math.Vector2
    return:
      type: System.Single
    content.vb: Public Shared Function GetApproxHeightForArea(minPosition As Vector2, maxPosition As Vector2) As Single
  overload: GTA.World.GetApproxHeightForArea*
- uid: GTA.World.GetApproxFloorForPoint(GTA.Math.Vector2)
  commentId: M:GTA.World.GetApproxFloorForPoint(GTA.Math.Vector2)
  id: GetApproxFloorForPoint(GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetApproxFloorForPoint(Vector2)
  nameWithType: World.GetApproxFloorForPoint(Vector2)
  fullName: GTA.World.GetApproxFloorForPoint(GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float GetApproxFloorForPoint(Vector2 position)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    return:
      type: System.Single
    content.vb: Public Shared Function GetApproxFloorForPoint(position As Vector2) As Single
  overload: GTA.World.GetApproxFloorForPoint*
- uid: GTA.World.GetApproxFloorForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  commentId: M:GTA.World.GetApproxFloorForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  id: GetApproxFloorForArea(GTA.Math.Vector2,GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetApproxFloorForArea(Vector2, Vector2)
  nameWithType: World.GetApproxFloorForArea(Vector2, Vector2)
  fullName: GTA.World.GetApproxFloorForArea(GTA.Math.Vector2, GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float GetApproxFloorForArea(Vector2 minPosition, Vector2 maxPosition)
    parameters:
    - id: minPosition
      type: GTA.Math.Vector2
    - id: maxPosition
      type: GTA.Math.Vector2
    return:
      type: System.Single
    content.vb: Public Shared Function GetApproxFloorForArea(minPosition As Vector2, maxPosition As Vector2) As Single
  overload: GTA.World.GetApproxFloorForArea*
- uid: GTA.World.GetSafePositionForPed(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetSafePositionFlags)
  commentId: M:GTA.World.GetSafePositionForPed(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetSafePositionFlags)
  id: GetSafePositionForPed(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetSafePositionFlags)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetSafePositionForPed(Vector3, out Vector3, GetSafePositionFlags)
  nameWithType: World.GetSafePositionForPed(Vector3, out Vector3, GetSafePositionFlags)
  fullName: GTA.World.GetSafePositionForPed(GTA.Math.Vector3, out GTA.Math.Vector3, GTA.GetSafePositionFlags)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool GetSafePositionForPed(Vector3 position, out Vector3 safePosition, GetSafePositionFlags flags = GetSafePositionFlags.Default)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: safePosition
      type: GTA.Math.Vector3
    - id: flags
      type: GTA.GetSafePositionFlags
    return:
      type: System.Boolean
    content.vb: Public Shared Function GetSafePositionForPed(position As Vector3, safePosition As Vector3, flags As GetSafePositionFlags = GetSafePositionFlags.Default) As Boolean
  overload: GTA.World.GetSafePositionForPed*
  nameWithType.vb: World.GetSafePositionForPed(Vector3, Vector3, GetSafePositionFlags)
  fullName.vb: GTA.World.GetSafePositionForPed(GTA.Math.Vector3, GTA.Math.Vector3, GTA.GetSafePositionFlags)
  name.vb: GetSafePositionForPed(Vector3, Vector3, GetSafePositionFlags)
- uid: GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2,System.Boolean)
  commentId: M:GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2,System.Boolean)
  id: GetNextPositionOnStreet(GTA.Math.Vector2,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNextPositionOnStreet(Vector2, bool)
  nameWithType: World.GetNextPositionOnStreet(Vector2, bool)
  fullName: GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vector3 GetNextPositionOnStreet(Vector2 position, bool unoccupied = false)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    - id: unoccupied
      type: System.Boolean
    return:
      type: GTA.Math.Vector3
    content.vb: Public Shared Function GetNextPositionOnStreet(position As Vector2, unoccupied As Boolean = False) As Vector3
  overload: GTA.World.GetNextPositionOnStreet*
  nameWithType.vb: World.GetNextPositionOnStreet(Vector2, Boolean)
  fullName.vb: GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2, Boolean)
  name.vb: GetNextPositionOnStreet(Vector2, Boolean)
- uid: GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3,System.Boolean)
  commentId: M:GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3,System.Boolean)
  id: GetNextPositionOnStreet(GTA.Math.Vector3,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNextPositionOnStreet(Vector3, bool)
  nameWithType: World.GetNextPositionOnStreet(Vector3, bool)
  fullName: GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vector3 GetNextPositionOnStreet(Vector3 position, bool unoccupied = false)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: unoccupied
      type: System.Boolean
    return:
      type: GTA.Math.Vector3
    content.vb: Public Shared Function GetNextPositionOnStreet(position As Vector3, unoccupied As Boolean = False) As Vector3
  overload: GTA.World.GetNextPositionOnStreet*
  nameWithType.vb: World.GetNextPositionOnStreet(Vector3, Boolean)
  fullName.vb: GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3, Boolean)
  name.vb: GetNextPositionOnStreet(Vector3, Boolean)
- uid: GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector2)
  commentId: M:GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector2)
  id: GetNextPositionOnSidewalk(GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNextPositionOnSidewalk(Vector2)
  nameWithType: World.GetNextPositionOnSidewalk(Vector2)
  fullName: GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vector3 GetNextPositionOnSidewalk(Vector2 position)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    return:
      type: GTA.Math.Vector3
    content.vb: Public Shared Function GetNextPositionOnSidewalk(position As Vector2) As Vector3
  overload: GTA.World.GetNextPositionOnSidewalk*
- uid: GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector3)
  commentId: M:GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector3)
  id: GetNextPositionOnSidewalk(GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetNextPositionOnSidewalk(Vector3)
  nameWithType: World.GetNextPositionOnSidewalk(Vector3)
  fullName: GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vector3 GetNextPositionOnSidewalk(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    return:
      type: GTA.Math.Vector3
    content.vb: Public Shared Function GetNextPositionOnSidewalk(position As Vector3) As Vector3
  overload: GTA.World.GetNextPositionOnSidewalk*
- uid: GTA.World.GetPositionOnRoadside(GTA.Math.Vector3,GTA.Direction,GTA.Math.Vector3@)
  commentId: M:GTA.World.GetPositionOnRoadside(GTA.Math.Vector3,GTA.Direction,GTA.Math.Vector3@)
  id: GetPositionOnRoadside(GTA.Math.Vector3,GTA.Direction,GTA.Math.Vector3@)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetPositionOnRoadside(Vector3, Direction, out Vector3)
  nameWithType: World.GetPositionOnRoadside(Vector3, Direction, out Vector3)
  fullName: GTA.World.GetPositionOnRoadside(GTA.Math.Vector3, GTA.Direction, out GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool GetPositionOnRoadside(Vector3 position, Direction direction, out Vector3 output)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: direction
      type: GTA.Direction
    - id: output
      type: GTA.Math.Vector3
    return:
      type: System.Boolean
    content.vb: Public Shared Function GetPositionOnRoadside(position As Vector3, direction As Direction, output As Vector3) As Boolean
  overload: GTA.World.GetPositionOnRoadside*
  nameWithType.vb: World.GetPositionOnRoadside(Vector3, Direction, Vector3)
  fullName.vb: GTA.World.GetPositionOnRoadside(GTA.Math.Vector3, GTA.Direction, GTA.Math.Vector3)
  name.vb: GetPositionOnRoadside(Vector3, Direction, Vector3)
- uid: GTA.World.GetStreetName(GTA.Math.Vector2)
  commentId: M:GTA.World.GetStreetName(GTA.Math.Vector2)
  id: GetStreetName(GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetStreetName(Vector2)
  nameWithType: World.GetStreetName(Vector2)
  fullName: GTA.World.GetStreetName(GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetStreetName(Vector2 position)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    return:
      type: System.String
    content.vb: Public Shared Function GetStreetName(position As Vector2) As String
  overload: GTA.World.GetStreetName*
- uid: GTA.World.GetStreetName(GTA.Math.Vector3)
  commentId: M:GTA.World.GetStreetName(GTA.Math.Vector3)
  id: GetStreetName(GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetStreetName(Vector3)
  nameWithType: World.GetStreetName(Vector3)
  fullName: GTA.World.GetStreetName(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetStreetName(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    return:
      type: System.String
    content.vb: Public Shared Function GetStreetName(position As Vector3) As String
  overload: GTA.World.GetStreetName*
- uid: GTA.World.GetStreetName(GTA.Math.Vector3,System.String@)
  commentId: M:GTA.World.GetStreetName(GTA.Math.Vector3,System.String@)
  id: GetStreetName(GTA.Math.Vector3,System.String@)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetStreetName(Vector3, out string)
  nameWithType: World.GetStreetName(Vector3, out string)
  fullName: GTA.World.GetStreetName(GTA.Math.Vector3, out string)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetStreetName(Vector3 position, out string crossingRoadName)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    - id: crossingRoadName
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetStreetName(position As Vector3, crossingRoadName As String) As String
  overload: GTA.World.GetStreetName*
  nameWithType.vb: World.GetStreetName(Vector3, String)
  fullName.vb: GTA.World.GetStreetName(GTA.Math.Vector3, String)
  name.vb: GetStreetName(Vector3, String)
- uid: GTA.World.GetZoneDisplayName(GTA.Math.Vector2)
  commentId: M:GTA.World.GetZoneDisplayName(GTA.Math.Vector2)
  id: GetZoneDisplayName(GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetZoneDisplayName(Vector2)
  nameWithType: World.GetZoneDisplayName(Vector2)
  fullName: GTA.World.GetZoneDisplayName(GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetZoneDisplayName(Vector2 position)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    return:
      type: System.String
    content.vb: Public Shared Function GetZoneDisplayName(position As Vector2) As String
  overload: GTA.World.GetZoneDisplayName*
- uid: GTA.World.GetZoneDisplayName(GTA.Math.Vector3)
  commentId: M:GTA.World.GetZoneDisplayName(GTA.Math.Vector3)
  id: GetZoneDisplayName(GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetZoneDisplayName(Vector3)
  nameWithType: World.GetZoneDisplayName(Vector3)
  fullName: GTA.World.GetZoneDisplayName(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetZoneDisplayName(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    return:
      type: System.String
    content.vb: Public Shared Function GetZoneDisplayName(position As Vector3) As String
  overload: GTA.World.GetZoneDisplayName*
- uid: GTA.World.GetZoneLocalizedName(GTA.Math.Vector2)
  commentId: M:GTA.World.GetZoneLocalizedName(GTA.Math.Vector2)
  id: GetZoneLocalizedName(GTA.Math.Vector2)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetZoneLocalizedName(Vector2)
  nameWithType: World.GetZoneLocalizedName(Vector2)
  fullName: GTA.World.GetZoneLocalizedName(GTA.Math.Vector2)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetZoneLocalizedName(Vector2 position)
    parameters:
    - id: position
      type: GTA.Math.Vector2
    return:
      type: System.String
    content.vb: Public Shared Function GetZoneLocalizedName(position As Vector2) As String
  overload: GTA.World.GetZoneLocalizedName*
- uid: GTA.World.GetZoneLocalizedName(GTA.Math.Vector3)
  commentId: M:GTA.World.GetZoneLocalizedName(GTA.Math.Vector3)
  id: GetZoneLocalizedName(GTA.Math.Vector3)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GetZoneLocalizedName(Vector3)
  nameWithType: World.GetZoneLocalizedName(Vector3)
  fullName: GTA.World.GetZoneLocalizedName(GTA.Math.Vector3)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static string GetZoneLocalizedName(Vector3 position)
    parameters:
    - id: position
      type: GTA.Math.Vector3
    return:
      type: System.String
    content.vb: Public Shared Function GetZoneLocalizedName(position As Vector3) As String
  overload: GTA.World.GetZoneLocalizedName*
- uid: GTA.World.IsPointInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  commentId: M:GTA.World.IsPointInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  id: IsPointInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: IsPointInAngledArea(Vector3, Vector3, Vector3, float, bool)
  nameWithType: World.IsPointInAngledArea(Vector3, Vector3, Vector3, float, bool)
  fullName: GTA.World.IsPointInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, float, bool)
  type: Method
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool IsPointInAngledArea(Vector3 point, Vector3 originEdge, Vector3 extentEdge, float width, bool includeZAxis = true)
    parameters:
    - id: point
      type: GTA.Math.Vector3
    - id: originEdge
      type: GTA.Math.Vector3
    - id: extentEdge
      type: GTA.Math.Vector3
    - id: width
      type: System.Single
    - id: includeZAxis
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPointInAngledArea(point As Vector3, originEdge As Vector3, extentEdge As Vector3, width As Single, includeZAxis As Boolean = True) As Boolean
  overload: GTA.World.IsPointInAngledArea*
  nameWithType.vb: World.IsPointInAngledArea(Vector3, Vector3, Vector3, Single, Boolean)
  fullName.vb: GTA.World.IsPointInAngledArea(GTA.Math.Vector3, GTA.Math.Vector3, GTA.Math.Vector3, Single, Boolean)
  name.vb: IsPointInAngledArea(Vector3, Vector3, Vector3, Single, Boolean)
- uid: GTA.World.IsClockPaused
  commentId: P:GTA.World.IsClockPaused
  id: IsClockPaused
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: IsClockPaused
  nameWithType: World.IsClockPaused
  fullName: GTA.World.IsClockPaused
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("World.IsClockPaused is obsolete, use GTA.Chrono.IsPaused instead.")]

      public static bool IsClockPaused { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Obsolete("World.IsClockPaused is obsolete, use GTA.Chrono.IsPaused instead.")>

      Public Shared Property IsClockPaused As Boolean
  overload: GTA.World.IsClockPaused*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: World.IsClockPaused is obsolete, use GTA.Chrono.IsPaused instead.
- uid: GTA.World.CurrentTimeOfDay
  commentId: P:GTA.World.CurrentTimeOfDay
  id: CurrentTimeOfDay
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: CurrentTimeOfDay
  nameWithType: World.CurrentTimeOfDay
  fullName: GTA.World.CurrentTimeOfDay
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("World.CurrentTimeOfDay is obsolete, use GTA.Chrono.GameClock.Today instead.")]

      public static TimeSpan CurrentTimeOfDay { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <Obsolete("World.CurrentTimeOfDay is obsolete, use GTA.Chrono.GameClock.Today instead.")>

      Public Shared Property CurrentTimeOfDay As TimeSpan
  overload: GTA.World.CurrentTimeOfDay*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: World.CurrentTimeOfDay is obsolete, use GTA.Chrono.GameClock.Today instead.
- uid: GTA.World.MillisecondsPerGameMinute
  commentId: P:GTA.World.MillisecondsPerGameMinute
  id: MillisecondsPerGameMinute
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: MillisecondsPerGameMinute
  nameWithType: World.MillisecondsPerGameMinute
  fullName: GTA.World.MillisecondsPerGameMinute
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: >-
      [Obsolete("World.MillisecondsPerGameMinute is obsolete, use GTA.Chrono.GameClock.MillisecondsPerGameMinute instead.")]

      public static int MillisecondsPerGameMinute { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("World.MillisecondsPerGameMinute is obsolete, use GTA.Chrono.GameClock.MillisecondsPerGameMinute instead.")>

      Public Shared Property MillisecondsPerGameMinute As Integer
  overload: GTA.World.MillisecondsPerGameMinute*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: World.MillisecondsPerGameMinute is obsolete, use GTA.Chrono.GameClock.MillisecondsPerGameMinute instead.
- uid: GTA.World.Blackout
  commentId: P:GTA.World.Blackout
  id: Blackout
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: Blackout
  nameWithType: World.Blackout
  fullName: GTA.World.Blackout
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static bool Blackout { set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared WriteOnly Property Blackout As Boolean
  overload: GTA.World.Blackout*
- uid: GTA.World.Weather
  commentId: P:GTA.World.Weather
  id: Weather
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: Weather
  nameWithType: World.Weather
  fullName: GTA.World.Weather
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Weather Weather { get; set; }
    parameters: []
    return:
      type: GTA.Weather
    content.vb: Public Shared Property Weather As Weather
  overload: GTA.World.Weather*
- uid: GTA.World.NextWeather
  commentId: P:GTA.World.NextWeather
  id: NextWeather
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: NextWeather
  nameWithType: World.NextWeather
  fullName: GTA.World.NextWeather
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Weather NextWeather { get; set; }
    parameters: []
    return:
      type: GTA.Weather
    content.vb: Public Shared Property NextWeather As Weather
  overload: GTA.World.NextWeather*
- uid: GTA.World.GravityLevel
  commentId: P:GTA.World.GravityLevel
  id: GravityLevel
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: GravityLevel
  nameWithType: World.GravityLevel
  fullName: GTA.World.GravityLevel
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float GravityLevel { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared Property GravityLevel As Single
  overload: GTA.World.GravityLevel*
- uid: GTA.World.RainLevel
  commentId: P:GTA.World.RainLevel
  id: RainLevel
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: RainLevel
  nameWithType: World.RainLevel
  fullName: GTA.World.RainLevel
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float RainLevel { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared ReadOnly Property RainLevel As Single
  overload: GTA.World.RainLevel*
- uid: GTA.World.RainLevelOverride
  commentId: P:GTA.World.RainLevelOverride
  id: RainLevelOverride
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: RainLevelOverride
  nameWithType: World.RainLevelOverride
  fullName: GTA.World.RainLevelOverride
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float RainLevelOverride { set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared WriteOnly Property RainLevelOverride As Single
  overload: GTA.World.RainLevelOverride*
- uid: GTA.World.SnowLevel
  commentId: P:GTA.World.SnowLevel
  id: SnowLevel
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: SnowLevel
  nameWithType: World.SnowLevel
  fullName: GTA.World.SnowLevel
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float SnowLevel { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared ReadOnly Property SnowLevel As Single
  overload: GTA.World.SnowLevel*
- uid: GTA.World.SnowLevelOverride
  commentId: P:GTA.World.SnowLevelOverride
  id: SnowLevelOverride
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: SnowLevelOverride
  nameWithType: World.SnowLevelOverride
  fullName: GTA.World.SnowLevelOverride
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float SnowLevelOverride { set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared WriteOnly Property SnowLevelOverride As Single
  overload: GTA.World.SnowLevelOverride*
- uid: GTA.World.WindSpeed
  commentId: P:GTA.World.WindSpeed
  id: WindSpeed
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: WindSpeed
  nameWithType: World.WindSpeed
  fullName: GTA.World.WindSpeed
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float WindSpeed { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared ReadOnly Property WindSpeed As Single
  overload: GTA.World.WindSpeed*
- uid: GTA.World.WindSpeedOverride
  commentId: P:GTA.World.WindSpeedOverride
  id: WindSpeedOverride
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: WindSpeedOverride
  nameWithType: World.WindSpeedOverride
  fullName: GTA.World.WindSpeedOverride
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static float WindSpeedOverride { set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Shared WriteOnly Property WindSpeedOverride As Single
  overload: GTA.World.WindSpeedOverride*
- uid: GTA.World.WindDirection
  commentId: P:GTA.World.WindDirection
  id: WindDirection
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: WindDirection
  nameWithType: World.WindDirection
  fullName: GTA.World.WindDirection
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vector3 WindDirection { get; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Shared ReadOnly Property WindDirection As Vector3
  overload: GTA.World.WindDirection*
- uid: GTA.World.WaypointBlip
  commentId: P:GTA.World.WaypointBlip
  id: WaypointBlip
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: WaypointBlip
  nameWithType: World.WaypointBlip
  fullName: GTA.World.WaypointBlip
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Blip WaypointBlip { get; }
    parameters: []
    return:
      type: GTA.Blip
    content.vb: Public Shared ReadOnly Property WaypointBlip As Blip
  overload: GTA.World.WaypointBlip*
- uid: GTA.World.WaypointPosition
  commentId: P:GTA.World.WaypointPosition
  id: WaypointPosition
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: WaypointPosition
  nameWithType: World.WaypointPosition
  fullName: GTA.World.WaypointPosition
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static Vector3 WaypointPosition { get; set; }
    parameters: []
    return:
      type: GTA.Math.Vector3
    content.vb: Public Shared Property WaypointPosition As Vector3
  overload: GTA.World.WaypointPosition*
- uid: GTA.World.VehicleCount
  commentId: P:GTA.World.VehicleCount
  id: VehicleCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: VehicleCount
  nameWithType: World.VehicleCount
  fullName: GTA.World.VehicleCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int VehicleCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property VehicleCount As Integer
  overload: GTA.World.VehicleCount*
- uid: GTA.World.PedCount
  commentId: P:GTA.World.PedCount
  id: PedCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PedCount
  nameWithType: World.PedCount
  fullName: GTA.World.PedCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int PedCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property PedCount As Integer
  overload: GTA.World.PedCount*
- uid: GTA.World.PropCount
  commentId: P:GTA.World.PropCount
  id: PropCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PropCount
  nameWithType: World.PropCount
  fullName: GTA.World.PropCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int PropCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property PropCount As Integer
  overload: GTA.World.PropCount*
- uid: GTA.World.PickupObjectCount
  commentId: P:GTA.World.PickupObjectCount
  id: PickupObjectCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PickupObjectCount
  nameWithType: World.PickupObjectCount
  fullName: GTA.World.PickupObjectCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int PickupObjectCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property PickupObjectCount As Integer
  overload: GTA.World.PickupObjectCount*
- uid: GTA.World.BuildingCount
  commentId: P:GTA.World.BuildingCount
  id: BuildingCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: BuildingCount
  nameWithType: World.BuildingCount
  fullName: GTA.World.BuildingCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int BuildingCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property BuildingCount As Integer
  overload: GTA.World.BuildingCount*
- uid: GTA.World.AnimatedBuildingCount
  commentId: P:GTA.World.AnimatedBuildingCount
  id: AnimatedBuildingCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: AnimatedBuildingCount
  nameWithType: World.AnimatedBuildingCount
  fullName: GTA.World.AnimatedBuildingCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int AnimatedBuildingCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property AnimatedBuildingCount As Integer
  overload: GTA.World.AnimatedBuildingCount*
- uid: GTA.World.InteriorInstanceCount
  commentId: P:GTA.World.InteriorInstanceCount
  id: InteriorInstanceCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: InteriorInstanceCount
  nameWithType: World.InteriorInstanceCount
  fullName: GTA.World.InteriorInstanceCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int InteriorInstanceCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property InteriorInstanceCount As Integer
  overload: GTA.World.InteriorInstanceCount*
- uid: GTA.World.InteriorProxyCount
  commentId: P:GTA.World.InteriorProxyCount
  id: InteriorProxyCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: InteriorProxyCount
  nameWithType: World.InteriorProxyCount
  fullName: GTA.World.InteriorProxyCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int InteriorProxyCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property InteriorProxyCount As Integer
  overload: GTA.World.InteriorProxyCount*
- uid: GTA.World.ProjectileCount
  commentId: P:GTA.World.ProjectileCount
  id: ProjectileCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ProjectileCount
  nameWithType: World.ProjectileCount
  fullName: GTA.World.ProjectileCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int ProjectileCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property ProjectileCount As Integer
  overload: GTA.World.ProjectileCount*
- uid: GTA.World.EntityColliderCount
  commentId: P:GTA.World.EntityColliderCount
  id: EntityColliderCount
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: EntityColliderCount
  nameWithType: World.EntityColliderCount
  fullName: GTA.World.EntityColliderCount
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int EntityColliderCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property EntityColliderCount As Integer
  overload: GTA.World.EntityColliderCount*
- uid: GTA.World.VehicleCapacity
  commentId: P:GTA.World.VehicleCapacity
  id: VehicleCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: VehicleCapacity
  nameWithType: World.VehicleCapacity
  fullName: GTA.World.VehicleCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int VehicleCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property VehicleCapacity As Integer
  overload: GTA.World.VehicleCapacity*
- uid: GTA.World.PedCapacity
  commentId: P:GTA.World.PedCapacity
  id: PedCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PedCapacity
  nameWithType: World.PedCapacity
  fullName: GTA.World.PedCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int PedCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property PedCapacity As Integer
  overload: GTA.World.PedCapacity*
- uid: GTA.World.PropCapacity
  commentId: P:GTA.World.PropCapacity
  id: PropCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PropCapacity
  nameWithType: World.PropCapacity
  fullName: GTA.World.PropCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int PropCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property PropCapacity As Integer
  overload: GTA.World.PropCapacity*
- uid: GTA.World.PickupObjectCapacity
  commentId: P:GTA.World.PickupObjectCapacity
  id: PickupObjectCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: PickupObjectCapacity
  nameWithType: World.PickupObjectCapacity
  fullName: GTA.World.PickupObjectCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int PickupObjectCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property PickupObjectCapacity As Integer
  overload: GTA.World.PickupObjectCapacity*
- uid: GTA.World.ProjectileCapacity
  commentId: P:GTA.World.ProjectileCapacity
  id: ProjectileCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: ProjectileCapacity
  nameWithType: World.ProjectileCapacity
  fullName: GTA.World.ProjectileCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int ProjectileCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property ProjectileCapacity As Integer
  overload: GTA.World.ProjectileCapacity*
- uid: GTA.World.BuildingCapacity
  commentId: P:GTA.World.BuildingCapacity
  id: BuildingCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: BuildingCapacity
  nameWithType: World.BuildingCapacity
  fullName: GTA.World.BuildingCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int BuildingCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property BuildingCapacity As Integer
  overload: GTA.World.BuildingCapacity*
- uid: GTA.World.AnimatedBuildingCapacity
  commentId: P:GTA.World.AnimatedBuildingCapacity
  id: AnimatedBuildingCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: AnimatedBuildingCapacity
  nameWithType: World.AnimatedBuildingCapacity
  fullName: GTA.World.AnimatedBuildingCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int AnimatedBuildingCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property AnimatedBuildingCapacity As Integer
  overload: GTA.World.AnimatedBuildingCapacity*
- uid: GTA.World.InteriorInstanceCapacity
  commentId: P:GTA.World.InteriorInstanceCapacity
  id: InteriorInstanceCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: InteriorInstanceCapacity
  nameWithType: World.InteriorInstanceCapacity
  fullName: GTA.World.InteriorInstanceCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int InteriorInstanceCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property InteriorInstanceCapacity As Integer
  overload: GTA.World.InteriorInstanceCapacity*
- uid: GTA.World.InteriorProxyCapacity
  commentId: P:GTA.World.InteriorProxyCapacity
  id: InteriorProxyCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: InteriorProxyCapacity
  nameWithType: World.InteriorProxyCapacity
  fullName: GTA.World.InteriorProxyCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int InteriorProxyCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property InteriorProxyCapacity As Integer
  overload: GTA.World.InteriorProxyCapacity*
- uid: GTA.World.EntityColliderCapacity
  commentId: P:GTA.World.EntityColliderCapacity
  id: EntityColliderCapacity
  parent: GTA.World
  langs:
  - csharp
  - vb
  name: EntityColliderCapacity
  nameWithType: World.EntityColliderCapacity
  fullName: GTA.World.EntityColliderCapacity
  type: Property
  assemblies:
  - ScriptHookVDotNet3
  namespace: GTA
  syntax:
    content: public static int EntityColliderCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property EntityColliderCapacity As Integer
  overload: GTA.World.EntityColliderCapacity*
references:
- uid: GTA
  commentId: N:GTA
  isExternal: true
  href: GTA.html
  name: GTA
  nameWithType: GTA
  fullName: GTA
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: GTA.World.PauseClock*
  commentId: Overload:GTA.World.PauseClock
  isExternal: true
  href: GTA.World.html#GTA_World_PauseClock_System_Boolean_
  name: PauseClock
  nameWithType: World.PauseClock
  fullName: GTA.World.PauseClock
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: GTA.World.TransitionToWeather*
  commentId: Overload:GTA.World.TransitionToWeather
  isExternal: true
  href: GTA.World.html#GTA_World_TransitionToWeather_GTA_Weather_System_Single_
  name: TransitionToWeather
  nameWithType: World.TransitionToWeather
  fullName: GTA.World.TransitionToWeather
- uid: GTA.Weather
  commentId: T:GTA.Weather
  parent: GTA
  isExternal: true
  href: GTA.Weather.html
  name: Weather
  nameWithType: Weather
  fullName: GTA.Weather
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: GTA.World.SetRandomWeather*
  commentId: Overload:GTA.World.SetRandomWeather
  isExternal: true
  href: GTA.World.html#GTA_World_SetRandomWeather
  name: SetRandomWeather
  nameWithType: World.SetRandomWeather
  fullName: GTA.World.SetRandomWeather
- uid: GTA.World.ForceLightningFlash*
  commentId: Overload:GTA.World.ForceLightningFlash
  isExternal: true
  href: GTA.World.html#GTA_World_ForceLightningFlash
  name: ForceLightningFlash
  nameWithType: World.ForceLightningFlash
  fullName: GTA.World.ForceLightningFlash
- uid: GTA.World.SetWindSpeedOverrideBySpeed*
  commentId: Overload:GTA.World.SetWindSpeedOverrideBySpeed
  isExternal: true
  href: GTA.World.html#GTA_World_SetWindSpeedOverrideBySpeed_System_Single_
  name: SetWindSpeedOverrideBySpeed
  nameWithType: World.SetWindSpeedOverrideBySpeed
  fullName: GTA.World.SetWindSpeedOverrideBySpeed
- uid: GTA.World.RemoveWaypoint*
  commentId: Overload:GTA.World.RemoveWaypoint
  isExternal: true
  href: GTA.World.html#GTA_World_RemoveWaypoint
  name: RemoveWaypoint
  nameWithType: World.RemoveWaypoint
  fullName: GTA.World.RemoveWaypoint
- uid: GTA.World.GetAllBlips*
  commentId: Overload:GTA.World.GetAllBlips
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllBlips_GTA_BlipSprite___
  name: GetAllBlips
  nameWithType: World.GetAllBlips
  fullName: GTA.World.GetAllBlips
- uid: GTA.BlipSprite[]
  isExternal: true
  href: GTA.BlipSprite.html
  name: BlipSprite[]
  nameWithType: BlipSprite[]
  fullName: GTA.BlipSprite[]
  nameWithType.vb: BlipSprite()
  fullName.vb: GTA.BlipSprite()
  name.vb: BlipSprite()
  spec.csharp:
  - uid: GTA.BlipSprite
    name: BlipSprite
    isExternal: true
    href: GTA.BlipSprite.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.BlipSprite
    name: BlipSprite
    isExternal: true
    href: GTA.BlipSprite.html
  - name: (
  - name: )
- uid: GTA.Blip[]
  isExternal: true
  href: GTA.Blip.html
  name: Blip[]
  nameWithType: Blip[]
  fullName: GTA.Blip[]
  nameWithType.vb: Blip()
  fullName.vb: GTA.Blip()
  name.vb: Blip()
  spec.csharp:
  - uid: GTA.Blip
    name: Blip
    isExternal: true
    href: GTA.Blip.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Blip
    name: Blip
    isExternal: true
    href: GTA.Blip.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyBlips*
  commentId: Overload:GTA.World.GetNearbyBlips
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyBlips_GTA_Math_Vector3_System_Single_GTA_BlipSprite___
  name: GetNearbyBlips
  nameWithType: World.GetNearbyBlips
  fullName: GTA.World.GetNearbyBlips
- uid: GTA.Math.Vector3
  commentId: T:GTA.Math.Vector3
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Vector3.html
  name: Vector3
  nameWithType: Vector3
  fullName: GTA.Math.Vector3
- uid: GTA.Math
  commentId: N:GTA.Math
  isExternal: true
  href: GTA.html
  name: GTA.Math
  nameWithType: GTA.Math
  fullName: GTA.Math
  spec.csharp:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
  spec.vb:
  - uid: GTA
    name: GTA
    isExternal: true
    href: GTA.html
  - name: .
  - uid: GTA.Math
    name: Math
    isExternal: true
    href: GTA.Math.html
- uid: GTA.World.CreateBlip*
  commentId: Overload:GTA.World.CreateBlip
  isExternal: true
  href: GTA.World.html#GTA_World_CreateBlip_GTA_Math_Vector3_
  name: CreateBlip
  nameWithType: World.CreateBlip
  fullName: GTA.World.CreateBlip
- uid: GTA.Blip
  commentId: T:GTA.Blip
  parent: GTA
  isExternal: true
  href: GTA.Blip.html
  name: Blip
  nameWithType: Blip
  fullName: GTA.Blip
- uid: GTA.World.GetClosestPed*
  commentId: Overload:GTA.World.GetClosestPed
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestPed_GTA_Math_Vector3_System_Single_GTA_Model___
  name: GetClosestPed
  nameWithType: World.GetClosestPed
  fullName: GTA.World.GetClosestPed
- uid: GTA.Model[]
  isExternal: true
  href: GTA.Model.html
  name: Model[]
  nameWithType: Model[]
  fullName: GTA.Model[]
  nameWithType.vb: Model()
  fullName.vb: GTA.Model()
  name.vb: Model()
  spec.csharp:
  - uid: GTA.Model
    name: Model
    isExternal: true
    href: GTA.Model.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Model
    name: Model
    isExternal: true
    href: GTA.Model.html
  - name: (
  - name: )
- uid: GTA.Ped
  commentId: T:GTA.Ped
  parent: GTA
  isExternal: true
  href: GTA.Ped.html
  name: Ped
  nameWithType: Ped
  fullName: GTA.Ped
- uid: GTA.World.GetAllPeds*
  commentId: Overload:GTA.World.GetAllPeds
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllPeds_GTA_Model___
  name: GetAllPeds
  nameWithType: World.GetAllPeds
  fullName: GTA.World.GetAllPeds
- uid: GTA.Ped[]
  isExternal: true
  href: GTA.Ped.html
  name: Ped[]
  nameWithType: Ped[]
  fullName: GTA.Ped[]
  nameWithType.vb: Ped()
  fullName.vb: GTA.Ped()
  name.vb: Ped()
  spec.csharp:
  - uid: GTA.Ped
    name: Ped
    isExternal: true
    href: GTA.Ped.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Ped
    name: Ped
    isExternal: true
    href: GTA.Ped.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyPeds*
  commentId: Overload:GTA.World.GetNearbyPeds
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyPeds_GTA_Ped_System_Single_GTA_Model___
  name: GetNearbyPeds
  nameWithType: World.GetNearbyPeds
  fullName: GTA.World.GetNearbyPeds
- uid: GTA.World.GetClosestVehicle*
  commentId: Overload:GTA.World.GetClosestVehicle
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestVehicle_GTA_Math_Vector3_System_Single_GTA_Model___
  name: GetClosestVehicle
  nameWithType: World.GetClosestVehicle
  fullName: GTA.World.GetClosestVehicle
- uid: GTA.Vehicle
  commentId: T:GTA.Vehicle
  parent: GTA
  isExternal: true
  href: GTA.Vehicle.html
  name: Vehicle
  nameWithType: Vehicle
  fullName: GTA.Vehicle
- uid: GTA.World.GetAllVehicles*
  commentId: Overload:GTA.World.GetAllVehicles
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllVehicles_GTA_Model___
  name: GetAllVehicles
  nameWithType: World.GetAllVehicles
  fullName: GTA.World.GetAllVehicles
- uid: GTA.Vehicle[]
  isExternal: true
  href: GTA.Vehicle.html
  name: Vehicle[]
  nameWithType: Vehicle[]
  fullName: GTA.Vehicle[]
  nameWithType.vb: Vehicle()
  fullName.vb: GTA.Vehicle()
  name.vb: Vehicle()
  spec.csharp:
  - uid: GTA.Vehicle
    name: Vehicle
    isExternal: true
    href: GTA.Vehicle.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Vehicle
    name: Vehicle
    isExternal: true
    href: GTA.Vehicle.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyVehicles*
  commentId: Overload:GTA.World.GetNearbyVehicles
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyVehicles_GTA_Ped_System_Single_GTA_Model___
  name: GetNearbyVehicles
  nameWithType: World.GetNearbyVehicles
  fullName: GTA.World.GetNearbyVehicles
- uid: GTA.World.GetClosestProp*
  commentId: Overload:GTA.World.GetClosestProp
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestProp_GTA_Math_Vector3_System_Single_GTA_Model___
  name: GetClosestProp
  nameWithType: World.GetClosestProp
  fullName: GTA.World.GetClosestProp
- uid: GTA.Prop
  commentId: T:GTA.Prop
  parent: GTA
  isExternal: true
  href: GTA.Prop.html
  name: Prop
  nameWithType: Prop
  fullName: GTA.Prop
- uid: GTA.World.GetAllProps*
  commentId: Overload:GTA.World.GetAllProps
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllProps_GTA_Model___
  name: GetAllProps
  nameWithType: World.GetAllProps
  fullName: GTA.World.GetAllProps
- uid: GTA.Prop[]
  isExternal: true
  href: GTA.Prop.html
  name: Prop[]
  nameWithType: Prop[]
  fullName: GTA.Prop[]
  nameWithType.vb: Prop()
  fullName.vb: GTA.Prop()
  name.vb: Prop()
  spec.csharp:
  - uid: GTA.Prop
    name: Prop
    isExternal: true
    href: GTA.Prop.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Prop
    name: Prop
    isExternal: true
    href: GTA.Prop.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyProps*
  commentId: Overload:GTA.World.GetNearbyProps
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyProps_GTA_Math_Vector3_System_Single_GTA_Model___
  name: GetNearbyProps
  nameWithType: World.GetNearbyProps
  fullName: GTA.World.GetNearbyProps
- uid: GTA.World.GetClosestPickupObject*
  commentId: Overload:GTA.World.GetClosestPickupObject
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestPickupObject_GTA_Math_Vector3_System_Single_
  name: GetClosestPickupObject
  nameWithType: World.GetClosestPickupObject
  fullName: GTA.World.GetClosestPickupObject
- uid: GTA.World.GetAllPickupObjects*
  commentId: Overload:GTA.World.GetAllPickupObjects
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllPickupObjects
  name: GetAllPickupObjects
  nameWithType: World.GetAllPickupObjects
  fullName: GTA.World.GetAllPickupObjects
- uid: GTA.World.GetNearbyPickupObjects*
  commentId: Overload:GTA.World.GetNearbyPickupObjects
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyPickupObjects_GTA_Math_Vector3_System_Single_
  name: GetNearbyPickupObjects
  nameWithType: World.GetNearbyPickupObjects
  fullName: GTA.World.GetNearbyPickupObjects
- uid: GTA.World.GetClosestProjectile*
  commentId: Overload:GTA.World.GetClosestProjectile
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestProjectile_GTA_Math_Vector3_System_Single_
  name: GetClosestProjectile
  nameWithType: World.GetClosestProjectile
  fullName: GTA.World.GetClosestProjectile
- uid: GTA.Projectile
  commentId: T:GTA.Projectile
  parent: GTA
  isExternal: true
  href: GTA.Projectile.html
  name: Projectile
  nameWithType: Projectile
  fullName: GTA.Projectile
- uid: GTA.World.GetAllProjectiles*
  commentId: Overload:GTA.World.GetAllProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllProjectiles
  name: GetAllProjectiles
  nameWithType: World.GetAllProjectiles
  fullName: GTA.World.GetAllProjectiles
- uid: GTA.Projectile[]
  isExternal: true
  href: GTA.Projectile.html
  name: Projectile[]
  nameWithType: Projectile[]
  fullName: GTA.Projectile[]
  nameWithType.vb: Projectile()
  fullName.vb: GTA.Projectile()
  name.vb: Projectile()
  spec.csharp:
  - uid: GTA.Projectile
    name: Projectile
    isExternal: true
    href: GTA.Projectile.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Projectile
    name: Projectile
    isExternal: true
    href: GTA.Projectile.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyProjectiles*
  commentId: Overload:GTA.World.GetNearbyProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyProjectiles_GTA_Math_Vector3_System_Single_
  name: GetNearbyProjectiles
  nameWithType: World.GetNearbyProjectiles
  fullName: GTA.World.GetNearbyProjectiles
- uid: GTA.World.GetClosestRocketProjectile*
  commentId: Overload:GTA.World.GetClosestRocketProjectile
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestRocketProjectile_GTA_Math_Vector3_System_Single_
  name: GetClosestRocketProjectile
  nameWithType: World.GetClosestRocketProjectile
  fullName: GTA.World.GetClosestRocketProjectile
- uid: GTA.ProjectileRocket
  commentId: T:GTA.ProjectileRocket
  parent: GTA
  isExternal: true
  href: GTA.ProjectileRocket.html
  name: ProjectileRocket
  nameWithType: ProjectileRocket
  fullName: GTA.ProjectileRocket
- uid: GTA.World.GetAllRocketProjectiles*
  commentId: Overload:GTA.World.GetAllRocketProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllRocketProjectiles
  name: GetAllRocketProjectiles
  nameWithType: World.GetAllRocketProjectiles
  fullName: GTA.World.GetAllRocketProjectiles
- uid: GTA.ProjectileRocket[]
  isExternal: true
  href: GTA.ProjectileRocket.html
  name: ProjectileRocket[]
  nameWithType: ProjectileRocket[]
  fullName: GTA.ProjectileRocket[]
  nameWithType.vb: ProjectileRocket()
  fullName.vb: GTA.ProjectileRocket()
  name.vb: ProjectileRocket()
  spec.csharp:
  - uid: GTA.ProjectileRocket
    name: ProjectileRocket
    isExternal: true
    href: GTA.ProjectileRocket.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.ProjectileRocket
    name: ProjectileRocket
    isExternal: true
    href: GTA.ProjectileRocket.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyRocketProjectiles*
  commentId: Overload:GTA.World.GetNearbyRocketProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyRocketProjectiles_GTA_Math_Vector3_System_Single_
  name: GetNearbyRocketProjectiles
  nameWithType: World.GetNearbyRocketProjectiles
  fullName: GTA.World.GetNearbyRocketProjectiles
- uid: GTA.World.GetClosestThrownProjectile*
  commentId: Overload:GTA.World.GetClosestThrownProjectile
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestThrownProjectile_GTA_Math_Vector3_System_Single_
  name: GetClosestThrownProjectile
  nameWithType: World.GetClosestThrownProjectile
  fullName: GTA.World.GetClosestThrownProjectile
- uid: GTA.ProjectileThrown
  commentId: T:GTA.ProjectileThrown
  parent: GTA
  isExternal: true
  href: GTA.ProjectileThrown.html
  name: ProjectileThrown
  nameWithType: ProjectileThrown
  fullName: GTA.ProjectileThrown
- uid: GTA.World.GetAllThrownProjectiles*
  commentId: Overload:GTA.World.GetAllThrownProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllThrownProjectiles
  name: GetAllThrownProjectiles
  nameWithType: World.GetAllThrownProjectiles
  fullName: GTA.World.GetAllThrownProjectiles
- uid: GTA.ProjectileThrown[]
  isExternal: true
  href: GTA.ProjectileThrown.html
  name: ProjectileThrown[]
  nameWithType: ProjectileThrown[]
  fullName: GTA.ProjectileThrown[]
  nameWithType.vb: ProjectileThrown()
  fullName.vb: GTA.ProjectileThrown()
  name.vb: ProjectileThrown()
  spec.csharp:
  - uid: GTA.ProjectileThrown
    name: ProjectileThrown
    isExternal: true
    href: GTA.ProjectileThrown.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.ProjectileThrown
    name: ProjectileThrown
    isExternal: true
    href: GTA.ProjectileThrown.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyThrownProjectiles*
  commentId: Overload:GTA.World.GetNearbyThrownProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyThrownProjectiles_GTA_Math_Vector3_System_Single_
  name: GetNearbyThrownProjectiles
  nameWithType: World.GetNearbyThrownProjectiles
  fullName: GTA.World.GetNearbyThrownProjectiles
- uid: GTA.World.GetAllEntities*
  commentId: Overload:GTA.World.GetAllEntities
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllEntities
  name: GetAllEntities
  nameWithType: World.GetAllEntities
  fullName: GTA.World.GetAllEntities
- uid: GTA.Entity[]
  isExternal: true
  href: GTA.Entity.html
  name: Entity[]
  nameWithType: Entity[]
  fullName: GTA.Entity[]
  nameWithType.vb: Entity()
  fullName.vb: GTA.Entity()
  name.vb: Entity()
  spec.csharp:
  - uid: GTA.Entity
    name: Entity
    isExternal: true
    href: GTA.Entity.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Entity
    name: Entity
    isExternal: true
    href: GTA.Entity.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyEntities*
  commentId: Overload:GTA.World.GetNearbyEntities
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyEntities_GTA_Math_Vector3_System_Single_
  name: GetNearbyEntities
  nameWithType: World.GetNearbyEntities
  fullName: GTA.World.GetNearbyEntities
- uid: GTA.World.GetAllBuildings*
  commentId: Overload:GTA.World.GetAllBuildings
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllBuildings
  name: GetAllBuildings
  nameWithType: World.GetAllBuildings
  fullName: GTA.World.GetAllBuildings
- uid: GTA.Building[]
  isExternal: true
  href: GTA.Building.html
  name: Building[]
  nameWithType: Building[]
  fullName: GTA.Building[]
  nameWithType.vb: Building()
  fullName.vb: GTA.Building()
  name.vb: Building()
  spec.csharp:
  - uid: GTA.Building
    name: Building
    isExternal: true
    href: GTA.Building.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Building
    name: Building
    isExternal: true
    href: GTA.Building.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyBuildings*
  commentId: Overload:GTA.World.GetNearbyBuildings
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyBuildings_GTA_Math_Vector3_System_Single_
  name: GetNearbyBuildings
  nameWithType: World.GetNearbyBuildings
  fullName: GTA.World.GetNearbyBuildings
- uid: GTA.World.GetClosestBuilding*
  commentId: Overload:GTA.World.GetClosestBuilding
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestBuilding_GTA_Math_Vector3_System_Single_
  name: GetClosestBuilding
  nameWithType: World.GetClosestBuilding
  fullName: GTA.World.GetClosestBuilding
- uid: GTA.Building
  commentId: T:GTA.Building
  parent: GTA
  isExternal: true
  href: GTA.Building.html
  name: Building
  nameWithType: Building
  fullName: GTA.Building
- uid: GTA.World.GetAllAnimatedBuildings*
  commentId: Overload:GTA.World.GetAllAnimatedBuildings
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllAnimatedBuildings
  name: GetAllAnimatedBuildings
  nameWithType: World.GetAllAnimatedBuildings
  fullName: GTA.World.GetAllAnimatedBuildings
- uid: GTA.AnimatedBuilding[]
  isExternal: true
  href: GTA.AnimatedBuilding.html
  name: AnimatedBuilding[]
  nameWithType: AnimatedBuilding[]
  fullName: GTA.AnimatedBuilding[]
  nameWithType.vb: AnimatedBuilding()
  fullName.vb: GTA.AnimatedBuilding()
  name.vb: AnimatedBuilding()
  spec.csharp:
  - uid: GTA.AnimatedBuilding
    name: AnimatedBuilding
    isExternal: true
    href: GTA.AnimatedBuilding.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.AnimatedBuilding
    name: AnimatedBuilding
    isExternal: true
    href: GTA.AnimatedBuilding.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyAnimatedBuildings*
  commentId: Overload:GTA.World.GetNearbyAnimatedBuildings
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyAnimatedBuildings_GTA_Math_Vector3_System_Single_
  name: GetNearbyAnimatedBuildings
  nameWithType: World.GetNearbyAnimatedBuildings
  fullName: GTA.World.GetNearbyAnimatedBuildings
- uid: GTA.World.GetClosestAnimatedBuilding*
  commentId: Overload:GTA.World.GetClosestAnimatedBuilding
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestAnimatedBuilding_GTA_Math_Vector3_System_Single_
  name: GetClosestAnimatedBuilding
  nameWithType: World.GetClosestAnimatedBuilding
  fullName: GTA.World.GetClosestAnimatedBuilding
- uid: GTA.AnimatedBuilding
  commentId: T:GTA.AnimatedBuilding
  parent: GTA
  isExternal: true
  href: GTA.AnimatedBuilding.html
  name: AnimatedBuilding
  nameWithType: AnimatedBuilding
  fullName: GTA.AnimatedBuilding
- uid: GTA.World.GetAllInteriorInstances*
  commentId: Overload:GTA.World.GetAllInteriorInstances
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllInteriorInstances
  name: GetAllInteriorInstances
  nameWithType: World.GetAllInteriorInstances
  fullName: GTA.World.GetAllInteriorInstances
- uid: GTA.InteriorInstance[]
  isExternal: true
  href: GTA.InteriorInstance.html
  name: InteriorInstance[]
  nameWithType: InteriorInstance[]
  fullName: GTA.InteriorInstance[]
  nameWithType.vb: InteriorInstance()
  fullName.vb: GTA.InteriorInstance()
  name.vb: InteriorInstance()
  spec.csharp:
  - uid: GTA.InteriorInstance
    name: InteriorInstance
    isExternal: true
    href: GTA.InteriorInstance.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.InteriorInstance
    name: InteriorInstance
    isExternal: true
    href: GTA.InteriorInstance.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyInteriorInstances*
  commentId: Overload:GTA.World.GetNearbyInteriorInstances
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyInteriorInstances_GTA_Math_Vector3_System_Single_
  name: GetNearbyInteriorInstances
  nameWithType: World.GetNearbyInteriorInstances
  fullName: GTA.World.GetNearbyInteriorInstances
- uid: GTA.World.GetClosestInteriorInstance*
  commentId: Overload:GTA.World.GetClosestInteriorInstance
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestInteriorInstance_GTA_Math_Vector3_System_Single_
  name: GetClosestInteriorInstance
  nameWithType: World.GetClosestInteriorInstance
  fullName: GTA.World.GetClosestInteriorInstance
- uid: GTA.InteriorInstance
  commentId: T:GTA.InteriorInstance
  parent: GTA
  isExternal: true
  href: GTA.InteriorInstance.html
  name: InteriorInstance
  nameWithType: InteriorInstance
  fullName: GTA.InteriorInstance
- uid: GTA.World.GetAllInteriorProxies*
  commentId: Overload:GTA.World.GetAllInteriorProxies
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllInteriorProxies
  name: GetAllInteriorProxies
  nameWithType: World.GetAllInteriorProxies
  fullName: GTA.World.GetAllInteriorProxies
- uid: GTA.InteriorProxy[]
  isExternal: true
  href: GTA.InteriorProxy.html
  name: InteriorProxy[]
  nameWithType: InteriorProxy[]
  fullName: GTA.InteriorProxy[]
  nameWithType.vb: InteriorProxy()
  fullName.vb: GTA.InteriorProxy()
  name.vb: InteriorProxy()
  spec.csharp:
  - uid: GTA.InteriorProxy
    name: InteriorProxy
    isExternal: true
    href: GTA.InteriorProxy.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.InteriorProxy
    name: InteriorProxy
    isExternal: true
    href: GTA.InteriorProxy.html
  - name: (
  - name: )
- uid: GTA.World.GetNearbyInteriorProxies*
  commentId: Overload:GTA.World.GetNearbyInteriorProxies
  isExternal: true
  href: GTA.World.html#GTA_World_GetNearbyInteriorProxies_GTA_Math_Vector3_System_Single_
  name: GetNearbyInteriorProxies
  nameWithType: World.GetNearbyInteriorProxies
  fullName: GTA.World.GetNearbyInteriorProxies
- uid: GTA.World.GetClosestInteriorProxy*
  commentId: Overload:GTA.World.GetClosestInteriorProxy
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosestInteriorProxy_GTA_Math_Vector3_System_Single_
  name: GetClosestInteriorProxy
  nameWithType: World.GetClosestInteriorProxy
  fullName: GTA.World.GetClosestInteriorProxy
- uid: GTA.InteriorProxy
  commentId: T:GTA.InteriorProxy
  parent: GTA
  isExternal: true
  href: GTA.InteriorProxy.html
  name: InteriorProxy
  nameWithType: InteriorProxy
  fullName: GTA.InteriorProxy
- uid: GTA.World.GetClosest*
  commentId: Overload:GTA.World.GetClosest
  isExternal: true
  href: GTA.World.html#GTA_World_GetClosest__1_GTA_Math_Vector3___0___
  name: GetClosest
  nameWithType: World.GetClosest
  fullName: GTA.World.GetClosest
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: GTA.Math.Vector2
  commentId: T:GTA.Math.Vector2
  parent: GTA.Math
  isExternal: true
  href: GTA.Math.Vector2.html
  name: Vector2
  nameWithType: Vector2
  fullName: GTA.Math.Vector2
- uid: GTA.World.SetAmbientVehicleDensityMultiplierThisFrame*
  commentId: Overload:GTA.World.SetAmbientVehicleDensityMultiplierThisFrame
  isExternal: true
  href: GTA.World.html#GTA_World_SetAmbientVehicleDensityMultiplierThisFrame_System_Single_
  name: SetAmbientVehicleDensityMultiplierThisFrame
  nameWithType: World.SetAmbientVehicleDensityMultiplierThisFrame
  fullName: GTA.World.SetAmbientVehicleDensityMultiplierThisFrame
- uid: GTA.World.SetAmbientPedDensityMultiplierThisFrame*
  commentId: Overload:GTA.World.SetAmbientPedDensityMultiplierThisFrame
  isExternal: true
  href: GTA.World.html#GTA_World_SetAmbientPedDensityMultiplierThisFrame_System_Single_
  name: SetAmbientPedDensityMultiplierThisFrame
  nameWithType: World.SetAmbientPedDensityMultiplierThisFrame
  fullName: GTA.World.SetAmbientPedDensityMultiplierThisFrame
- uid: GTA.World.CreatePed*
  commentId: Overload:GTA.World.CreatePed
  isExternal: true
  href: GTA.World.html#GTA_World_CreatePed_GTA_Model_GTA_Math_Vector3_System_Single_
  name: CreatePed
  nameWithType: World.CreatePed
  fullName: GTA.World.CreatePed
- uid: GTA.Model
  commentId: T:GTA.Model
  parent: GTA
  isExternal: true
  href: GTA.Model.html
  name: Model
  nameWithType: Model
  fullName: GTA.Model
- uid: GTA.World.CreateRandomPed*
  commentId: Overload:GTA.World.CreateRandomPed
  isExternal: true
  href: GTA.World.html#GTA_World_CreateRandomPed_GTA_Math_Vector3_
  name: CreateRandomPed
  nameWithType: World.CreateRandomPed
  fullName: GTA.World.CreateRandomPed
- uid: System.Func{GTA.Model,System.Boolean}
  commentId: T:System.Func{GTA.Model,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Model, bool>
  nameWithType: Func<Model, bool>
  fullName: System.Func<GTA.Model, bool>
  nameWithType.vb: Func(Of Model, Boolean)
  fullName.vb: System.Func(Of GTA.Model, Boolean)
  name.vb: Func(Of Model, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: GTA.Model
    name: Model
    isExternal: true
    href: GTA.Model.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: GTA.Model
    name: Model
    isExternal: true
    href: GTA.Model.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: GTA.World.CreateVehicle*
  commentId: Overload:GTA.World.CreateVehicle
  isExternal: true
  href: GTA.World.html#GTA_World_CreateVehicle_GTA_Model_GTA_Math_Vector3_System_Single_
  name: CreateVehicle
  nameWithType: World.CreateVehicle
  fullName: GTA.World.CreateVehicle
- uid: GTA.World.CreateRandomVehicle*
  commentId: Overload:GTA.World.CreateRandomVehicle
  isExternal: true
  href: GTA.World.html#GTA_World_CreateRandomVehicle_GTA_Math_Vector3_System_Single_System_Func_GTA_Model_System_Boolean__
  name: CreateRandomVehicle
  nameWithType: World.CreateRandomVehicle
  fullName: GTA.World.CreateRandomVehicle
- uid: GTA.World.CreateProp*
  commentId: Overload:GTA.World.CreateProp
  isExternal: true
  href: GTA.World.html#GTA_World_CreateProp_GTA_Model_GTA_Math_Vector3_System_Boolean_System_Boolean_
  name: CreateProp
  nameWithType: World.CreateProp
  fullName: GTA.World.CreateProp
- uid: GTA.World.CreatePropNoOffset*
  commentId: Overload:GTA.World.CreatePropNoOffset
  isExternal: true
  href: GTA.World.html#GTA_World_CreatePropNoOffset_GTA_Model_GTA_Math_Vector3_System_Boolean_
  name: CreatePropNoOffset
  nameWithType: World.CreatePropNoOffset
  fullName: GTA.World.CreatePropNoOffset
- uid: GTA.World.CreateAmbientPickup*
  commentId: Overload:GTA.World.CreateAmbientPickup
  isExternal: true
  href: GTA.World.html#GTA_World_CreateAmbientPickup_GTA_PickupType_GTA_Math_Vector3_GTA_PickupPlacementFlags_System_Int32_GTA_Model_System_Boolean_
  name: CreateAmbientPickup
  nameWithType: World.CreateAmbientPickup
  fullName: GTA.World.CreateAmbientPickup
- uid: GTA.PickupType
  commentId: T:GTA.PickupType
  parent: GTA
  isExternal: true
  href: GTA.PickupType.html
  name: PickupType
  nameWithType: PickupType
  fullName: GTA.PickupType
- uid: GTA.PickupPlacementFlags
  commentId: T:GTA.PickupPlacementFlags
  parent: GTA
  isExternal: true
  href: GTA.PickupPlacementFlags.html
  name: PickupPlacementFlags
  nameWithType: PickupPlacementFlags
  fullName: GTA.PickupPlacementFlags
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: GTA.World.CreatePickup*
  commentId: Overload:GTA.World.CreatePickup
  isExternal: true
  href: GTA.World.html#GTA_World_CreatePickup_GTA_PickupType_GTA_Math_Vector3_GTA_PickupPlacementFlags_System_Int32_GTA_Model_
  name: CreatePickup
  nameWithType: World.CreatePickup
  fullName: GTA.World.CreatePickup
- uid: GTA.Pickup
  commentId: T:GTA.Pickup
  parent: GTA
  isExternal: true
  href: GTA.Pickup.html
  name: Pickup
  nameWithType: Pickup
  fullName: GTA.Pickup
- uid: GTA.EulerRotationOrder
  commentId: T:GTA.EulerRotationOrder
  parent: GTA
  isExternal: true
  href: GTA.EulerRotationOrder.html
  name: EulerRotationOrder
  nameWithType: EulerRotationOrder
  fullName: GTA.EulerRotationOrder
- uid: GTA.World.GetAllCheckpoints*
  commentId: Overload:GTA.World.GetAllCheckpoints
  isExternal: true
  href: GTA.World.html#GTA_World_GetAllCheckpoints
  name: GetAllCheckpoints
  nameWithType: World.GetAllCheckpoints
  fullName: GTA.World.GetAllCheckpoints
- uid: GTA.Checkpoint[]
  isExternal: true
  href: GTA.Checkpoint.html
  name: Checkpoint[]
  nameWithType: Checkpoint[]
  fullName: GTA.Checkpoint[]
  nameWithType.vb: Checkpoint()
  fullName.vb: GTA.Checkpoint()
  name.vb: Checkpoint()
  spec.csharp:
  - uid: GTA.Checkpoint
    name: Checkpoint
    isExternal: true
    href: GTA.Checkpoint.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: GTA.Checkpoint
    name: Checkpoint
    isExternal: true
    href: GTA.Checkpoint.html
  - name: (
  - name: )
- uid: GTA.World.CreateCheckpoint*
  commentId: Overload:GTA.World.CreateCheckpoint
  isExternal: true
  href: GTA.World.html#GTA_World_CreateCheckpoint_GTA_CheckpointIcon_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Drawing_Color_
  name: CreateCheckpoint
  nameWithType: World.CreateCheckpoint
  fullName: GTA.World.CreateCheckpoint
- uid: GTA.CheckpointIcon
  commentId: T:GTA.CheckpointIcon
  parent: GTA
  isExternal: true
  href: GTA.CheckpointIcon.html
  name: CheckpointIcon
  nameWithType: CheckpointIcon
  fullName: GTA.CheckpointIcon
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: GTA.Checkpoint
  commentId: T:GTA.Checkpoint
  parent: GTA
  isExternal: true
  href: GTA.Checkpoint.html
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: GTA.Checkpoint
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
- uid: GTA.CheckpointCustomIcon
  commentId: T:GTA.CheckpointCustomIcon
  parent: GTA
  isExternal: true
  href: GTA.CheckpointCustomIcon.html
  name: CheckpointCustomIcon
  nameWithType: CheckpointCustomIcon
  fullName: GTA.CheckpointCustomIcon
- uid: GTA.World.ClearArea*
  commentId: Overload:GTA.World.ClearArea
  isExternal: true
  href: GTA.World.html#GTA_World_ClearArea_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_
  name: ClearArea
  nameWithType: World.ClearArea
  fullName: GTA.World.ClearArea
- uid: GTA.World.ClearAreaOfProjectiles*
  commentId: Overload:GTA.World.ClearAreaOfProjectiles
  isExternal: true
  href: GTA.World.html#GTA_World_ClearAreaOfProjectiles_GTA_Math_Vector3_System_Single_
  name: ClearAreaOfProjectiles
  nameWithType: World.ClearAreaOfProjectiles
  fullName: GTA.World.ClearAreaOfProjectiles
- uid: GTA.World.ClearAreaOfVehicles*
  commentId: Overload:GTA.World.ClearAreaOfVehicles
  isExternal: true
  href: GTA.World.html#GTA_World_ClearAreaOfVehicles_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_
  name: ClearAreaOfVehicles
  nameWithType: World.ClearAreaOfVehicles
  fullName: GTA.World.ClearAreaOfVehicles
- uid: GTA.World.ClearAngledAreaOfVehicles*
  commentId: Overload:GTA.World.ClearAngledAreaOfVehicles
  isExternal: true
  href: GTA.World.html#GTA_World_ClearAngledAreaOfVehicles_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_
  name: ClearAngledAreaOfVehicles
  nameWithType: World.ClearAngledAreaOfVehicles
  fullName: GTA.World.ClearAngledAreaOfVehicles
- uid: GTA.World.ClearAreaOfProps*
  commentId: Overload:GTA.World.ClearAreaOfProps
  isExternal: true
  href: GTA.World.html#GTA_World_ClearAreaOfProps_GTA_Math_Vector3_System_Single_GTA_ClearPropsFlags_
  name: ClearAreaOfProps
  nameWithType: World.ClearAreaOfProps
  fullName: GTA.World.ClearAreaOfProps
- uid: GTA.ClearPropsFlags
  commentId: T:GTA.ClearPropsFlags
  parent: GTA
  isExternal: true
  href: GTA.ClearPropsFlags.html
  name: ClearPropsFlags
  nameWithType: ClearPropsFlags
  fullName: GTA.ClearPropsFlags
- uid: GTA.World.ClearAreaOfPeds*
  commentId: Overload:GTA.World.ClearAreaOfPeds
  isExternal: true
  href: GTA.World.html#GTA_World_ClearAreaOfPeds_GTA_Math_Vector3_System_Single_
  name: ClearAreaOfPeds
  nameWithType: World.ClearAreaOfPeds
  fullName: GTA.World.ClearAreaOfPeds
- uid: GTA.World.ClearAreaOfCops*
  commentId: Overload:GTA.World.ClearAreaOfCops
  isExternal: true
  href: GTA.World.html#GTA_World_ClearAreaOfCops_GTA_Math_Vector3_System_Single_
  name: ClearAreaOfCops
  nameWithType: World.ClearAreaOfCops
  fullName: GTA.World.ClearAreaOfCops
- uid: GTA.World.DeleteAllTrains*
  commentId: Overload:GTA.World.DeleteAllTrains
  isExternal: true
  href: GTA.World.html#GTA_World_DeleteAllTrains
  name: DeleteAllTrains
  nameWithType: World.DeleteAllTrains
  fullName: GTA.World.DeleteAllTrains
- uid: GTA.World.CreateParticleEffectNonLooped*
  commentId: Overload:GTA.World.CreateParticleEffectNonLooped
  isExternal: true
  href: GTA.World.html#GTA_World_CreateParticleEffectNonLooped_GTA_ParticleEffectAsset_System_String_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_GTA_InvertAxisFlags_
  name: CreateParticleEffectNonLooped
  nameWithType: World.CreateParticleEffectNonLooped
  fullName: GTA.World.CreateParticleEffectNonLooped
- uid: GTA.ParticleEffectAsset
  commentId: T:GTA.ParticleEffectAsset
  parent: GTA
  isExternal: true
  href: GTA.ParticleEffectAsset.html
  name: ParticleEffectAsset
  nameWithType: ParticleEffectAsset
  fullName: GTA.ParticleEffectAsset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: GTA.InvertAxisFlags
  commentId: T:GTA.InvertAxisFlags
  parent: GTA
  isExternal: true
  href: GTA.InvertAxisFlags.html
  name: InvertAxisFlags
  nameWithType: InvertAxisFlags
  fullName: GTA.InvertAxisFlags
- uid: GTA.Entity
  commentId: T:GTA.Entity
  parent: GTA
  isExternal: true
  href: GTA.Entity.html
  name: Entity
  nameWithType: Entity
  fullName: GTA.Entity
- uid: GTA.EntityBone
  commentId: T:GTA.EntityBone
  parent: GTA
  isExternal: true
  href: GTA.EntityBone.html
  name: EntityBone
  nameWithType: EntityBone
  fullName: GTA.EntityBone
- uid: GTA.World.CreateParticleEffect*
  commentId: Overload:GTA.World.CreateParticleEffect
  isExternal: true
  href: GTA.World.html#GTA_World_CreateParticleEffect_GTA_ParticleEffectAsset_System_String_GTA_Entity_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_GTA_InvertAxisFlags_
  name: CreateParticleEffect
  nameWithType: World.CreateParticleEffect
  fullName: GTA.World.CreateParticleEffect
- uid: GTA.ParticleEffect
  commentId: T:GTA.ParticleEffect
  parent: GTA
  isExternal: true
  href: GTA.ParticleEffect.html
  name: ParticleEffect
  nameWithType: ParticleEffect
  fullName: GTA.ParticleEffect
- uid: GTA.World.RemoveAllParticleEffectsInRange*
  commentId: Overload:GTA.World.RemoveAllParticleEffectsInRange
  isExternal: true
  href: GTA.World.html#GTA_World_RemoveAllParticleEffectsInRange_GTA_Math_Vector3_System_Single_
  name: RemoveAllParticleEffectsInRange
  nameWithType: World.RemoveAllParticleEffectsInRange
  fullName: GTA.World.RemoveAllParticleEffectsInRange
- uid: GTA.World.AddRope*
  commentId: Overload:GTA.World.AddRope
  isExternal: true
  href: GTA.World.html#GTA_World_AddRope_GTA_RopeType_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Single_System_Boolean_
  name: AddRope
  nameWithType: World.AddRope
  fullName: GTA.World.AddRope
- uid: GTA.RopeType
  commentId: T:GTA.RopeType
  parent: GTA
  isExternal: true
  href: GTA.RopeType.html
  name: RopeType
  nameWithType: RopeType
  fullName: GTA.RopeType
- uid: GTA.Rope
  commentId: T:GTA.Rope
  parent: GTA
  isExternal: true
  href: GTA.Rope.html
  name: Rope
  nameWithType: Rope
  fullName: GTA.Rope
- uid: GTA.World.ShootSingleBullet*
  commentId: Overload:GTA.World.ShootSingleBullet
  isExternal: true
  href: GTA.World.html#GTA_World_ShootSingleBullet_GTA_Math_Vector3_GTA_Math_Vector3_System_Int32_GTA_WeaponAsset_GTA_Ped_System_Boolean_System_Boolean_System_Boolean_System_Single_
  name: ShootSingleBullet
  nameWithType: World.ShootSingleBullet
  fullName: GTA.World.ShootSingleBullet
- uid: GTA.WeaponAsset
  commentId: T:GTA.WeaponAsset
  parent: GTA
  isExternal: true
  href: GTA.WeaponAsset.html
  name: WeaponAsset
  nameWithType: WeaponAsset
  fullName: GTA.WeaponAsset
- uid: GTA.World.ShootSingleBulletIgnoreEntity*
  commentId: Overload:GTA.World.ShootSingleBulletIgnoreEntity
  isExternal: true
  href: GTA.World.html#GTA_World_ShootSingleBulletIgnoreEntity_GTA_Math_Vector3_GTA_Math_Vector3_System_Int32_GTA_WeaponAsset_GTA_Ped_System_Boolean_System_Boolean_System_Boolean_System_Single_GTA_Entity_GTA_Entity_
  name: ShootSingleBulletIgnoreEntity
  nameWithType: World.ShootSingleBulletIgnoreEntity
  fullName: GTA.World.ShootSingleBulletIgnoreEntity
- uid: GTA.World.ShootSingleBulletIgnoreEntityNew*
  commentId: Overload:GTA.World.ShootSingleBulletIgnoreEntityNew
  isExternal: true
  href: GTA.World.html#GTA_World_ShootSingleBulletIgnoreEntityNew_GTA_Math_Vector3_GTA_Math_Vector3_System_Int32_GTA_WeaponAsset_GTA_Ped_System_Boolean_System_Boolean_System_Boolean_System_Single_GTA_Entity_System_Boolean_System_Boolean_GTA_Entity_System_Boolean_System_Boolean_System_Boolean_
  name: ShootSingleBulletIgnoreEntityNew
  nameWithType: World.ShootSingleBulletIgnoreEntityNew
  fullName: GTA.World.ShootSingleBulletIgnoreEntityNew
- uid: GTA.World.AddExplosion*
  commentId: Overload:GTA.World.AddExplosion
  isExternal: true
  href: GTA.World.html#GTA_World_AddExplosion_GTA_Math_Vector3_GTA_ExplosionType_System_Single_System_Single_GTA_Ped_System_Boolean_System_Boolean_
  name: AddExplosion
  nameWithType: World.AddExplosion
  fullName: GTA.World.AddExplosion
- uid: GTA.ExplosionType
  commentId: T:GTA.ExplosionType
  parent: GTA
  isExternal: true
  href: GTA.ExplosionType.html
  name: ExplosionType
  nameWithType: ExplosionType
  fullName: GTA.ExplosionType
- uid: GTA.World.AddRelationshipGroup*
  commentId: Overload:GTA.World.AddRelationshipGroup
  isExternal: true
  href: GTA.World.html#GTA_World_AddRelationshipGroup_System_String_
  name: AddRelationshipGroup
  nameWithType: World.AddRelationshipGroup
  fullName: GTA.World.AddRelationshipGroup
- uid: GTA.RelationshipGroup
  commentId: T:GTA.RelationshipGroup
  parent: GTA
  isExternal: true
  href: GTA.RelationshipGroup.html
  name: RelationshipGroup
  nameWithType: RelationshipGroup
  fullName: GTA.RelationshipGroup
- uid: GTA.World.VehicleHighSpeedBumpMultiplier*
  commentId: Overload:GTA.World.VehicleHighSpeedBumpMultiplier
  isExternal: true
  href: GTA.World.html#GTA_World_VehicleHighSpeedBumpMultiplier_System_Single_
  name: VehicleHighSpeedBumpMultiplier
  nameWithType: World.VehicleHighSpeedBumpMultiplier
  fullName: GTA.World.VehicleHighSpeedBumpMultiplier
- uid: GTA.World.DrawMarker*
  commentId: Overload:GTA.World.DrawMarker
  isExternal: true
  href: GTA.World.html#GTA_World_DrawMarker_GTA_MarkerType_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Drawing_Color_System_Boolean_System_Boolean_System_Boolean_System_String_System_String_System_Boolean_
  name: DrawMarker
  nameWithType: World.DrawMarker
  fullName: GTA.World.DrawMarker
- uid: GTA.MarkerType
  commentId: T:GTA.MarkerType
  parent: GTA
  isExternal: true
  href: GTA.MarkerType.html
  name: MarkerType
  nameWithType: MarkerType
  fullName: GTA.MarkerType
- uid: GTA.World.DrawMarkerEx*
  commentId: Overload:GTA.World.DrawMarkerEx
  isExternal: true
  href: GTA.World.html#GTA_World_DrawMarkerEx_GTA_MarkerType_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Drawing_Color_System_Boolean_System_Boolean_GTA_EulerRotationOrder_System_Boolean_System_Nullable_GTA_Graphics_TextureAsset__System_Boolean_System_Boolean_System_Boolean_
  name: DrawMarkerEx
  nameWithType: World.DrawMarkerEx
  fullName: GTA.World.DrawMarkerEx
- uid: System.Nullable{GTA.Graphics.TextureAsset}
  commentId: T:System.Nullable{GTA.Graphics.TextureAsset}
  parent: System
  definition: System.Nullable`1
  href: GTA.Graphics.TextureAsset.html
  name: TextureAsset?
  nameWithType: TextureAsset?
  fullName: GTA.Graphics.TextureAsset?
  spec.csharp:
  - uid: GTA.Graphics.TextureAsset
    name: TextureAsset
    isExternal: true
    href: GTA.Graphics.TextureAsset.html
  - name: '?'
  spec.vb:
  - uid: GTA.Graphics.TextureAsset
    name: TextureAsset
    isExternal: true
    href: GTA.Graphics.TextureAsset.html
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: GTA.World.DrawLightWithRange*
  commentId: Overload:GTA.World.DrawLightWithRange
  isExternal: true
  href: GTA.World.html#GTA_World_DrawLightWithRange_GTA_Math_Vector3_System_Drawing_Color_System_Single_System_Single_
  name: DrawLightWithRange
  nameWithType: World.DrawLightWithRange
  fullName: GTA.World.DrawLightWithRange
- uid: GTA.World.DrawSpotLight*
  commentId: Overload:GTA.World.DrawSpotLight
  isExternal: true
  href: GTA.World.html#GTA_World_DrawSpotLight_GTA_Math_Vector3_GTA_Math_Vector3_System_Drawing_Color_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: DrawSpotLight
  nameWithType: World.DrawSpotLight
  fullName: GTA.World.DrawSpotLight
- uid: GTA.World.DrawSpotLightWithShadow*
  commentId: Overload:GTA.World.DrawSpotLightWithShadow
  isExternal: true
  href: GTA.World.html#GTA_World_DrawSpotLightWithShadow_GTA_Math_Vector3_GTA_Math_Vector3_System_Drawing_Color_System_Single_System_Single_System_Single_System_Single_System_Single_
  name: DrawSpotLightWithShadow
  nameWithType: World.DrawSpotLightWithShadow
  fullName: GTA.World.DrawSpotLightWithShadow
- uid: GTA.World.DrawLine*
  commentId: Overload:GTA.World.DrawLine
  isExternal: true
  href: GTA.World.html#GTA_World_DrawLine_GTA_Math_Vector3_GTA_Math_Vector3_System_Drawing_Color_
  name: DrawLine
  nameWithType: World.DrawLine
  fullName: GTA.World.DrawLine
- uid: GTA.World.DrawPolygon*
  commentId: Overload:GTA.World.DrawPolygon
  isExternal: true
  href: GTA.World.html#GTA_World_DrawPolygon_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Drawing_Color_
  name: DrawPolygon
  nameWithType: World.DrawPolygon
  fullName: GTA.World.DrawPolygon
- uid: GTA.World.DrawBoxForAngledArea*
  commentId: Overload:GTA.World.DrawBoxForAngledArea
  isExternal: true
  href: GTA.World.html#GTA_World_DrawBoxForAngledArea_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Drawing_Color_GTA_DrawBoxFlags_
  name: DrawBoxForAngledArea
  nameWithType: World.DrawBoxForAngledArea
  fullName: GTA.World.DrawBoxForAngledArea
- uid: GTA.DrawBoxFlags
  commentId: T:GTA.DrawBoxFlags
  parent: GTA
  isExternal: true
  href: GTA.DrawBoxFlags.html
  name: DrawBoxFlags
  nameWithType: DrawBoxFlags
  fullName: GTA.DrawBoxFlags
- uid: GTA.World.Raycast*
  commentId: Overload:GTA.World.Raycast
  isExternal: true
  href: GTA.World.html#GTA_World_Raycast_GTA_Math_Vector3_GTA_Math_Vector3_GTA_IntersectFlags_GTA_Entity_
  name: Raycast
  nameWithType: World.Raycast
  fullName: GTA.World.Raycast
- uid: GTA.IntersectFlags
  commentId: T:GTA.IntersectFlags
  parent: GTA
  isExternal: true
  href: GTA.IntersectFlags.html
  name: IntersectFlags
  nameWithType: IntersectFlags
  fullName: GTA.IntersectFlags
- uid: GTA.RaycastResult
  commentId: T:GTA.RaycastResult
  parent: GTA
  isExternal: true
  href: GTA.RaycastResult.html
  name: RaycastResult
  nameWithType: RaycastResult
  fullName: GTA.RaycastResult
- uid: GTA.World.GetCrosshairCoordinates*
  commentId: Overload:GTA.World.GetCrosshairCoordinates
  isExternal: true
  href: GTA.World.html#GTA_World_GetCrosshairCoordinates
  name: GetCrosshairCoordinates
  nameWithType: World.GetCrosshairCoordinates
  fullName: GTA.World.GetCrosshairCoordinates
- uid: GTA.World.GetDistance*
  commentId: Overload:GTA.World.GetDistance
  isExternal: true
  href: GTA.World.html#GTA_World_GetDistance_GTA_Math_Vector3_GTA_Math_Vector3_
  name: GetDistance
  nameWithType: World.GetDistance
  fullName: GTA.World.GetDistance
- uid: GTA.World.CalculateTravelDistance*
  commentId: Overload:GTA.World.CalculateTravelDistance
  isExternal: true
  href: GTA.World.html#GTA_World_CalculateTravelDistance_GTA_Math_Vector3_GTA_Math_Vector3_
  name: CalculateTravelDistance
  nameWithType: World.CalculateTravelDistance
  fullName: GTA.World.CalculateTravelDistance
- uid: GTA.World.GetGroundHeight*
  commentId: Overload:GTA.World.GetGroundHeight
  isExternal: true
  href: GTA.World.html#GTA_World_GetGroundHeight_GTA_Math_Vector3_System_Single__GTA_GetGroundHeightMode_
  name: GetGroundHeight
  nameWithType: World.GetGroundHeight
  fullName: GTA.World.GetGroundHeight
- uid: GTA.GetGroundHeightMode
  commentId: T:GTA.GetGroundHeightMode
  parent: GTA
  isExternal: true
  href: GTA.GetGroundHeightMode.html
  name: GetGroundHeightMode
  nameWithType: GetGroundHeightMode
  fullName: GTA.GetGroundHeightMode
- uid: GTA.World.GetGroundHeightAndNormal*
  commentId: Overload:GTA.World.GetGroundHeightAndNormal
  isExternal: true
  href: GTA.World.html#GTA_World_GetGroundHeightAndNormal_GTA_Math_Vector3_System_Single__GTA_Math_Vector3__
  name: GetGroundHeightAndNormal
  nameWithType: World.GetGroundHeightAndNormal
  fullName: GTA.World.GetGroundHeightAndNormal
- uid: GTA.World.GetGroundHeightExcludingProps*
  commentId: Overload:GTA.World.GetGroundHeightExcludingProps
  isExternal: true
  href: GTA.World.html#GTA_World_GetGroundHeightExcludingProps_GTA_Math_Vector3_System_Single__GTA_GetGroundHeightMode_
  name: GetGroundHeightExcludingProps
  nameWithType: World.GetGroundHeightExcludingProps
  fullName: GTA.World.GetGroundHeightExcludingProps
- uid: GTA.World.GetApproxHeightForPoint*
  commentId: Overload:GTA.World.GetApproxHeightForPoint
  isExternal: true
  href: GTA.World.html#GTA_World_GetApproxHeightForPoint_GTA_Math_Vector2_
  name: GetApproxHeightForPoint
  nameWithType: World.GetApproxHeightForPoint
  fullName: GTA.World.GetApproxHeightForPoint
- uid: GTA.World.GetApproxHeightForArea*
  commentId: Overload:GTA.World.GetApproxHeightForArea
  isExternal: true
  href: GTA.World.html#GTA_World_GetApproxHeightForArea_GTA_Math_Vector2_GTA_Math_Vector2_
  name: GetApproxHeightForArea
  nameWithType: World.GetApproxHeightForArea
  fullName: GTA.World.GetApproxHeightForArea
- uid: GTA.World.GetApproxFloorForPoint*
  commentId: Overload:GTA.World.GetApproxFloorForPoint
  isExternal: true
  href: GTA.World.html#GTA_World_GetApproxFloorForPoint_GTA_Math_Vector2_
  name: GetApproxFloorForPoint
  nameWithType: World.GetApproxFloorForPoint
  fullName: GTA.World.GetApproxFloorForPoint
- uid: GTA.World.GetApproxFloorForArea*
  commentId: Overload:GTA.World.GetApproxFloorForArea
  isExternal: true
  href: GTA.World.html#GTA_World_GetApproxFloorForArea_GTA_Math_Vector2_GTA_Math_Vector2_
  name: GetApproxFloorForArea
  nameWithType: World.GetApproxFloorForArea
  fullName: GTA.World.GetApproxFloorForArea
- uid: GTA.World.GetSafePositionForPed*
  commentId: Overload:GTA.World.GetSafePositionForPed
  isExternal: true
  href: GTA.World.html#GTA_World_GetSafePositionForPed_GTA_Math_Vector3_GTA_Math_Vector3__GTA_GetSafePositionFlags_
  name: GetSafePositionForPed
  nameWithType: World.GetSafePositionForPed
  fullName: GTA.World.GetSafePositionForPed
- uid: GTA.GetSafePositionFlags
  commentId: T:GTA.GetSafePositionFlags
  parent: GTA
  isExternal: true
  href: GTA.GetSafePositionFlags.html
  name: GetSafePositionFlags
  nameWithType: GetSafePositionFlags
  fullName: GTA.GetSafePositionFlags
- uid: GTA.World.GetNextPositionOnStreet*
  commentId: Overload:GTA.World.GetNextPositionOnStreet
  isExternal: true
  href: GTA.World.html#GTA_World_GetNextPositionOnStreet_GTA_Math_Vector2_System_Boolean_
  name: GetNextPositionOnStreet
  nameWithType: World.GetNextPositionOnStreet
  fullName: GTA.World.GetNextPositionOnStreet
- uid: GTA.World.GetNextPositionOnSidewalk*
  commentId: Overload:GTA.World.GetNextPositionOnSidewalk
  isExternal: true
  href: GTA.World.html#GTA_World_GetNextPositionOnSidewalk_GTA_Math_Vector2_
  name: GetNextPositionOnSidewalk
  nameWithType: World.GetNextPositionOnSidewalk
  fullName: GTA.World.GetNextPositionOnSidewalk
- uid: GTA.World.GetPositionOnRoadside*
  commentId: Overload:GTA.World.GetPositionOnRoadside
  isExternal: true
  href: GTA.World.html#GTA_World_GetPositionOnRoadside_GTA_Math_Vector3_GTA_Direction_GTA_Math_Vector3__
  name: GetPositionOnRoadside
  nameWithType: World.GetPositionOnRoadside
  fullName: GTA.World.GetPositionOnRoadside
- uid: GTA.Direction
  commentId: T:GTA.Direction
  parent: GTA
  isExternal: true
  href: GTA.Direction.html
  name: Direction
  nameWithType: Direction
  fullName: GTA.Direction
- uid: GTA.World.GetStreetName*
  commentId: Overload:GTA.World.GetStreetName
  isExternal: true
  href: GTA.World.html#GTA_World_GetStreetName_GTA_Math_Vector2_
  name: GetStreetName
  nameWithType: World.GetStreetName
  fullName: GTA.World.GetStreetName
- uid: GTA.World.GetZoneDisplayName*
  commentId: Overload:GTA.World.GetZoneDisplayName
  isExternal: true
  href: GTA.World.html#GTA_World_GetZoneDisplayName_GTA_Math_Vector2_
  name: GetZoneDisplayName
  nameWithType: World.GetZoneDisplayName
  fullName: GTA.World.GetZoneDisplayName
- uid: GTA.World.GetZoneLocalizedName*
  commentId: Overload:GTA.World.GetZoneLocalizedName
  isExternal: true
  href: GTA.World.html#GTA_World_GetZoneLocalizedName_GTA_Math_Vector2_
  name: GetZoneLocalizedName
  nameWithType: World.GetZoneLocalizedName
  fullName: GTA.World.GetZoneLocalizedName
- uid: GTA.World.IsPointInAngledArea*
  commentId: Overload:GTA.World.IsPointInAngledArea
  isExternal: true
  href: GTA.World.html#GTA_World_IsPointInAngledArea_GTA_Math_Vector3_GTA_Math_Vector3_GTA_Math_Vector3_System_Single_System_Boolean_
  name: IsPointInAngledArea
  nameWithType: World.IsPointInAngledArea
  fullName: GTA.World.IsPointInAngledArea
- uid: GTA.World.IsClockPaused*
  commentId: Overload:GTA.World.IsClockPaused
  isExternal: true
  href: GTA.World.html#GTA_World_IsClockPaused
  name: IsClockPaused
  nameWithType: World.IsClockPaused
  fullName: GTA.World.IsClockPaused
- uid: GTA.World.CurrentTimeOfDay*
  commentId: Overload:GTA.World.CurrentTimeOfDay
  isExternal: true
  href: GTA.World.html#GTA_World_CurrentTimeOfDay
  name: CurrentTimeOfDay
  nameWithType: World.CurrentTimeOfDay
  fullName: GTA.World.CurrentTimeOfDay
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: GTA.World.MillisecondsPerGameMinute*
  commentId: Overload:GTA.World.MillisecondsPerGameMinute
  isExternal: true
  href: GTA.World.html#GTA_World_MillisecondsPerGameMinute
  name: MillisecondsPerGameMinute
  nameWithType: World.MillisecondsPerGameMinute
  fullName: GTA.World.MillisecondsPerGameMinute
- uid: GTA.World.Blackout*
  commentId: Overload:GTA.World.Blackout
  isExternal: true
  href: GTA.World.html#GTA_World_Blackout
  name: Blackout
  nameWithType: World.Blackout
  fullName: GTA.World.Blackout
- uid: GTA.World.Weather*
  commentId: Overload:GTA.World.Weather
  isExternal: true
  href: GTA.World.html#GTA_World_Weather
  name: Weather
  nameWithType: World.Weather
  fullName: GTA.World.Weather
- uid: GTA.World.NextWeather*
  commentId: Overload:GTA.World.NextWeather
  isExternal: true
  href: GTA.World.html#GTA_World_NextWeather
  name: NextWeather
  nameWithType: World.NextWeather
  fullName: GTA.World.NextWeather
- uid: GTA.World.GravityLevel*
  commentId: Overload:GTA.World.GravityLevel
  isExternal: true
  href: GTA.World.html#GTA_World_GravityLevel
  name: GravityLevel
  nameWithType: World.GravityLevel
  fullName: GTA.World.GravityLevel
- uid: GTA.World.RainLevel*
  commentId: Overload:GTA.World.RainLevel
  isExternal: true
  href: GTA.World.html#GTA_World_RainLevel
  name: RainLevel
  nameWithType: World.RainLevel
  fullName: GTA.World.RainLevel
- uid: GTA.World.RainLevelOverride*
  commentId: Overload:GTA.World.RainLevelOverride
  isExternal: true
  href: GTA.World.html#GTA_World_RainLevelOverride
  name: RainLevelOverride
  nameWithType: World.RainLevelOverride
  fullName: GTA.World.RainLevelOverride
- uid: GTA.World.SnowLevel*
  commentId: Overload:GTA.World.SnowLevel
  isExternal: true
  href: GTA.World.html#GTA_World_SnowLevel
  name: SnowLevel
  nameWithType: World.SnowLevel
  fullName: GTA.World.SnowLevel
- uid: GTA.World.SnowLevelOverride*
  commentId: Overload:GTA.World.SnowLevelOverride
  isExternal: true
  href: GTA.World.html#GTA_World_SnowLevelOverride
  name: SnowLevelOverride
  nameWithType: World.SnowLevelOverride
  fullName: GTA.World.SnowLevelOverride
- uid: GTA.World.WindSpeed*
  commentId: Overload:GTA.World.WindSpeed
  isExternal: true
  href: GTA.World.html#GTA_World_WindSpeed
  name: WindSpeed
  nameWithType: World.WindSpeed
  fullName: GTA.World.WindSpeed
- uid: GTA.World.WindSpeedOverride*
  commentId: Overload:GTA.World.WindSpeedOverride
  isExternal: true
  href: GTA.World.html#GTA_World_WindSpeedOverride
  name: WindSpeedOverride
  nameWithType: World.WindSpeedOverride
  fullName: GTA.World.WindSpeedOverride
- uid: GTA.World.WindDirection*
  commentId: Overload:GTA.World.WindDirection
  isExternal: true
  href: GTA.World.html#GTA_World_WindDirection
  name: WindDirection
  nameWithType: World.WindDirection
  fullName: GTA.World.WindDirection
- uid: GTA.World.WaypointBlip*
  commentId: Overload:GTA.World.WaypointBlip
  isExternal: true
  href: GTA.World.html#GTA_World_WaypointBlip
  name: WaypointBlip
  nameWithType: World.WaypointBlip
  fullName: GTA.World.WaypointBlip
- uid: GTA.World.WaypointPosition*
  commentId: Overload:GTA.World.WaypointPosition
  isExternal: true
  href: GTA.World.html#GTA_World_WaypointPosition
  name: WaypointPosition
  nameWithType: World.WaypointPosition
  fullName: GTA.World.WaypointPosition
- uid: GTA.World.VehicleCount*
  commentId: Overload:GTA.World.VehicleCount
  isExternal: true
  href: GTA.World.html#GTA_World_VehicleCount
  name: VehicleCount
  nameWithType: World.VehicleCount
  fullName: GTA.World.VehicleCount
- uid: GTA.World.PedCount*
  commentId: Overload:GTA.World.PedCount
  isExternal: true
  href: GTA.World.html#GTA_World_PedCount
  name: PedCount
  nameWithType: World.PedCount
  fullName: GTA.World.PedCount
- uid: GTA.World.PropCount*
  commentId: Overload:GTA.World.PropCount
  isExternal: true
  href: GTA.World.html#GTA_World_PropCount
  name: PropCount
  nameWithType: World.PropCount
  fullName: GTA.World.PropCount
- uid: GTA.World.PickupObjectCount*
  commentId: Overload:GTA.World.PickupObjectCount
  isExternal: true
  href: GTA.World.html#GTA_World_PickupObjectCount
  name: PickupObjectCount
  nameWithType: World.PickupObjectCount
  fullName: GTA.World.PickupObjectCount
- uid: GTA.World.BuildingCount*
  commentId: Overload:GTA.World.BuildingCount
  isExternal: true
  href: GTA.World.html#GTA_World_BuildingCount
  name: BuildingCount
  nameWithType: World.BuildingCount
  fullName: GTA.World.BuildingCount
- uid: GTA.World.AnimatedBuildingCount*
  commentId: Overload:GTA.World.AnimatedBuildingCount
  isExternal: true
  href: GTA.World.html#GTA_World_AnimatedBuildingCount
  name: AnimatedBuildingCount
  nameWithType: World.AnimatedBuildingCount
  fullName: GTA.World.AnimatedBuildingCount
- uid: GTA.World.InteriorInstanceCount*
  commentId: Overload:GTA.World.InteriorInstanceCount
  isExternal: true
  href: GTA.World.html#GTA_World_InteriorInstanceCount
  name: InteriorInstanceCount
  nameWithType: World.InteriorInstanceCount
  fullName: GTA.World.InteriorInstanceCount
- uid: GTA.World.InteriorProxyCount*
  commentId: Overload:GTA.World.InteriorProxyCount
  isExternal: true
  href: GTA.World.html#GTA_World_InteriorProxyCount
  name: InteriorProxyCount
  nameWithType: World.InteriorProxyCount
  fullName: GTA.World.InteriorProxyCount
- uid: GTA.World.ProjectileCount*
  commentId: Overload:GTA.World.ProjectileCount
  isExternal: true
  href: GTA.World.html#GTA_World_ProjectileCount
  name: ProjectileCount
  nameWithType: World.ProjectileCount
  fullName: GTA.World.ProjectileCount
- uid: GTA.World.EntityColliderCount*
  commentId: Overload:GTA.World.EntityColliderCount
  isExternal: true
  href: GTA.World.html#GTA_World_EntityColliderCount
  name: EntityColliderCount
  nameWithType: World.EntityColliderCount
  fullName: GTA.World.EntityColliderCount
- uid: GTA.World.VehicleCapacity*
  commentId: Overload:GTA.World.VehicleCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_VehicleCapacity
  name: VehicleCapacity
  nameWithType: World.VehicleCapacity
  fullName: GTA.World.VehicleCapacity
- uid: GTA.World.PedCapacity*
  commentId: Overload:GTA.World.PedCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_PedCapacity
  name: PedCapacity
  nameWithType: World.PedCapacity
  fullName: GTA.World.PedCapacity
- uid: GTA.World.PropCapacity*
  commentId: Overload:GTA.World.PropCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_PropCapacity
  name: PropCapacity
  nameWithType: World.PropCapacity
  fullName: GTA.World.PropCapacity
- uid: GTA.World.PickupObjectCapacity*
  commentId: Overload:GTA.World.PickupObjectCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_PickupObjectCapacity
  name: PickupObjectCapacity
  nameWithType: World.PickupObjectCapacity
  fullName: GTA.World.PickupObjectCapacity
- uid: GTA.World.ProjectileCapacity*
  commentId: Overload:GTA.World.ProjectileCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_ProjectileCapacity
  name: ProjectileCapacity
  nameWithType: World.ProjectileCapacity
  fullName: GTA.World.ProjectileCapacity
- uid: GTA.World.BuildingCapacity*
  commentId: Overload:GTA.World.BuildingCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_BuildingCapacity
  name: BuildingCapacity
  nameWithType: World.BuildingCapacity
  fullName: GTA.World.BuildingCapacity
- uid: GTA.World.AnimatedBuildingCapacity*
  commentId: Overload:GTA.World.AnimatedBuildingCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_AnimatedBuildingCapacity
  name: AnimatedBuildingCapacity
  nameWithType: World.AnimatedBuildingCapacity
  fullName: GTA.World.AnimatedBuildingCapacity
- uid: GTA.World.InteriorInstanceCapacity*
  commentId: Overload:GTA.World.InteriorInstanceCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_InteriorInstanceCapacity
  name: InteriorInstanceCapacity
  nameWithType: World.InteriorInstanceCapacity
  fullName: GTA.World.InteriorInstanceCapacity
- uid: GTA.World.InteriorProxyCapacity*
  commentId: Overload:GTA.World.InteriorProxyCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_InteriorProxyCapacity
  name: InteriorProxyCapacity
  nameWithType: World.InteriorProxyCapacity
  fullName: GTA.World.InteriorProxyCapacity
- uid: GTA.World.EntityColliderCapacity*
  commentId: Overload:GTA.World.EntityColliderCapacity
  isExternal: true
  href: GTA.World.html#GTA_World_EntityColliderCapacity
  name: EntityColliderCapacity
  nameWithType: World.EntityColliderCapacity
  fullName: GTA.World.EntityColliderCapacity
